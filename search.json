[
  {
    "objectID": "pages/notebooks/cd_projekt_red.html",
    "href": "pages/notebooks/cd_projekt_red.html",
    "title": "bwrob blog",
    "section": "",
    "text": "import mplfinance as mpf\nimport yfinance as yf\nfrom rich import print as rprint\n\n\nticker_name = \"CDR.WA\"\nyf_ticker = yf.Ticker(ticker_name)\nrprint(yf_ticker.info[\"longBusinessSummary\"])\n\nCD Projekt S.A., together its subsidiaries, engages in the development, publishing, and digital distribution of \nvideo games for personal computers and video game consoles in Poland. It operates through two segments, CD PROJEKT \nRED and GOG.com. The company's product portfolio comprises Cyberpunk 2077; Phantom Liberty; Cyberpunk 2077; The \nWitcher 3: Wild Hunt; The Witcher 2 Assassins of Kings; The Witcher; and GWENT: The Witcher Card Game. It also \ndistributes videogames through GOG.com distribution platform and the GOG GALAXY application, as well as online \nchannels. In addition, the company exports its products in Europe, North America, South America, Asia, Australia, \nand Africa. CD Projekt S.A. was incorporated in 2001 and is headquartered in Warsaw, Poland.\n\n\n\n\nperiod = \"6mo\"\ninterval = \"1d\"\nhistorical_data = yf_ticker.history(\n    period=period,\n    interval=interval,\n)\nhistorical_data.tail(10)\n\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\nDividends\nStock Splits\n\n\nDate\n\n\n\n\n\n\n\n\n\n\n\n2025-03-17 00:00:00+01:00\n216.500000\n220.000000\n214.800003\n216.000000\n238362\n0.0\n0.0\n\n\n2025-03-18 00:00:00+01:00\n216.800003\n218.800003\n213.600006\n217.199997\n282651\n0.0\n0.0\n\n\n2025-03-19 00:00:00+01:00\n217.000000\n219.600006\n213.399994\n218.199997\n207029\n0.0\n0.0\n\n\n2025-03-20 00:00:00+01:00\n217.600006\n222.500000\n215.600006\n222.500000\n251282\n0.0\n0.0\n\n\n2025-03-21 00:00:00+01:00\n222.500000\n226.100006\n219.899994\n222.699997\n654792\n0.0\n0.0\n\n\n2025-03-24 00:00:00+01:00\n222.699997\n226.100006\n221.600006\n223.800003\n184696\n0.0\n0.0\n\n\n2025-03-25 00:00:00+01:00\n224.000000\n229.699997\n222.399994\n229.699997\n305370\n0.0\n0.0\n\n\n2025-03-26 00:00:00+01:00\n219.300003\n220.000000\n200.000000\n211.399994\n1270461\n0.0\n0.0\n\n\n2025-03-27 00:00:00+01:00\n211.000000\n213.800003\n206.100006\n210.399994\n343076\n0.0\n0.0\n\n\n2025-03-28 00:00:00+01:00\n210.000000\n220.600006\n207.600006\n218.399994\n548759\n0.0\n0.0\n\n\n\n\n\n\n\n\nmpf.plot(\n    historical_data,\n    type=\"candle\",\n    mav=(10, 24),\n    volume=True,\n    style=\"yahoo\",\n    figratio=(3, 2),\n    figscale=1.5,\n    show_nontrading=False,\n    title=yf_ticker.info[\"longName\"],\n    tight_layout=True,\n    warn_too_much_data=10_000,\n)\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/tab_test.html",
    "href": "pages/tab_test.html",
    "title": "Tab test",
    "section": "",
    "text": "Title\n\n\nGOOGLAAPL\n\n\nHello GOOGL \n\n\nHello AAPL \n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pages/courses/pwr-programming-2025.html",
    "href": "pages/courses/pwr-programming-2025.html",
    "title": "Programowanie (PWr Lato 2025)",
    "section": "",
    "text": "Laboratoria komputerowe do wykładu Andrzeja Giniewicza."
  },
  {
    "objectID": "pages/courses/pwr-programming-2025.html#zasady-zaliczenia",
    "href": "pages/courses/pwr-programming-2025.html#zasady-zaliczenia",
    "title": "Programowanie (PWr Lato 2025)",
    "section": "Zasady zaliczenia",
    "text": "Zasady zaliczenia\nOgólne zasady zaliczenia kursu można znaleźć na stronie kursu u wykładowcy.\nDoprecyzowania obowiazujace w moich grupach:\n\nListy zadańProjektSprawozdanieAktywność\n\n\nConajmniej pierwsze 3 listy będziemy robić na zajęciach, w systemie deklaracyjnym. Po zajęciach proszę o przesłanie rozwiązań. Kolejne listy zadań będą w formie zadań domowych, do zrobienia i przesłania przed zajęciami. Rozwiązania będą omiawiane i wyrywkowo sprawdzane w trakcie zajęć.\nNazwa pliku z rozwiązaniami listy x powinna być następująca {nr_indeksu}_lista_{x}.py. Struktura pliku poniższa:\n\n# Funkcje pomocnicze do zadania 1\n\ndef zadanie_1(): ...\n\n# Funkcje pomocnicze do zadania 2\n\ndef zadanie_2(): ...\n\n# Funkcje pomocnicze do zadania 3\n\ndef zadanie_3(): ...\n\nif __name__ == \"__main__\"\":\n    zadanie_1()\n    zadanie_2()\n    zadanie_3()\n\n\n\nSzczegóły projektu na wykładzie. Na labach będziemy omawiać problemy i pytania wyrastające przy projekcie. Można będzie konsultować decyzje projektowe i techniczne. Na ochotnika przedstawiać sprytne rozwiązania zastosowane w programie, za punkty z aktywności.\nObowiązuje jeden update w trakcie oraz prezentacja na koniec. Będziecie głosować na najciekawszy merytorycznie projekt. Ja wybiorę jeden projekt najlepszy technicznie. Oba dostaną dodatkowe punkty.\nZespoły mogą być łączone pomiędzy moimi dwoma grupami, natomiast na prezentację końcową musi pojawić się cała grupa w jednym terminie.\n\n\nSprawozdanie tworzone na arkuszu Excel, z wykorzystaniem VBA. Z powodów technicznych będzie robione na zajęciach.\n\n\nMożna zdobyć maks 10 punktów z poza puli na części z list zadań i maks 10 na części projektowej."
  },
  {
    "objectID": "pages/courses/pwr-programming-2025.html#listy-zadań-1",
    "href": "pages/courses/pwr-programming-2025.html#listy-zadań-1",
    "title": "Programowanie (PWr Lato 2025)",
    "section": "Listy zadań",
    "text": "Listy zadań\nKomentarze do list zadań znajdują się tutaj"
  },
  {
    "objectID": "pages/courses/pwr-programming-2025.html#polecane-źródła",
    "href": "pages/courses/pwr-programming-2025.html#polecane-źródła",
    "title": "Programowanie (PWr Lato 2025)",
    "section": "Polecane źródła",
    "text": "Polecane źródła\n\nPython mniej poważnie. Zabawne projekty programistyczne, które zwiększą Twoje umiejętności, Lee Vaughan\nMatematyka konkretna, Graham Ronald L., Knuth Donald E., Oren Patashnik\nWprowadzenie do algorytmów, Cormen Thomas H., Leiserson Charles E., Rivest Ronald L, Clifford Stein"
  },
  {
    "objectID": "pages/courses/uwr-nonlinear-fa-2017.html",
    "href": "pages/courses/uwr-nonlinear-fa-2017.html",
    "title": "Nieliniowa analiza funkcjonalna (UWr Lato 2017)",
    "section": "",
    "text": "Prowadzę ćwiczenia do wykładu Grzegorza Karcha. Opis kursu.\nMateriały do kursu będą się regularnie pojawiały na stronie wykładowcy.\n\nLista 1\nLista 2"
  },
  {
    "objectID": "pages/courses/uwr-nonlinear-fa-2017.html#nieliniowa-analiza-funkcjonalna",
    "href": "pages/courses/uwr-nonlinear-fa-2017.html#nieliniowa-analiza-funkcjonalna",
    "title": "Nieliniowa analiza funkcjonalna (UWr Lato 2017)",
    "section": "",
    "text": "Prowadzę ćwiczenia do wykładu Grzegorza Karcha. Opis kursu.\nMateriały do kursu będą się regularnie pojawiały na stronie wykładowcy.\n\nLista 1\nLista 2"
  },
  {
    "objectID": "pages/courses/uwr-odes-1-2018.html",
    "href": "pages/courses/uwr-odes-1-2018.html",
    "title": "Równania Różniczkowe 1 (UWr Lato 2018)",
    "section": "",
    "text": "Prowadzę jedną z grup ćwiczeniowych do wykładu Andrzeja Raczyńskiego.\nZasady zaliczania kursu dostępne są na serwisie Moodle oraz tutaj."
  },
  {
    "objectID": "pages/courses/uwr-odes-1-2018.html#materiały-do-nauki-równań-różniczkowych-zwyczajnych",
    "href": "pages/courses/uwr-odes-1-2018.html#materiały-do-nauki-równań-różniczkowych-zwyczajnych",
    "title": "Równania Różniczkowe 1 (UWr Lato 2018)",
    "section": "Materiały do nauki równań różniczkowych zwyczajnych:",
    "text": "Materiały do nauki równań różniczkowych zwyczajnych:\n\nSkrypt do kursu: Napisany przez Andrzeja Raczyńskiego. RR 1A - Raczyński\nSkrypt do zajęć na UW: Napisany przez Andrzeja Palczewskiego. RRZ skrypt - Palczewski\nZbiór zadań: Dostosowany do skryptu AP. RRZ zadania - Palczewski"
  },
  {
    "objectID": "pages/courses/uwr-odes-1-2018.html#materiały-do-nauki-równań-różniczkowych-cząstkowych",
    "href": "pages/courses/uwr-odes-1-2018.html#materiały-do-nauki-równań-różniczkowych-cząstkowych",
    "title": "Równania Różniczkowe 1 (UWr Lato 2018)",
    "section": "Materiały do nauki równań różniczkowych cząstkowych:",
    "text": "Materiały do nauki równań różniczkowych cząstkowych:\n\nMetoda charakterystyk: charakterystyki\nMetoda rozdzielania zmiennych: rozdzielaniezmiennych\nRównanie fali: fala\n\n\nListy zadań:\n\nLista 1\nLista 2\nLista 3\nLista 4\nLista 5\nLista 6\n\nListy zadań dostępne są również na serwisie Moodle."
  },
  {
    "objectID": "pages/courses/pwr-programming-2025-list-comments.html",
    "href": "pages/courses/pwr-programming-2025-list-comments.html",
    "title": "Programowanie (PWr Lato 2025) Komentarze do list",
    "section": "",
    "text": "Komentarze i ciekawostki:\n\nZdefiniowana funkcja “zna” swoją nazwę (i wie dużo więcej o sobie). Poniższa funkcja ma też docstring oraz zdefinowane typy wejścia i wyjścia. Zarówno anotacje, jak i magiczne metody zaczynające się od __ pojawią się dalej na wykładzie.\n\n\ndef minimum(lista: list[int]) -&gt; int:\n    \"\"\"Szukamy minimum.\"\"\"\n    return min(lista)\n\n\ndef maksimum(lista: list[int]) -&gt; int:\n    \"\"\"Szukamy maksimum.\"\"\"\n    return max(lista)\n\n\nfor funkcja in [maksimum, minimum]:\n    print(funkcja.__name__)\n    print(funkcja.__doc__)\n    print(funkcja.__annotations__)\n\nmaksimum\nSzukamy maksimum.\n{'lista': list[int], 'return': &lt;class 'int'&gt;}\nminimum\nSzukamy minimum.\n{'lista': list[int], 'return': &lt;class 'int'&gt;}\n\n\n\nW pythonie dobrą praktyką są krótkie linijki, maks 88 znaków. Łatwiej wtedy czyta się kod. Są do tego formattery, które robią to za nas. Ja polecam Ruff, dostępny jako wtyczka do VSC. Zamiast tego:\n\n\ndef generuj_liste_napisow_AB(dlugosc, dlugosc_napisu):\n    return [''.join(random.choices(['A', 'B'], weights=[95, 5], k=dlugosc_napisu)) for _ in range(dlugosc)]\n\nDostajemy:\n\ndef generuj_liste_napisow_AB(dlugosc, dlugosc_napisu):\n    return [\n        \"\".join(\n            random.choices(\n                [\"A\", \"B\"],\n                weights=[95, 5],\n                k=dlugosc_napisu,\n            )\n        )\n        for _ in range(dlugosc)\n    ]\n\n\nNie robimy tak:\n\n\ndef czy_jednomodalna(A):\n    maksima = maksima_lokalne(A)\n    if len(maksima) == 1:\n        return True\n    else:\n        return False\n\nTylko tak:\n\ndef czy_jednomodalna(A):\n    return len(maksima_lokalne(A)) == 1\n\n\nBiblioteka string posiada dużo pomocniczych opcji w zakresie napisów. Nie musimy wymieniać liter alfabetu, wystarczy użyć:\n\n\nimport string\n\nprint(string.ascii_lowercase)\n\nabcdefghijklmnopqrstuvwxyz\n\n\nPrzykładowe podejście do zadania 2, inne od wykładowego. Definujemy funkcję bisekcji oraz dekorator do pomiaru czasu:\n\nimport math\nfrom time import perf_counter_ns\n\nimport matplotlib.pyplot as plt\n\n\ndef measure_time(func, repeat=1):\n    \"\"\"Mierzy czas wykonania funkcji.\n\n    Zwraca funkcję owiniętą w pętlę powtórzeń.\n    Funkcja wynikowa zwraca listę czasów.\n    \"\"\"\n\n    def worker(*args, **kwargs):\n        times = []\n        for _ in range(repeat):\n            start_time = perf_counter_ns()\n            _ = func(*args, **kwargs)\n            end_time = perf_counter_ns()\n            times.append(end_time - start_time)\n        return sorted(times)\n\n    return worker\n\n\ndef bisection(\n    func, a: float, b: float, tol: float = 1e-6, max_iter: float = 1_000\n) -&gt; float:\n    \"\"\"Znajduje miejsce zerowe funkcji f metodą bisekcji.\n\n    Args:\n        a: Lewy koniec przedziału.\n        b: Prawy koniec przedziału.\n        tol: Tolerancja (dokładność).\n        max_iter: Maksymalna liczba iteracji.\n\n    Returns:\n        Przybliżone miejsce zerowe lub None, jeśli nie znaleziono.\n\n    \"\"\"\n    if func(a) * func(b) &gt;= 0:\n        return None  # Brak gwarancji istnienia miejsca zerowego\n\n    for _ in range(max_iter):\n        c = (a + b) / 2\n        if abs(func(c)) &lt; tol:\n            return c\n        if func(c) * func(a) &lt; 0:\n            b = c\n        else:\n            a = c\n    return None\n\nMierzymy czas:\n\nimport math\n\n\ndef atan_minus_1(x):\n    return math.atan(x) - 1\n\n\nn_max = 1_000\nrepeat = 100\nns = list(range(1, n_max + 1))\nmeasure_bisection_time = measure_time(bisection, repeat=repeat)\ntime_lists = [(n, measure_bisection_time(atan_minus_1, 0.0, 10.0 * n)) for n in ns]\ntime_points = [\n    (float(n), time)\n    for n, times in time_lists\n    for time in times[repeat // 3 : -repeat // 3]\n]\n\nPrzedstawiamy na wykresie:\n\nimport numpy as np\n\nx, y = zip(*time_points)\nfig, ax = plt.subplots()\nax.plot(x, y, \"o\", color=\"blue\")"
  },
  {
    "objectID": "pages/courses/pwr-programming-2025-list-comments.html#lista-1",
    "href": "pages/courses/pwr-programming-2025-list-comments.html#lista-1",
    "title": "Programowanie (PWr Lato 2025) Komentarze do list",
    "section": "",
    "text": "Komentarze i ciekawostki:\n\nZdefiniowana funkcja “zna” swoją nazwę (i wie dużo więcej o sobie). Poniższa funkcja ma też docstring oraz zdefinowane typy wejścia i wyjścia. Zarówno anotacje, jak i magiczne metody zaczynające się od __ pojawią się dalej na wykładzie.\n\n\ndef minimum(lista: list[int]) -&gt; int:\n    \"\"\"Szukamy minimum.\"\"\"\n    return min(lista)\n\n\ndef maksimum(lista: list[int]) -&gt; int:\n    \"\"\"Szukamy maksimum.\"\"\"\n    return max(lista)\n\n\nfor funkcja in [maksimum, minimum]:\n    print(funkcja.__name__)\n    print(funkcja.__doc__)\n    print(funkcja.__annotations__)\n\nmaksimum\nSzukamy maksimum.\n{'lista': list[int], 'return': &lt;class 'int'&gt;}\nminimum\nSzukamy minimum.\n{'lista': list[int], 'return': &lt;class 'int'&gt;}\n\n\n\nW pythonie dobrą praktyką są krótkie linijki, maks 88 znaków. Łatwiej wtedy czyta się kod. Są do tego formattery, które robią to za nas. Ja polecam Ruff, dostępny jako wtyczka do VSC. Zamiast tego:\n\n\ndef generuj_liste_napisow_AB(dlugosc, dlugosc_napisu):\n    return [''.join(random.choices(['A', 'B'], weights=[95, 5], k=dlugosc_napisu)) for _ in range(dlugosc)]\n\nDostajemy:\n\ndef generuj_liste_napisow_AB(dlugosc, dlugosc_napisu):\n    return [\n        \"\".join(\n            random.choices(\n                [\"A\", \"B\"],\n                weights=[95, 5],\n                k=dlugosc_napisu,\n            )\n        )\n        for _ in range(dlugosc)\n    ]\n\n\nNie robimy tak:\n\n\ndef czy_jednomodalna(A):\n    maksima = maksima_lokalne(A)\n    if len(maksima) == 1:\n        return True\n    else:\n        return False\n\nTylko tak:\n\ndef czy_jednomodalna(A):\n    return len(maksima_lokalne(A)) == 1\n\n\nBiblioteka string posiada dużo pomocniczych opcji w zakresie napisów. Nie musimy wymieniać liter alfabetu, wystarczy użyć:\n\n\nimport string\n\nprint(string.ascii_lowercase)\n\nabcdefghijklmnopqrstuvwxyz\n\n\nPrzykładowe podejście do zadania 2, inne od wykładowego. Definujemy funkcję bisekcji oraz dekorator do pomiaru czasu:\n\nimport math\nfrom time import perf_counter_ns\n\nimport matplotlib.pyplot as plt\n\n\ndef measure_time(func, repeat=1):\n    \"\"\"Mierzy czas wykonania funkcji.\n\n    Zwraca funkcję owiniętą w pętlę powtórzeń.\n    Funkcja wynikowa zwraca listę czasów.\n    \"\"\"\n\n    def worker(*args, **kwargs):\n        times = []\n        for _ in range(repeat):\n            start_time = perf_counter_ns()\n            _ = func(*args, **kwargs)\n            end_time = perf_counter_ns()\n            times.append(end_time - start_time)\n        return sorted(times)\n\n    return worker\n\n\ndef bisection(\n    func, a: float, b: float, tol: float = 1e-6, max_iter: float = 1_000\n) -&gt; float:\n    \"\"\"Znajduje miejsce zerowe funkcji f metodą bisekcji.\n\n    Args:\n        a: Lewy koniec przedziału.\n        b: Prawy koniec przedziału.\n        tol: Tolerancja (dokładność).\n        max_iter: Maksymalna liczba iteracji.\n\n    Returns:\n        Przybliżone miejsce zerowe lub None, jeśli nie znaleziono.\n\n    \"\"\"\n    if func(a) * func(b) &gt;= 0:\n        return None  # Brak gwarancji istnienia miejsca zerowego\n\n    for _ in range(max_iter):\n        c = (a + b) / 2\n        if abs(func(c)) &lt; tol:\n            return c\n        if func(c) * func(a) &lt; 0:\n            b = c\n        else:\n            a = c\n    return None\n\nMierzymy czas:\n\nimport math\n\n\ndef atan_minus_1(x):\n    return math.atan(x) - 1\n\n\nn_max = 1_000\nrepeat = 100\nns = list(range(1, n_max + 1))\nmeasure_bisection_time = measure_time(bisection, repeat=repeat)\ntime_lists = [(n, measure_bisection_time(atan_minus_1, 0.0, 10.0 * n)) for n in ns]\ntime_points = [\n    (float(n), time)\n    for n, times in time_lists\n    for time in times[repeat // 3 : -repeat // 3]\n]\n\nPrzedstawiamy na wykresie:\n\nimport numpy as np\n\nx, y = zip(*time_points)\nfig, ax = plt.subplots()\nax.plot(x, y, \"o\", color=\"blue\")"
  },
  {
    "objectID": "pages/courses/pwr-programming-2025-list-comments.html#lista-2",
    "href": "pages/courses/pwr-programming-2025-list-comments.html#lista-2",
    "title": "Programowanie (PWr Lato 2025) Komentarze do list",
    "section": "Lista 2",
    "text": "Lista 2\n\nW opowiastce o Alfredzie, wczytując się dokładnie, mógł on się także cofać, co oznacza przyzwolenie na ujemne rozwiązania. Przyjmowałem też rozwiązania zakładające jedynie dodatnią ilośc skoków.\nNie robimy tak:\n\n\ndef moja_funkcja(k):\n    return k\n\n\nnazwa = \"moja_funkcja\"\nwynik = eval(nazwa)(1)\nprint(f\"Funkcja {nazwa} daje {wynik=}\")\n\nFunkcja moja_funkcja daje wynik=1\n\n\nFunkcja eval ma bardzo mało rozsądnych zastosowań, jest niebezpieczna, najlepiej zapomniec że istnieje. Zamiast tego:\n\nfunkcja = moja_funkcja\nwynik = moja_funkcja(1)\nprint(f\"Funkcja {funkcja.__name__} daje {wynik=}\")\n\nFunkcja moja_funkcja daje wynik=1\n\n\n\nStaramy się o czyste i jasne importy z modułów. Możemy robić tak:\n\n\nfrom math import ceil, gcd, lcm\n\nprint(lcm(gcd(10, 6), ceil(10 / 3)))\n\n4\n\n\n(kolejność funkcji alfabetyczna) lub tak\n\nimport math\n\nprint(math.lcm(math.gcd(10, 6), math.ceil(10 / 3)))\n\nStaramy się nie robić tak:\n\nfrom math import lcm, ceil\nimport math\n\nprint(lcm(math.gcd(10, 6), ceil(10 / 3)))\n\nNigdy nie robimy tak:\n\nfrom math import *"
  },
  {
    "objectID": "pages/courses/pwr-programming-2025-list-comments.html#lista-3",
    "href": "pages/courses/pwr-programming-2025-list-comments.html#lista-3",
    "title": "Programowanie (PWr Lato 2025) Komentarze do list",
    "section": "Lista 3",
    "text": "Lista 3\n\nW funkcji liczby_zaprzyjażnione można użyć cachowania aby dla każdej liczby liczyć jej sumę dzielników tylko raz.\n\n\ndef liczby_zaprzyjaźnione(N):\n    liczby = []\n    sumy_dzielników = [0] * (N + 1)\n    for a in range(2, N):\n        b = suma_dzielników(a)\n        sumy_dzielników[a] = b\n        if b &lt; a:\n            if sumy_dzielników[b] == a:\n                liczby.append((a, b))\n    return liczby\n\n\nIterując po obiekcie, chcąc znać indeks na ktorym jesteśmy używamy enumerate.\n\n\nlista = [\"a\", \"b\"]\n\n# nie robimy tak\nlicznik = 0\nfor litera in lista:\n    print(f\"{licznik}: {litera}\")\n    licznik += 1\n\n# tylko tak\nfor licznik, litera in enumerate(lista):\n    print(f\"{licznik}: {litera}\")\n\n0: a\n1: b\n0: a\n1: b\n\n\n\nSito Eratostenesa da się znacząco przyśpieszyć implementując je w NumPy.\n\n\nimport numpy as np\nimport time\n\n\ndef sito_listowe(limit):\n    \"\"\"\n    Implementacja sita Eratostenesa przy użyciu list.\n    \"\"\"\n    if limit &lt; 2:\n        return []\n    kandydaci = list(range(limit))\n    kandydaci[0] = None\n    kandydaci[1] = None\n    for liczba in kandydaci:\n        if liczba is None:\n            continue\n        if liczba * liczba &gt;= limit:\n            break\n        for wielokrotnosc in range(liczba * liczba, limit, liczba):\n            kandydaci[wielokrotnosc] = None\n    return [liczba for liczba in kandydaci if liczba is not None]\n\n\ndef sito_numpy(limit):\n    \"\"\"\n    Implementacja sita Eratostenesa przy użyciu biblioteki NumPy.\n    \"\"\"\n    if limit &lt; 2:\n        return np.array([], dtype=int)\n\n    czy_pierwsza = np.ones(limit + 1, dtype=bool)\n    czy_pierwsza[0:2] = False\n    for p in range(2, int(np.sqrt(limit)) + 1):\n        if czy_pierwsza[p]:\n            czy_pierwsza[p * p :: p] = False\n    return np.nonzero(czy_pierwsza)[0]\n\n\n# Funkcja do pomiaru czasu wykonania z powtórzeniami i wyborem minimalnego czasu.\ndef mierz_czas_sita(funkcja, limit, nazwa_funkcji, powtorzenia=10):\n    \"\"\"\n    Mierzy czas wykonania danej funkcji sita Eratostenesa.\n    \"\"\"\n    czasy = []\n    for _ in range(powtorzenia):\n        czas_start = time.time()\n        wynik = funkcja(limit)\n        czas_koniec = time.time()\n        czasy.append(czas_koniec - czas_start)\n\n    minimalny_czas = min(czasy)\n    print(f\"{nazwa_funkcji} (limit={limit}):\")\n    print(f\"  Minimalny czas ({powtorzenia} uruchomień): {minimalny_czas:.6f} sekund\")\n    print(f\"  Liczba liczb pierwszych: {len(wynik)}\")\n\n\n# Przykładowe użycie i pomiar czasu\nlimit = 1_000_000\n\nprint(\"Pomiar czasu z limitem =\", limit)\nmierz_czas_sita(sito_numpy, limit, \"Sito NumPy (zoptymalizowane)\")\nmierz_czas_sita(sito_listowe, limit, \"Sito Listowe\")\n\nPomiar czasu z limitem = 1000000\nSito NumPy (zoptymalizowane) (limit=1000000):\n  Minimalny czas (10 uruchomień): 0.001624 sekund\n  Liczba liczb pierwszych: 78498\nSito Listowe (limit=1000000):\n  Minimalny czas (10 uruchomień): 0.071456 sekund\n  Liczba liczb pierwszych: 78498"
  },
  {
    "objectID": "pages/courses/pwr-programming-2025-list-comments.html#lista-4",
    "href": "pages/courses/pwr-programming-2025-list-comments.html#lista-4",
    "title": "Programowanie (PWr Lato 2025) Komentarze do list",
    "section": "Lista 4",
    "text": "Lista 4\n\nCzęsto pojawia się policzenia powtórzeń elementów w liśicie:\n\n\nlista = [1, 2, 2, 1, 2, 3, 4, 2, 1, 3]\nwystapienia = {klucz: 0 for klucz in set(lista)}\nfor elem in lista:\n    wystapienia[elem] += 1\nprint(wystapienia)\n\n{1: 3, 2: 4, 3: 2, 4: 1}\n\n\nPython ma do tego wbudowaną funkcjonalność Counter:\n\nfrom collections import Counter\nwystapienia = Counter(lista)\nprint(wystapienia)\n\nCounter({2: 4, 1: 3, 3: 2, 4: 1})\n\n\n\nPodobnie mamy gotowe narzędzia do liczenia sum częściowych. Zamiast:\n\n\npozycje = {}\nsuma = 0\nklucze = sorted(wystapienia)\nfor klucz in klucze:\n    pozycje[klucz] = suma\n    suma += wystapienia[klucz]\nprint(pozycje)\n\n{1: 0, 2: 3, 3: 7, 4: 9}\n\n\nmożemy użyć accumulate:\n\nfrom itertools import accumulate\n\n\npozycje = dict(\n    zip(\n        klucze,\n        accumulate((wystapienia[k] for k in klucze), initial=0),\n    )\n)\nprint(pozycje)\n\n{1: 0, 2: 3, 3: 7, 4: 9}\n\n\n\nAlternatywne podejście do sortowania przez zliczanie. Dobry pretekst aby poznać defaultdict oraz chain.\n\n\nfrom collections import defaultdict\nfrom itertools import chain\n\n\ndef sortowanie_zliczanie(lista, klucze):\n    wystapienia = defaultdict(list)\n    for elem in lista:\n        wystapienia[elem].append(elem)\n    return list(\n        chain.from_iterable(\n            (wystapienia[klucz] for klucz in klucze),\n        )\n    )\n\n\nprint(\n    sortowanie_zliczanie(\n        [\"a\", \"c\", \"a\", \"b\", \"b\"],\n        klucze=(\"c\", \"b\", \"a\"),\n    )\n)\n\n['c', 'b', 'b', 'a', 'a']"
  },
  {
    "objectID": "pages/hobbies.html",
    "href": "pages/hobbies.html",
    "title": "Fueling the Mind & Body: My Off-Duty Explorations.",
    "section": "",
    "text": "Supprisingly, I still have some hobbies outside technology and finance. This list is meant to be aspirational – i.e. sort of Instagram take on my interests to motivate me to invest more time into things I like. Too often I find myself in a work-sleep-work cycle that leaves little time for enjoyment.\n\n\nI have a PS5, a NS and a gaming PC. I play only single-player games, enjoy rouge-likes and open-worlds the most. My favorite games are God of War (2018), Hades and Trackmania. If your life’s companion is also a gamer (or just plays a little bit) i highly recommend It Takes Two.\n\n\n\n\n\n\n\n\nGot two cameras, old big hog Canon 450D and compact and sleek Sony A6000. I can make a decent portrait or Instagram ‘location photo’ but mosty interested in nature and urban settings. Would like to learn more on light and exposure usage, for now I am looking for contrasts and interesting compositions in my photos.\n\n\n\n\n\n\n\n\nClever ideas that fill and fuel natural sciences are often intimidating. Sure, there are occasional outliers – genius individuals that make history with revolutionary inventions. But most of the progress is achieved by a tectonic creep of incremental small wins and observations. All of those geniuses stood on the shoulders of giants that came before. The history of how those ideas and meanders of knowledge happened can be thrilling and educating.\n\n\n\n\n\n\n\n\nMaster chef of making tasty meal from leftovers. Specializing in Asian fusion cuisine. Fried rice with pulled tofu? Sushi with beetroot? Korean beef with sauerkraut? Yes, those are all delicious!\n\n\n\n\n\n\n\n\nI am a proud owner of 90’s vintage road bike. It was recently refurbished and looks smashing! It even has chipset print and binary code on the handles!\n\n\n\n\n\n\n\n\nYes, just strolling, but with a philosophy. No headphones, no distractions, no direction. Just observing what changed in the neighborhood I’ve lived in for the last 15 years, and what is happening inside. Think awareness meditation but while walking."
  },
  {
    "objectID": "pages/hobbies.html#road-cycling",
    "href": "pages/hobbies.html#road-cycling",
    "title": "Fueling the Mind & Body: My Off-Duty Explorations.",
    "section": "",
    "text": "I am a proud owner of 90’s vintage road bike. It was recently refurbished and looks smashing! It even has chipset print and binary code on the handles!"
  },
  {
    "objectID": "pages/hobbies.html#strolling.",
    "href": "pages/hobbies.html#strolling.",
    "title": "Fueling the Mind & Body: My Off-Duty Explorations.",
    "section": "",
    "text": "Yes, just strolling, but with a philosophy. No headphones, no distractions, no direction. Just observing what changed in the neighborhood I’ve lived in for the last 15 years, and what is happening inside. Think awareness meditation but while walking."
  },
  {
    "objectID": "pages/teaching.html",
    "href": "pages/teaching.html",
    "title": "Dydaktyka",
    "section": "",
    "text": "Programowanie"
  },
  {
    "objectID": "pages/teaching.html#semestr-letni-2435",
    "href": "pages/teaching.html#semestr-letni-2435",
    "title": "Dydaktyka",
    "section": "",
    "text": "Programowanie"
  },
  {
    "objectID": "pages/teaching.html#semestr-zimowy-2425",
    "href": "pages/teaching.html#semestr-zimowy-2425",
    "title": "Dydaktyka",
    "section": "Semestr zimowy 24/25",
    "text": "Semestr zimowy 24/25\n\nWstęp do programowania"
  },
  {
    "objectID": "pages/teaching.html#semestr-letni-1718",
    "href": "pages/teaching.html#semestr-letni-1718",
    "title": "Dydaktyka",
    "section": "Semestr letni 17/18",
    "text": "Semestr letni 17/18\n\nRównania różniczkowe 1\nRównania różniczkowe 1R"
  },
  {
    "objectID": "pages/teaching.html#semestr-letni-1617",
    "href": "pages/teaching.html#semestr-letni-1617",
    "title": "Dydaktyka",
    "section": "Semestr letni 16/17",
    "text": "Semestr letni 16/17\n\nNieliniowa analiza funkcjonalna\nRównania różniczkowe 1A\nZajęcia wyrównawcze z Analizy 1.2"
  },
  {
    "objectID": "pages/teaching.html#semestr-zimowy-1617",
    "href": "pages/teaching.html#semestr-zimowy-1617",
    "title": "Dydaktyka",
    "section": "Semestr zimowy 16/17",
    "text": "Semestr zimowy 16/17\n\nZajęcia wyrównawcze z Analizy 1.1"
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html",
    "href": "posts/strategy-pattern-integration/index.html",
    "title": "Strategies for Numerical Integration",
    "section": "",
    "text": "Calculation of many financial methods or metrics relies on a mathematical tool called numerical integration. In simple terms, numerical integration takes a function that represents a continuous process (like the changing value of an investment over time) and approximates the area under its curve. This area can then be used to calculate important quantities, like the total return of the investment or price of a derivative instrument.\nSo we are tasked with a problem, and one that has many different ways of solving, or rather approximating the solution. You most likely (taking into account you’re still reading this) encountered rectangle rule, or Riemann summation in your Calculus 101 course/self-learning. But there are many other techniques, which we call schemes.\nFor quantitative analysts, the choice of the integration method matters. Different integration schemes offer varying levels of accuracy and efficiency. Unfortunately there’s no best technique. Same algorithm can be a perfect fit for problems with certain characteristics, but unusable for others. And then there is the old as time performance vs. accuracy trade-off.\nAs programmers working in finance, we need to be adaptable and leverage solutions that allow us to switch between these methods seamlessly."
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html#numerical-integration",
    "href": "posts/strategy-pattern-integration/index.html#numerical-integration",
    "title": "Strategies for Numerical Integration",
    "section": "",
    "text": "Calculation of many financial methods or metrics relies on a mathematical tool called numerical integration. In simple terms, numerical integration takes a function that represents a continuous process (like the changing value of an investment over time) and approximates the area under its curve. This area can then be used to calculate important quantities, like the total return of the investment or price of a derivative instrument.\nSo we are tasked with a problem, and one that has many different ways of solving, or rather approximating the solution. You most likely (taking into account you’re still reading this) encountered rectangle rule, or Riemann summation in your Calculus 101 course/self-learning. But there are many other techniques, which we call schemes.\nFor quantitative analysts, the choice of the integration method matters. Different integration schemes offer varying levels of accuracy and efficiency. Unfortunately there’s no best technique. Same algorithm can be a perfect fit for problems with certain characteristics, but unusable for others. And then there is the old as time performance vs. accuracy trade-off.\nAs programmers working in finance, we need to be adaptable and leverage solutions that allow us to switch between these methods seamlessly."
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html#design-patterns",
    "href": "posts/strategy-pattern-integration/index.html#design-patterns",
    "title": "Strategies for Numerical Integration",
    "section": "Design patterns",
    "text": "Design patterns\nThis is where design patterns come in. Design patterns are reusable solutions to common programming problems. Their widespread adoption in software development is largely attributed to the publication of Design Patterns: Elements of Reusable Object-Oriented Software in 1994. Authored by E. Gamma, R. Helm, R. Johnson, and J. Vlissides (often referred to as the “Gang of Four” or GoF), this book cataloged 23 essential software design patterns. These patterns provided solutions to common design problems in object-oriented programming, promoting code reusability, maintainability, and flexibility.\nSome design patterns can feel clunky or inelegant when implemented in Python. The language itself often has built-in features or idioms that achieve the same result in a more Pythonic way (meaning it follows Python’s style and conventions). Sometimes, design patterns can be seen as overcomplicating simple problems. On the other hand, usage of well-known and understood patterns may enhance your engineering skills and improve code readability.\nUltimately, the decision of whether or not to use design patterns in Python depends on the specific context of your project and your coding style. There’s no right or wrong answer. But first, you need to know the classics to diss the classics. We’ll hold on with the dissing for now, cause in the example below chosen design pattern makes for a very clean implementation. You’ll see for yourself."
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html#strategy-pattern",
    "href": "posts/strategy-pattern-integration/index.html#strategy-pattern",
    "title": "Strategies for Numerical Integration",
    "section": "Strategy pattern",
    "text": "Strategy pattern\nWe know the stage now — one problem statement, multiple strategies to tackle. Important observation here is that we don’t actually care which one is used. When you substitute the integral value to client code — a formula or further algorithm — it’s irrelevant how it was computed, as long its correct to required level of accuracy. This means that the problem should be decoupled from algorithms to solve it. We should target a implementation where you can state a problem Calculate the integral of \\(\\sin(x)\\) from \\(0\\) to \\(\\pi\\) and then just throw different algorithms at it to obtain a solution. So let’s get coding!\n\n\n\n\n\n\nNote\n\n\n\nI will show you this pattern through an example. If you prefer more generic setup see Refactoring Guru’s implementation. The customary ‘software engineering’ example used to present the SDP is sorting a list of integers using different sorting algorithms."
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html#abstract-schema",
    "href": "posts/strategy-pattern-integration/index.html#abstract-schema",
    "title": "Strategies for Numerical Integration",
    "section": "Abstract schema",
    "text": "Abstract schema\nEach scheme that we’d come up with, even the most complex ones, would have the same main purpose — ‘integrate’. To make the implementation for it, we create a template class that all concrete schemes will inherit from.\n\nfrom abc import ABC, abstractmethod\nfrom typing import Callable\n\nclass IntegrationScheme(ABC):\n    \"\"\"Abstract base class for integration schemas.\"\"\"\n\n    @abstractmethod\n    def integrate(\n        self,\n        integrand: Callable[[float], float],\n        *,\n        start: float,\n        end: float,\n    ) -&gt; float:\n        \"\"\"Abstract method for integrating a function.\"\"\"\n\nUnpacking this, we already used some nifty Pythonic tricks in those few lines:\n\nABC is a way of defining abstract classes. If you try to create an object of a class inheriting from ABC you’d get an error. It is used as a base class for concrete subclasses and serves as a template. Think of an example of animal and cat from the real world. You’ve never seen an abstract animal being in your life (that would be a truly transcendental experience). But you’ve hopefully seen many cats.\nDecorator @abstractmethod signifies that the method is just a mock-up. It needs to be present and overridden in all concrete classes that inherit from IntegrationScheme\nType annotations like start: float don’t affect the script behavior in any way. Those are only for us to not get lost in Python’s dynamic typing magic. They can also be leveraged by static type checkers like mypy to flag problems with your code before you run it — just like in compiled languages.\nCallable annotation signifies a function-like object something you can call through (), like some_func(one, second=two)’ — here some_func is a callable. Calls to an object can be implemented by writing the __call__ method for the class."
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html#concrete-schema-implementations",
    "href": "posts/strategy-pattern-integration/index.html#concrete-schema-implementations",
    "title": "Strategies for Numerical Integration",
    "section": "Concrete schema implementations",
    "text": "Concrete schema implementations\n\nRectangle Rule\nIt’s the simplest way of estimating the area under a curve you can think of — cover it with smaller and smaller rectangles with the value of a function at the leftmost point as height constant width.\n\nImplementing this idea is trivial when using numpy, but let’s add some syntactic sugar so the class is sweeter to work with.\n\nimport numpy as np\n\nclass RectangleScheme(IntegrationScheme):\n    \"\"\"Schema for rectangle integration.\"\"\"\n\n    def __init__(\n        self,\n        steps: int,\n    ) -&gt; None:\n        \"\"\"Initializes the rectangle integration config.\"\"\"\n        if steps &lt;= 0:\n            raise ValueError(\"Steps must be greater than 0.\")\n        self._steps = steps\n\n    def __str__(self) -&gt; str:\n        \"\"\"Returns the string representation of the schema.\"\"\"\n        return f\"Rectangle schema with {self._steps} steps\"\n\n    def integrate(\n        self,\n        integrand: Callable[[float], float],\n        *,\n        start: float,\n        end: float,\n    ) -&gt; float:\n        \"\"\"Integrates a function using rectangle integration.\"\"\"\n        x_points = np.linspace(start, end, self._steps)\n        values = integrand(x_points)\n        dx = (end - start) / np.float64(self._steps)\n        return np.sum(values) * dx\n\n\nRectangleScheme subclasses IntegrationScheme so we need to implement the integrate method.\n__init__ method is run each time object of this class is requested. It sets the stage — in this case all we need is the number of rectangles we are to use. To be cautious, we check if the steps number is positive.\n__str__ is called when we try to represent the object as string — ex. in f-strings or directly calling str(). We just taught our class objects to introduce themselves nicely.\nintegrate is as simple as the idea behind it:\n\nget the equaly spaced x values,\ncalculate integrand values at the points,\nsum it up,\nmultiply the sum by the distance between two consecutive points.\n\n\n\n\nSimple Monte Carlo\nThis guy sounds fancy with its luxurious Monaco vibes, but it’s just a peasant in a nice suit. Instead of looking at equaly-spaced points, we shuffle them from uniform distribution on the interval of integration. We calculate the integrand function values at those points and sum them up. Then multiply the sum by the average distance between points and through the magic of probability theory (and not opening actual probability textbook in 10 years) you get a good probabilistic estimator of the integral value. The implementation is analogous to the RectangleScheme.\n\nfrom typing import Optional\n\nclass MonteCarloScheme(IntegrationScheme):\n    \"\"\"Schema for Monte Carlo integration.\"\"\"\n\n    def __init__(\n        self,\n        random_points: int,\n        random_seed: Optional[int] = None,\n    ) -&gt; None:\n        \"\"\"Initializes the rectangle integration config.\"\"\"\n        if random_points &lt;= 0:\n            raise ValueError(\"Points must be greater than 0.\")\n        self.__random_points = random_points\n        self.__random_seed = random_seed\n\n    def __str__(self) -&gt; str:\n        \"\"\"Returns the string representation of the schema.\"\"\"\n        points_msg = f\"Monte Carlo schema with {self.__random_points} random points\"\n        seed_msg = f\" and seed {self.__random_seed}\" if self.__random_seed else \"\"\n        return f\"{points_msg}{seed_msg}\"\n\n    def integrate(\n        self,\n        integrand: Callable[[float], float],\n        *,\n        start: float,\n        end: float,\n    ) -&gt; float:\n        \"\"\"Integrates a function using Monte Carlo integration.\"\"\"\n        np.random.seed(seed=self.__random_seed)\n        x_points = np.random.uniform(start, end, self.__random_points)\n        values = integrand(x_points)\n        average_dx = (end - start) / np.float64(self.__random_points)\n        return np.sum(values) * average_dx\n\n\nOptional[int] annotation means that the value of random_seed can be a float or None. With a set seed we get a reproducable results — good for testing but not for actual usage. Hence the default value here is None.\n\n\n\n\n\n\n\nNote\n\n\n\nThe Optional stands for could be None as well, it doesn’t affect if the input is mandatory or not. In our case it’s not, but thats stated by the = None part. In Python 3.11 onwards it’s recommended to use int | None instead."
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html#integrator",
    "href": "posts/strategy-pattern-integration/index.html#integrator",
    "title": "Strategies for Numerical Integration",
    "section": "Integrator",
    "text": "Integrator\nWhat’s left is to have a way of defining the problem to solve and define how our schemes (strategies) interact with it.\n\n\"\"\"An integrator class that allows to perform integration using different schemas.\"\"\"\nfrom typing import Callable\n\nclass Integrator:\n    \"\"\"An integrator class that allows to perform integration using different\n    schemas as strategies.\"\"\"\n\n    def __init__(\n        self,\n        integrand: Callable[[float], float],\n        interval_start: float,\n        interval_end: float,\n    ) -&gt; None:\n        \"\"\"Initializes the integrator class.\"\"\"\n        if interval_start &gt;= interval_end:\n            raise ValueError(\"Start value must be less than end value.\")\n        self.__integrand = integrand\n        self.__interval_start = interval_start\n        self.__interval_end = interval_end\n\n    def __call__(\n        self,\n        schema: IntegrationScheme,\n    ) -&gt; float:\n        \"\"\"\n        Calculates the definite integral value of a function.\n\n        Args:\n            schema: integration schema\n        \"\"\"\n        print(f\"Using {schema}.\")\n        return schema.integrate(\n            self.__integrand,\n            start=self.__interval_start,\n            end=self.__interval_end,\n        )\n\n\nThe __init__ takes in the obvious parameters — function to integrate, start and end of the interval. It also checks if it’s a proper integral.\nWe get to implement our own __call__ method now. It’s clear what Integrator class does. No need to have a method with a descriptive name like Integrator.integrate. To use it you pass through the integration scheme into the integrator — notice annotation of the abstract IntegrationScheme. It prints the info on strategy used (using the __str__ methods) and calls integrate method of the scheme. No care in the world on how the value is actually calculated."
  },
  {
    "objectID": "posts/strategy-pattern-integration/index.html#lets-integrate",
    "href": "posts/strategy-pattern-integration/index.html#lets-integrate",
    "title": "Strategies for Numerical Integration",
    "section": "Let’s integrate!",
    "text": "Let’s integrate!\nOk, now to the integrating! Let’s set up the stage:\n\nstart, end = 0, np.pi / 2.0\n\ndef f(x: float) -&gt; float:\n    return np.sin(x) + np.cos(x)\n\nExcited? Don’t be… yet.\nWe should get some benchmark value first. As none of us would bother to integrate this by hand, we’ll use SciPy. Unexpectedly (SciPy uses C and Fortran underneath), we get the result in a breeze and it is very close to actual value of 2.0.\n\nfrom scipy.integrate import quad\n\nscipy_quad, err = quad(f, start, end)\nprint(scipy_quad)\n\n1.9999999999999998\n\n\nNow let’s use our Integrator class and see.\n\nintegrator = Integrator(\n    f,\n    interval_start=start,\n    interval_end=end,\n)\n\niterations = [2**i for i in range(0,21,5)]\nrectangle_results = [integrator(RectangleScheme(steps=i)) for i in iterations]\nmc_results = [integrator(MonteCarloScheme(random_points=i)) for i in iterations]\n\nprint(f\"Rectangle schema results:\\n{rectangle_results}.\")\nprint(f\"Monte Carlo schema results:\\n{mc_results}.\")\n\nUsing Rectangle schema with 1 steps.\nUsing Rectangle schema with 32 steps.\nUsing Rectangle schema with 1024 steps.\nUsing Rectangle schema with 32768 steps.\nUsing Rectangle schema with 1048576 steps.\nUsing Monte Carlo schema with 1 random points.\nUsing Monte Carlo schema with 32 random points.\nUsing Monte Carlo schema with 1024 random points.\nUsing Monte Carlo schema with 32768 random points.\nUsing Monte Carlo schema with 1048576 random points.\nRectangle schema results:\n[np.float64(1.5707963267948966), np.float64(1.986172817555692), np.float64(1.9995804632216618), np.float64(1.9999869013603688), np.float64(1.9999995906791057)].\nMonte Carlo schema results:\n[np.float64(2.1319255971531157), np.float64(2.014877742794417), np.float64(1.9897753653556745), np.float64(2.000777757422879), np.float64(2.000285046770072)].\n\n\nThe performance and convergence of those schemes is terrible. Like anything in Python, if you want robust and performing code, you need to implement it with C or use any/all of the enhancement frameworks that Python provides (see Numba). Additionally, the simple methods we implemented are very naive. The standard numerical packages use sophisticated algorithms honed for many decades.\nBut I was wrong! You should be excited! We just learned new approach for setting up extensible and readable code! Look how cleanly the problem statement is separated form different strategies to solve it.\nIf you are now wondering how much we could improve by using more advanced techniques (like stratified Monte Carlo or adaptive quadrature) you just need to implement new subclass of `IntegrationSchema’ and you’re done. No changes to the existing code are needed, just simple extension. And that’s the idea behind strategy pattern.\n\n\n\n\n\n\nNote\n\n\n\nDownload the whole code here."
  },
  {
    "objectID": "posts/exit-stack/index.html",
    "href": "posts/exit-stack/index.html",
    "title": "Exit stack to the rescue",
    "section": "",
    "text": "As a quantitative finance professional you’ll often find yourself with risk management systems (RMS). RMS’s are extensive frameworks that let you properly define a book (portfolio) of your financial transactions and run varia of pricing and risk analysis on it. For big financial players, like investment banks, the RMS will be internal proprietary codbase that is run in-house. For smaller enterprises or second-line reporting it’s not feasable to tackle creating such vast infrastructure. Hence, where there’s a need, someone will try to make money on it. This leads us to third-party (or vendor) RMS, of which there are plenty (ex. Murex, Acadia).\nWorking with vendor RMS, especially one that covers computations for you, entails juggling multiple resources to obtain your risk metrics. Defining OTC products, benchmarks, portfolios, and running risk analysis can involve numerous API calls, each requiring proper setup and cleanup. This can lead to messy code and potential errors or performance bottlenecks if resources aren’t handled correctly.\nThankfully, Python provides a powerful concept called context managers (CM) that streamline resource managment. True to the language’s ‘batteries included’ philosophy, there’s also a contextlib library that contains variety of tools for easing up your work with CMs. Today we’ll look at a (mock-up) usage of ExitStack class in real-life scenario of running risk analysis on RMS. If you need a refresher on CMs, check out this tutorial by RealPython."
  },
  {
    "objectID": "posts/exit-stack/index.html#working-with-risk-managment-systems",
    "href": "posts/exit-stack/index.html#working-with-risk-managment-systems",
    "title": "Exit stack to the rescue",
    "section": "",
    "text": "As a quantitative finance professional you’ll often find yourself with risk management systems (RMS). RMS’s are extensive frameworks that let you properly define a book (portfolio) of your financial transactions and run varia of pricing and risk analysis on it. For big financial players, like investment banks, the RMS will be internal proprietary codbase that is run in-house. For smaller enterprises or second-line reporting it’s not feasable to tackle creating such vast infrastructure. Hence, where there’s a need, someone will try to make money on it. This leads us to third-party (or vendor) RMS, of which there are plenty (ex. Murex, Acadia).\nWorking with vendor RMS, especially one that covers computations for you, entails juggling multiple resources to obtain your risk metrics. Defining OTC products, benchmarks, portfolios, and running risk analysis can involve numerous API calls, each requiring proper setup and cleanup. This can lead to messy code and potential errors or performance bottlenecks if resources aren’t handled correctly.\nThankfully, Python provides a powerful concept called context managers (CM) that streamline resource managment. True to the language’s ‘batteries included’ philosophy, there’s also a contextlib library that contains variety of tools for easing up your work with CMs. Today we’ll look at a (mock-up) usage of ExitStack class in real-life scenario of running risk analysis on RMS. If you need a refresher on CMs, check out this tutorial by RealPython."
  },
  {
    "objectID": "posts/exit-stack/index.html#setting-the-stage",
    "href": "posts/exit-stack/index.html#setting-the-stage",
    "title": "Exit stack to the rescue",
    "section": "Setting the stage",
    "text": "Setting the stage\nTo run an analysis, the RMS first needs to know what our positions are. In case of tradable assets it’s simple — we provide a market identifier and how much of the instrument we are holding. What do we do if we have some bespoke agreement with specific counterparty (an over-the-counter transaction)? We will need to define it from scratch in the RMS using data from the term sheet (assuming this kind of agreement is covered).\nNext, we need to specify the risk metrics we want to calculate — define the analysis scope. Let’s say we hold some equity options and we are intertested in their deltas and beta exposures. The betas are defined with respect to some benchmark — ex. portfolio holding 1 stock in US500 ETF. So we define the benchmark and link it to our analysis.\nFinally — once portfolio and analysis are defined in RMS — we call the API to start the calculation and respond with results. This is the control flow we execute to get to this point:\n\n\n\n\n\nflowchart LR\n  A[OTC Products] --&gt; B[Portfolio]\n  B --&gt; C{Analysis Run}\n  D[Benchmarks] --&gt; E[Analysis Definition]\n  E --&gt; C\n  C --&gt; F(Results)\n\n\n\n\n\n\nIf we know we’re never going to use all of the resources, we should clean up the server artifacts after receving the results. So for each resource we should have a CM.\n\nMock functions\nThe setup described above comes from a real-life situation I worked through. I can’t show you the actual API usage or data (or even the name of RMS itself), so we need to define some mocker functions. Mocks like this are actually not an uncommon thing — such approach is prevalent in testing API client code. In our case it would look like this:\n\nfrom enum import StrEnum\nfrom uuid import uuid4\n\n\nclass MockObject(StrEnum):\n    \"\"\"Types of mock objects.\"\"\"\n\n    ANALYSIS = \"analysis\"\n    BENCHMARK = \"benchmark\"\n    OTC_PRODUCTS = \"otc_products\"\n    PORTFOLIO = \"portfolio\"\n\n\ndef mock_object(object_type: MockObject) -&gt; str:\n    \"\"\"Mock a UUID for a given object type.\n\n    Args:\n        object_type: Type of object.\n    \"\"\"\n    return f\"{object_type}_{uuid4()}\"\n\n\ndef mock_preparation(object_type: MockObject, **kwargs) -&gt; None:\n    \"\"\"Mock preparation of an object.\n\n    Args:\n        object_type: Type of object.\n    \"\"\"\n    print(f\"Preparing {object_type}\" + (f\" using {kwargs}\" if kwargs else \".\"))\n\n\ndef mock_clean_up(object_uuid: str) -&gt; None:\n    \"\"\"Mock clean up of an object.\n\n    Args:\n        object_uuid: Uuid of the object.\n    \"\"\"\n    print(f\"Cleaning up after {object_uuid}.\")\n\nFor each of the four types of resources we mock the preparation, object (ex. API response, some id of definition on server) and the clean up process.\n\n\nContext managers\nEasiest way to define a CM is through contextlib.contextmanager decorator. To use it, you need a function that returns a generator. Code executed on enter should come before yield statement and the one for the exit afterwards. The generator yields the result of the CM (ex. handle to an opened file), the y in with x(*args) as y:.\n\nfrom contextlib import contextmanager\nfrom typing import Generator\n\n@contextmanager\ndef analysis(\n    *,\n    benchmark_uuid: str,\n) -&gt; Generator[str, None, None]:\n    \"\"\"Mock definition of an analysis.\n\n    Example: equity delta and correlation with benchmark.\n\n    Args:\n        benchmark_uuid: Uuid of the benchmark.\n    \"\"\"\n    mock_preparation(\n        MockObject.ANALYSIS,\n        benchmark_name=benchmark_uuid,\n    )\n    analysis_uuid = mock_object(MockObject.ANALYSIS)\n    yield analysis_uuid\n    mock_clean_up(analysis_uuid)\n\nModern approach to Python development leans heavily towards type annotations. Dynamical typing is powerful but can lead to unwieldy code. To properly annotate the analysis function we need to import Generator from typing module. Remember, the @contextmanager decorator takes the function and turns it into CM — a class with __enter__ and __exit__ methods. The Generator needs three inputs but in our case only the first one is important — YieldType, here str (see for more).\nWith this done implementing the 3 remaining CMs is easy, just remember our flow chart.\n\n@contextmanager\ndef benchmark() -&gt; Generator[str, None, None]:\n    \"\"\"Mock definition of a benchmark.\n\n    Args:\n        otc_products_uuid: Uuid of the otc products.\n    \"\"\"\n    mock_preparation(\n        MockObject.BENCHMARK,\n    )\n    benchmark_uuid = mock_object(MockObject.BENCHMARK)\n    yield benchmark_uuid\n    mock_clean_up(benchmark_uuid)\n\n\n@contextmanager\ndef otc_products() -&gt; Generator[str, None, None]:\n    \"\"\"Mock definition of an otc products.\n\n    Args:\n        otc_products_uuid: Uuid of the otc products.\n    \"\"\"\n    mock_preparation(MockObject.OTC_PRODUCTS)\n    otcs_uuid = mock_object(MockObject.OTC_PRODUCTS)\n    yield otcs_uuid\n    mock_clean_up(otcs_uuid)\n\n\n@contextmanager\ndef portfolio(\n    *,\n    portfolio_name: str,\n    otc_products_uuid: str,\n) -&gt; Generator[str, None, None]:\n    \"\"\"Mock definition of a portfolio.\n\n    Args:\n        otc_products_uuid: Uuid of the otc products.\n    \"\"\"\n    mock_preparation(\n        MockObject.PORTFOLIO,\n        portfolio_name=portfolio_name,\n        otc_products_uuid=otc_products_uuid,\n    )\n    portfolio_uuid = mock_object(MockObject.PORTFOLIO)\n    yield portfolio_uuid\n    mock_clean_up(portfolio_uuid)\n\n\n\nAnalysis results\nNo stress or complexity here, to run the analysis we need to specify which analysis to run on which portfolio.\n\nimport pandas as pd\n\ndef analysis_results(\n    *,\n    analysis_uuid: str,\n    portfolio_uuid: str,\n) -&gt; pd.DataFrame:\n    \"\"\"Mock running the analysis on a given portfolio.\n\n    Returns empty dataframe.\n\n    Args:\n        analysis_uuid: Uuid of the analysis.\n        portfolio_uuid: Uuid of the portfolio.\n    \"\"\"\n    print(f\"Running analysis {analysis_uuid} on portfolio {portfolio_uuid}.\")\n    return pd.DataFrame()"
  },
  {
    "objectID": "posts/exit-stack/index.html#section",
    "href": "posts/exit-stack/index.html#section",
    "title": "Exit stack to the rescue",
    "section": "",
    "text": "Finally, we can run some (mock) risk analysis!\n\nUsing contexts directly\nFirst, we use the managers directly through with clause, remembering the dependencies from our flow chart.\n\nPORTFOLIO = \"portfolio_1\"\n\ndef run_analysis() -&gt; pd.DataFrame:\n    \"\"\"Mock running the analysis using with clauses.\"\"\"\n    with otc_products() as otc_uuid:\n        with benchmark() as benchmark_uuid:\n            with portfolio(\n                portfolio_name=PORTFOLIO,\n                otc_products_uuid=otc_uuid,\n            ) as portfolio_uuid:\n                with analysis(\n                    benchmark_uuid=benchmark_uuid,\n                ) as analysis_uuid:\n                    results = analysis_results(\n                        analysis_uuid=analysis_uuid,\n                        portfolio_uuid=portfolio_uuid,\n                    )\n    return results\n\nThis is terrible! I am already getting lost, needed few tries to get it right. We ended up with 6 levels of indentation, the code is confusing, the flow is obtuse. Let’s run it either way, to see if at least works.\n\ndef print_title(title: str) -&gt; None:\n    \"\"\"Print a title padded, surrounded by dashes and empty lines.\"\"\"\n    print(\"\\n\" + title.center(60, \"-\") + \"\\n\")\n\nprint_title(\"Running analysis.\")\nrun_analysis()\n\n\n---------------------Running analysis.----------------------\n\nPreparing otc_products.\nPreparing benchmark.\nPreparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_69dafefc-792f-4b1f-8008-bbf25a008a61'}\nPreparing analysis using {'benchmark_name': 'benchmark_db1187ee-c8d2-4fc2-9cb9-9979f79c6550'}\nRunning analysis analysis_d2044a97-296b-4dac-91ae-f922e1b9de5d on portfolio portfolio_7e9878f3-c551-4a66-8783-89dd38a1fff0.\nCleaning up after analysis_d2044a97-296b-4dac-91ae-f922e1b9de5d.\nCleaning up after portfolio_7e9878f3-c551-4a66-8783-89dd38a1fff0.\nCleaning up after benchmark_db1187ee-c8d2-4fc2-9cb9-9979f79c6550.\nCleaning up after otc_products_69dafefc-792f-4b1f-8008-bbf25a008a61.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreat, the behaviour is as expected, everything is cleaned after nicely. We achieved the goal but the code is unmaintainable. Looks like a subject of the joke “good code makes your job safe for a day, but terrible code in production makes it safe for a lifetime”. Being reckless and with no regard to job security as we are, we’ll fix it.\nI can clearly recall the most unamanagable and unreadable code I’ve seen in my career and the culprit was fired in the end. Different reasons, long time later, but still. So the joke is just a joke, don’t rely on a bad code as your job insurance."
  },
  {
    "objectID": "posts/exit-stack/index.html#the-exitstack",
    "href": "posts/exit-stack/index.html#the-exitstack",
    "title": "Exit stack to the rescue",
    "section": "The ExitStack",
    "text": "The ExitStack\nHere comes in the MVP — ExitStack from contextlib, made for streamlining complex context managment situationships. Conceptually it’s just a First-In-Last-Out (FILO) stack. You put CMs on top, one by one. When CM is pushed to stack, its __enter__ method is called and you can intercept the result. ExitStack is a CM itself, it’s __exit__ method is just calling the exits of CMs in reverse order.\n\n\n\n\n\nflowchart LR\n    A(Enter CM A) ---&gt; B(Enter CM B)\n    B ---&gt; C(Enter CM C)\n    C ---&gt; D[Do stuff]\n    D ---&gt; E(Exit CM C)\n    E ---&gt; F(Exit CM B)\n    F ---&gt; G(Exit CM A)\n    A -.- G\n    B -.- F\n    C -.- E\n\n\n\n\n\n\n\nSo the flow is exactly the same as in our first attempt. Let’s try it!\n\nfrom contextlib import ExitStack\n\ndef run_analysis_with_exit_stack() -&gt; None:\n    \"\"\"Mock running the analysis using exit stack.\"\"\"\n    with ExitStack() as stack:\n        otc_uuid = stack.enter_context(otc_products())\n        benchmark_uuid = stack.enter_context(benchmark())\n        portfolio_uuid = stack.enter_context(\n            portfolio(\n                portfolio_name=PORTFOLIO,\n                otc_products_uuid=otc_uuid,\n            )\n        )\n        analysis_uuid = stack.enter_context(\n            analysis(\n                benchmark_uuid=benchmark_uuid,\n            )\n        )\n        results = analysis_results(\n            analysis_uuid=analysis_uuid,\n            portfolio_uuid=portfolio_uuid,\n        )\n\nThat’s amazing (if the approach works)! In our code we end up with only single with clause and the outputs of CMs are defined just like the regular variables. We just need to wrap the CM calls in stack.enter_context method that pushes each CM to the stack.\n\nprint_title(\"Running analysis with exit stack.\")\nrun_analysis_with_exit_stack()\n\n\n-------------Running analysis with exit stack.--------------\n\nPreparing otc_products.\nPreparing benchmark.\nPreparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_02dde7b6-af71-43fe-8b8f-d7fa8550a9d1'}\nPreparing analysis using {'benchmark_name': 'benchmark_a47cb0b1-567f-4e24-8781-0a209e1c8a41'}\nRunning analysis analysis_fc4a8ec1-35b5-4c74-bfb5-a00519c67f79 on portfolio portfolio_313e1e55-bfed-4521-81de-0139f8f0166a.\nCleaning up after analysis_fc4a8ec1-35b5-4c74-bfb5-a00519c67f79.\nCleaning up after portfolio_313e1e55-bfed-4521-81de-0139f8f0166a.\nCleaning up after benchmark_a47cb0b1-567f-4e24-8781-0a209e1c8a41.\nCleaning up after otc_products_02dde7b6-af71-43fe-8b8f-d7fa8550a9d1.\n\n\nIt works as well! We also get a package of benefits for free.\n\nDisabling the clean up\nWorking with API is tricky and debugging could be a painful experience. If we notice something iffy with the results we are reciving, it could be due to a bug at any of the stages. In such case disabling the artifact clean up and examining them is a good way to investigate. How do we do that? Comment out the exit code in our resource CMs? Nope, now we know better. With exit stack approach we just need to clean up the stack before exiting its context.\n\ndef run_analysis_with_exit_stack(\n    clean_up: bool = True,\n) -&gt; None:\n    \"\"\"Mock running the analysis using exit stack.\n\n    Args:\n        clean_up: Whether to clean up after the objects.\n    \"\"\"\n\n    with ExitStack() as stack:\n        otc_uuid = stack.enter_context(otc_products())\n        benchmark_uuid = stack.enter_context(benchmark())\n        portfolio_uuid = stack.enter_context(\n            portfolio(\n                portfolio_name=PORTFOLIO,\n                otc_products_uuid=otc_uuid,\n            )\n        )\n        analysis_uuid = stack.enter_context(\n            analysis(\n                benchmark_uuid=benchmark_uuid,\n            )\n        )\n        results = analysis_results(\n            analysis_uuid=analysis_uuid,\n            portfolio_uuid=portfolio_uuid,\n        )\n\n        if not clean_up:\n            _ = stack.pop_all()\n    return results\n\nThe _ = some_function() is a Pythonic way of disregarding outputs of some_function. Method pop_all actually moves the stack contents to a new stack, but we don’t care about that. We just want to get rid of them from our current one.\n\nprint_title(\"Running analysis with exit stack and no clean up.\")\nrun_analysis_with_exit_stack(clean_up=False)\n\n\n-----Running analysis with exit stack and no clean up.------\n\nPreparing otc_products.\nPreparing benchmark.\nPreparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_26a705b0-4131-4832-8a0c-428ae121a2b9'}\nPreparing analysis using {'benchmark_name': 'benchmark_0ace28ef-02d7-4123-879c-ceaa15ebfbb8'}\nRunning analysis analysis_cfa43ae5-9e5b-4dd3-9bd9-345881dcb00e on portfolio portfolio_da057b91-7c24-4725-bcb4-c76033558a96.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMultiple portfolios\nBenefit #2 — what do we do if we have multiple managers and many portfolios to re-run for? Or — outside of the example scope — we want to held multiple files open at the same time? Easy, we just push to the stack in a loop or a list comprehension.\n\nPORTFOLIOS = [\"portfolio_1\", \"portfolio_2\", \"portfolio_3\"]\n\ndef run_analysis_with_exit_stack(clean_up: bool = True):\n    \"\"\"Mock running the analysis for multiple portfolios using exit stack.\n\n    Args:\n        clean_up: Whether to clean up after the objects.\n    \"\"\"\n    with ExitStack() as stack:\n        otc_uuid = stack.enter_context(otc_products())\n        benchmark_uuid = stack.enter_context(benchmark())\n        portfolio_uuids = [\n            stack.enter_context(\n                portfolio(\n                    portfolio_name=portfolio_name,\n                    otc_products_uuid=otc_uuid,\n                )\n            )\n            for portfolio_name in PORTFOLIOS\n        ]\n        analysis_uuid = stack.enter_context(\n            analysis(\n                benchmark_uuid=benchmark_uuid,\n            )\n        )\n        result_parts = [\n            analysis_results(\n                analysis_uuid=analysis_uuid,\n                portfolio_uuid=portfolio_uuid,\n            )\n            for portfolio_uuid in portfolio_uuids\n        ]\n        results = pd.concat(result_parts)\n\n        if not clean_up:\n            _ = stack.pop_all()\n    return results\n\nprint_title(\"Running analysis with exit stack on multiple portfolios.\")\nrun_analysis_with_exit_stack(clean_up=True)\n\n\n--Running analysis with exit stack on multiple portfolios.--\n\nPreparing otc_products.\nPreparing benchmark.\nPreparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_af35cbd8-cf23-496e-8c70-a243cb830476'}\nPreparing portfolio using {'portfolio_name': 'portfolio_2', 'otc_products_uuid': 'otc_products_af35cbd8-cf23-496e-8c70-a243cb830476'}\nPreparing portfolio using {'portfolio_name': 'portfolio_3', 'otc_products_uuid': 'otc_products_af35cbd8-cf23-496e-8c70-a243cb830476'}\nPreparing analysis using {'benchmark_name': 'benchmark_efbaeaec-5786-45b0-bee9-29dfc1e91cd0'}\nRunning analysis analysis_bbed7e96-4379-4acb-84f3-290e55488a65 on portfolio portfolio_d6f1c231-78c3-4913-88aa-7e561aa73603.\nRunning analysis analysis_bbed7e96-4379-4acb-84f3-290e55488a65 on portfolio portfolio_75a4b4ef-b3d0-435e-aabc-20bf4ba2f60b.\nRunning analysis analysis_bbed7e96-4379-4acb-84f3-290e55488a65 on portfolio portfolio_90644add-d71e-49dd-b96a-96ae991aae2c.\nCleaning up after analysis_bbed7e96-4379-4acb-84f3-290e55488a65.\nCleaning up after portfolio_90644add-d71e-49dd-b96a-96ae991aae2c.\nCleaning up after portfolio_75a4b4ef-b3d0-435e-aabc-20bf4ba2f60b.\nCleaning up after portfolio_d6f1c231-78c3-4913-88aa-7e561aa73603.\nCleaning up after benchmark_efbaeaec-5786-45b0-bee9-29dfc1e91cd0.\nCleaning up after otc_products_af35cbd8-cf23-496e-8c70-a243cb830476."
  },
  {
    "objectID": "posts/exit-stack/index.html#conclusion",
    "href": "posts/exit-stack/index.html#conclusion",
    "title": "Exit stack to the rescue",
    "section": "Conclusion",
    "text": "Conclusion\nToday we’ve learnt a new Python tool and seen an example of how quantitative developer might set up risk reporting job on vendor RMS. Sound like a very niche and unlikely situation for you? Maybe. But the moral here is to go and explore the Python standard library. Without using any additional packages we improved readability and flexibility of our initial attempt. Python really has ‘batteries included’, see for yourself!\n\n\n\n\n\n\nNote\n\n\n\nDownload the whole code here."
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#summary",
    "href": "posts/mathematician-in-finance/index.html#summary",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Summary",
    "text": "Summary\nThis post accompanies a lecture I delivered at the University of Wroclaw on career planning for mathematicians. It explores the skills, roles, and opportunities in the financial industry, highlighting how mathematical expertise can be applied to areas like risk management, quantitative analysis, and algorithmic trading."
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#rynki-finansowe",
    "href": "posts/mathematician-in-finance/index.html#rynki-finansowe",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Rynki Finansowe",
    "text": "Rynki Finansowe\nRynki finansowe to złożone ekosystemy, w których handluje się aktywami, takimi jak akcje, obligacje i instrumenty pochodne. Rynki te ułatwiają przepływ kapitału między inwestorami a przedsiębiorstwami, napędzając wzrost gospodarczy. Pozwalają takze na transfer już istniejącego ryzyka finansowego.\nCharakteryzują się:\n\nCiągłymi zmianami i zmiennością.\nOgromnymi wolumenami danych.\nWzajemnymi powiązaniami globalnych gospodarek.\nPotrzebą precyzyjnej wyceny i oceny ryzyka.\n\nGłówne postaci na parkietach rynkiowych:\n\nSpekulant:\n\nCel: Zysk z przewidywania zmian cen.\nDziałanie: Kupno/sprzedaż z ryzykiem.\nZnaczenie: Płynność, zmienność.\n\nArbitrażysta:\n\nCel: Zysk bez ryzyka z różnic cen.\nDziałanie: Szybkie transakcje wykorzystujące niespójności.\nZnaczenie: Efektywność rynków.\n\nHedger:\n\nCel: Zmniejszenie ryzyka.\nDziałanie: Zabezpieczanie się instrumentami finansowymi.\nZnaczenie: Stabilność rynków.\n\nPośrednik:\n\nCel: Ułatwienie transakcji.\nDziałanie: Łączenie kupujących i sprzedających.\nZnaczenie: Płynność, dostęp do rynków."
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#rola-matematyków",
    "href": "posts/mathematician-in-finance/index.html#rola-matematyków",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Rola Matematyków",
    "text": "Rola Matematyków\n\nModelowanie niepewności:\n\nRynki finansowe charakteryzują się inherentną niepewnością.\nMatematycy wykorzystują zaawansowane narzędzia rachunku prawdopodobieństwa i statystyki do modelowania oraz kwantyfikacji tej niepewności, co umożliwia efektywne zarządzanie ryzykiem.\n\nPrecyzyjna wycena instrumentów finansowych:\n\nWycena instrumentów finansowych, w szczególności instrumentów pochodnych, wymaga stosowania złożonych modeli matematycznych.\nRachunek stochastyczny, równania różniczkowe cząstkowe oraz metody numeryczne stanowią fundamentalne narzędzia w tym procesie.\n\nZarządzanie ryzykiem finansowym:\n\nMatematycy opracowują zaawansowane modele służące do pomiaru i zarządzania różnorodnymi rodzajami ryzyka finansowego, w tym ryzykiem rynkowym, kredytowym oraz operacyjnym.\nZapewnia to stabilność i odporność instytucji finansowych na potencjalne wstrząsy.\n\nHandel algorytmiczny:\n\nHandel wysokiej częstotliwości oraz inne strategie algorytmiczne opierają się na optymalizacji matematycznej i analizie statystycznej w celu identyfikacji i wykorzystania możliwości rynkowych.\n\nAnaliza danych finansowych:\n\nAnaliza i interpretacja ogromnych zbiorów danych finansowych wymaga zastosowania zaawansowanych technik matematycznych i statystycznych.\nMatematycy posiadają kompetencje w zakresie ekstrakcji istotnych informacji ze złożonych zbiorów danych.\n\nOptymalizacja portfela inwestycyjnego:\n\nOptymalizacja portfela inwestycyjnego oraz inne problemy finansowe wymagają znalezienia optymalnych rozwiązań przy uwzględnieniu określonych ograniczeń.\nTechniki optymalizacji matematycznej mają kluczowe znaczenie w osiąganiu pożądanych wyników.\n\nZgodność z regulacjami prawnymi:\n\nPrzepisy regulujące sektor finansowy wymagają rygorystycznej analizy ilościowej oraz walidacji modeli.\nMatematycy odgrywają istotną rolę w zapewnieniu zgodności instytucji finansowych z obowiązującymi regulacjami. zgodności z tymi przepisami."
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#rodzaje-analityków-ilościowych",
    "href": "posts/mathematician-in-finance/index.html#rodzaje-analityków-ilościowych",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Rodzaje analityków ilościowych",
    "text": "Rodzaje analityków ilościowych\n\n\nFront Office QuantMarket Risk QuantCredit Risk QuantValidation QuantQuant ResearcherAlgorithmic TraderQuant Developer\n\n\nOpracowuje i stosuje modele ilościowe do wyceny, zarządzania ryzykiem i strategii handlowych w dziale transakcyjnym instytucji finansowej.\n                                                \n\n\nOpracowuje i waliduje modele do pomiaru i zarządzania ryzykiem rynkowym, zapewniając zgodność z wymogami regulacyjnymi.\n                                                \n\n\nOpracowuje i waliduje modele do pomiaru i zarządzania ryzykiem kredytowym, oceniając prawdopodobieństwo niewypłacalności pożyczkobiorcy.\n                                                \n\n\nNiezależnie ocenia i waliduje modele finansowe opracowane przez innych kwantów, zapewniając ich dokładność i solidność.\n                                                \n\n\nProwadzi nowatorskie badania w dziedzinie finansów ilościowych, opracowując nowe modele i techniki handlu, zarządzania ryzykiem i wyceny aktywów.\n                                                \n\n\nOpracowuje i wdraża zautomatyzowane strategie handlowe przy użyciu modeli ilościowych i algorytmów, często koncentrując się na handlu wysokiej częstotliwości.\n                                                \n\n\nProjektuje i wdraża rozwiązania programowe dla systemów handlu ilościowego, platform zarządzania ryzykiem i narzędzi modelowania finansowego."
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#codzienne-doświadczenia-quanta",
    "href": "posts/mathematician-in-finance/index.html#codzienne-doświadczenia-quanta",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Codzienne Doświadczenia Quanta",
    "text": "Codzienne Doświadczenia Quanta\nŻycie analityka ilościowego wykracza daleko poza samo przetwarzanie liczb. To różnorodne połączenie wiedzy technicznej i umiejętności interpersonalnych.\n\nRozwój i Testowanie Modeli:\n\nZnaczną część dnia poświęca się na rozwój, udoskonalanie lub testowanie modeli ilościowych.\nObejmuje to kodowanie, analizę statystyczną i rygorystyczne testowanie, co wymaga silnych umiejętności rozwiązywania problemów i myślenia analitycznego.\n\nWspółpraca i Komunikacja:\n\nQuanci ściśle współpracują z traderami, menedżerami ryzyka i programistami.\nWyjaśnianie złożonych modeli i wyników nietechnicznym współpracownikom jest kluczowe, co podkreśla znaczenie jasnej komunikacji.\nPraca w zespołach wymaga doskonałych umiejętności współpracy.\n\nRozwiązywanie Problemów pod Presją:\n\nRynki finansowe mogą być niestabilne, co wymaga od kwantów szybkiego dostosowywania się do zmieniających się warunków.\nWymaga to zdolności adaptacji i umiejętności zachowania spokoju pod presją.\nPoziom presji znacznie różni się w zależności od stanowiska.\n\nCiągłe Uczenie się:\n\nDziedzina finansów ilościowych stale się rozwija, co wymaga od kwantów bycia na bieżąco z nowymi technikami i technologiami.\nZaangażowanie w całożyciowe uczenie się jest niezbędne, co może sprawić, że praca jest ciekawa.\n\nBycie na bieżąco\n\nNiektóre profesje wymagają stałej znajomości przeglądu danych rynkowych, wiadomości i raportów, aby być na bieżąco z globalnymi trendami finansowymi.\nWymaga to dbałości o szczegóły i umiejętności szybkiego przyswajania złożonych informacji.\n\nZgodność z Regulacjami:\n\nWielu quantów spędza czas na upewnianiu się, że modele i procesy są zgodne z obowiązującymi przepisami. Wymaga to dużej dbałości o szczegóły i umiejętności rozumienia złożonych dokumentów."
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#potencjali-pracodawcy",
    "href": "posts/mathematician-in-finance/index.html#potencjali-pracodawcy",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Potencjali pracodawcy",
    "text": "Potencjali pracodawcy\n\nWrocławPolska\n\n\n\nAllianz Deutchland (ubezpieczenia)\nBNY Mellon\nEY (konsulting)\nQube RT\nSantander\nUBS\n\n\n\n\nCiti\nCommerzbank\nGoldman Sachs\nHSBC\nmBank\nNatwest\nPoint 72\nRevolut\nStandard Chartered"
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#przegląd-mojej-edukacji-i-kariery",
    "href": "posts/mathematician-in-finance/index.html#przegląd-mojej-edukacji-i-kariery",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Przegląd mojej edukacji i kariery",
    "text": "Przegląd mojej edukacji i kariery\nResume"
  },
  {
    "objectID": "posts/mathematician-in-finance/index.html#materiały",
    "href": "posts/mathematician-in-finance/index.html#materiały",
    "title": "Mathematician in the financial markets (PL)",
    "section": "Materiały",
    "text": "Materiały\n\nKsiążki popularne\n\nThe Quants: How a New Breed of Math Whizzes Conquered Wall Street and Nearly Destroyed It – Scott Patterson\nA Random Walk Down Wall Street: The Time-Tested Strategy for Successful Investing – Burton G. Malkiel\nThe Money Formula: Dodgy Finance, Pseudo Science, and How Mathematicians Took Over the Markets – Paul Wilmott, David Orrell\n\n\n\nBiografie\n\nA Man for All Markets: From Las Vegas to Wall Street, How I Beat the Dealer and the Market – Edward O. Thorp\nThe Man Who Solved the Market: How Jim Simons Launched the Quant Revolution – Gregory Zuckerman\nMy Life as a Quant: Reflections on Physics and Finance – Emanuel Derman\n\n\n\nPodstawy matematyki finansowej/finansów ilościowych\n\nFinancial Calculus: An Introduction to Derivative Pricing – Martin Baxter, Andrew Rennie\nPaul Wilmott Introduces Quantitative Finance – Paul Wilmott\nStochastic Calculus for Finance I: The Binomial Asset Pricing Model – Steven Shreve\nMathematical Modeling and Computation in Finance: With Exercises and Python and MATLAB Computer Codes – Cornelis W Oosterlee & Lech A Grzelak\n\n\n\nPrzygotowanie do rozmów rekrutacyjnych\n\nFrequently Asked Questions in Quantitative Finance – Paul Wilmott\nQuant Job Interview Questions and Answers - Mark Joshi\n150 Most Frequently Asked Questions on Quant Interviews – Dan Stefanica, Radoš Radoičić, Tai-Ho Wang\n\n\n\nYouTube\n\nComputations in Finance\nDimitri Bianco"
  },
  {
    "objectID": "posts/linux-in-windows/index.html#windows-linux-and-you-ménage-à-trois",
    "href": "posts/linux-in-windows/index.html#windows-linux-and-you-ménage-à-trois",
    "title": "Linux in Windows via WSL",
    "section": "Windows, Linux, and You: Ménage à trois",
    "text": "Windows, Linux, and You: Ménage à trois\nTired of the same old Windows vs. Linux beef among PC superusers? Well, get ready to become a mediator in this feud. I’ll show you how to get the best of both worlds.\n\nPros and cons\nWindows OS has long been the dominant platform for mainstream consumers and businesses. It offers good hardware compatibility, de facto the PC gaming experience and is friendly to the casual user. However, Windows has significant limitations in terms of system control and software development tools.\nLinux, on the other hand, is an operating system created by developers and for developers (and system administrators). It provides infinite flexibility and a deep pool of open-source tools. But the learning curve is steep, the open-source projects often get abandoned and with great power (sudo) comes great responsibility (and sometimes system reinstall).\n\n\n\n\n\n\nNote\n\n\n\nActually, to publish this post in the most convenient and elegant way, I needed to switch to Linux. The Windows quarto CLI fails with some certification errors, coming from deno, that I can’t be bothered to clean up. Discovered this while writing these words as my previous approach was much messier. Irony is the ambrosia of life (for me at least).\n\n\n\n\nBridging the gap\nAt this point even Microsoft — a strong contrarian to Linux in the past — embraced the usefulness of Linux shell at your fingertips. Imagine having the familiar interface of Windows for your everyday tasks. Combine it with a the raw power and controllability of Linux for when you need to dive deep into development or system administration. And limited stakes once you (inevitably) remove half of your file system with a bash script. Enter Windows Subsystem for Linux (WSL): a ticket to 10x-ing your software development on Windows.\n\n\nWSL vs. Virtual Machines: What’s the Difference?\nYou might be wondering how WSL differs from a traditional virtual machine (VM). While both provide a way to run Linux on Windows, they operate in different ways. A VM emulates a virtual computer within your computer, complete with its own operating system and make-belive hardware resources. This makes VMs resource-intensive and can impact overall system performance. They are also hard to set up and maintain.\nWSL, on the other hand, is a more lightweight approach. It integrates Linux directly into the Windows kernel, allowing for faster boot times, better performance, and seamless file sharing between Windows and Linux environments."
  },
  {
    "objectID": "posts/linux-in-windows/index.html#installing-and-setting-up-wsl",
    "href": "posts/linux-in-windows/index.html#installing-and-setting-up-wsl",
    "title": "Linux in Windows via WSL",
    "section": "Installing and setting up WSL",
    "text": "Installing and setting up WSL\nFirst, we need to set up the WSL and install a chosen Linux distribution. Fortunately, this is “super easy, barely an inconvenience”. You can choose from a list of distros pre-packaged by Microsoft or download and build an image from scratch. You can even build Arch and be legally allowed to say BTW, I use Arch (on Windows). For this guide, we’ll take a more conventional approach and opt for the long-term support (LTS) version of Ubuntu. Now, open the Powershell with administrative privileges and run:\nwsl --update\nwsl --version\nThese commands ensure that WSL is up-to-date and displays the installed WSL version.\n\nOur next command will be:\nwsl -l -o\nThis yields a curated list of pre-packaged Linux distributions that Microsoft provides, making the process almost effortless.\n\nFor the installation itself:\nwsl --install -d 'Ubuntu-24.04'\n\nReboot the Windows system and you’ll see `Ubuntu’ among your applications."
  },
  {
    "objectID": "posts/linux-in-windows/index.html#base-setup-new-shell-and-package-manager",
    "href": "posts/linux-in-windows/index.html#base-setup-new-shell-and-package-manager",
    "title": "Linux in Windows via WSL",
    "section": "Base setup — new shell and package manager",
    "text": "Base setup — new shell and package manager\nThere is an additional benefit we can reap with just a bit of more work — a fully system-agnostic setup. By having Linux kernel run on Windows, we unified 2 out of 3 giants. The only pillar that is missing is the Mac OS. But wait, it’s based on Unix as well! It just uses different default shell and lacks a package manager, as Apple doesn’t trust its clients. zsh offers a more interactive and customizable shell experience compared to the default bash. Homebrew, often referred to as the “missing package manager for macOS”, provides a convenient way to install additional software on Linux systems. Let’s change the terminal shell to zsh in our Ubuntu installation and compile a secondary (to apt-get) package manager – brew.\n\nBrewing starts\nBefore we dive into installing Homebrew, we need to equip our system with the essential tools. The build-essential package provides a collection of compilers and libraries necessary for building software from the source code. Git is a version control system used for managing code projects.\nLet’s install these prerequisites using the following command:\nsudo apt-get upgrade -y\nsudo apt-get install build-essential git -y\nExecute the installation script for Homebrew:\nINSTALL_PATH=\"https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh\"\n/bin/bash -c \"$(curl -fsSL $INSTALL_PATH)\"\n\nTo make Homebrew accessible from your shell, you need to load its environment variables. The following command achieves this and subsequently runs a diagnostic check:\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew doctor\n\nDoctor’s orders to append brew to some set of paths! Let’s do this then:\necho 'export XDG_DATA_DIRS=\"/home/linuxbrew/.linuxbrew/share:$XDG_DATA_DIRS\"' &gt;&gt; ~/.profile"
  },
  {
    "objectID": "posts/linux-in-windows/index.html#z-shell-sea-shell",
    "href": "posts/linux-in-windows/index.html#z-shell-sea-shell",
    "title": "Linux in Windows via WSL",
    "section": "Z-shell — sea-shell",
    "text": "Z-shell — sea-shell\nHomebrew makes package management a breeze. Let’s install zsh, a powerful and customizable shell.\nbrew install zsh\nzsh --version\nzsh\nThis will take you to interactive .zshrc file setup. The file contains commands that are run each time a shell is spawned. You can either generate empty file with 0 or go through the interactive setup with 1. \nAdd the brew initialization to .zshrc file as well. This way brew will always be by your side!\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') &gt;&gt; /home/bwrob/.zshrc\nCheck the default shell and set it to zsh:\necho $SHELL\nsudo chsh -s $(which zsh)\necho $SHELL"
  },
  {
    "objectID": "posts/linux-in-windows/index.html#github-command-line-tool",
    "href": "posts/linux-in-windows/index.html#github-command-line-tool",
    "title": "Linux in Windows via WSL",
    "section": "GitHub command line tool",
    "text": "GitHub command line tool\nRemember git != GitHub, we need a way to authenticate and use Github from CLI. There’s a tool for that!\nbrew install gh\ngh auth login\n\nNow create a convenient directory and copy your favourite GitHub repo:\nmkdir repos && cd repos\ngh repo clone python_playground"
  },
  {
    "objectID": "posts/linux-in-windows/index.html#connect-to-visual-studio-code",
    "href": "posts/linux-in-windows/index.html#connect-to-visual-studio-code",
    "title": "Linux in Windows via WSL",
    "section": "Connect to Visual Studio Code",
    "text": "Connect to Visual Studio Code\nWhile WSL grants us the power of Linux, let’s not forget the user-friendly interface of Windows. When it comes to software development, we can achieve the perfect blend by integrating Visual Studio Code (VSC) with our WSL environment.\nHere’s how:\n\nInstall the WSL Extension in VSC: Fire up VSC on your Windows machine and head over to the Extensions tab. Search for “WSL” and install the official extension by Microsoft: WSL extension.\nLaunching VSC from WSL: Within your WSL terminal, you can directly invoke VSC as if it were running natively on Windows. Use the following command:\n\ncode ~\\repos\\python_playground\n\nIn the next post I will show you how to set up Python environment in Linux. Stay tuned :) .\n\n\n\n\n\n\nNote\n\n\n\nDownload the Ubuntu shell script here."
  },
  {
    "objectID": "posts/startup-script/index.html#why-a-startup-script",
    "href": "posts/startup-script/index.html#why-a-startup-script",
    "title": "Python Startup Script",
    "section": "Why a startup script?",
    "text": "Why a startup script?\nConfession time. Pre-COVID I worked for a Swiss bank — it was the whole corporate package. Working from a crowded office, open space, dedicated desks, dedicated desktop PCs, hundreds of people. And we never turned the PCs off, some of them were running constantly for months. Not very eco-friendly behaviour, either from the company side or from the employees. But there were legit reasons for this and the company had much bigger sins on their books.\nAs for the reasons for constantly turned on machines — the proprietary frameworks and tooling we used were awfully heavy and slow. If you were occasionally forced to kill all the processes — due to an update or system crash — getting them all up again took an hour or more. Developer tools, pricing systems, connections to Monte Carlo farms, downloading trade data, analysis definitions — you name it, we used it.\nOne tidbit to get this point across — in 2019 we still used 32-bit Win7, which had a cap on single-process memory consumption to 4GB. We had a universally used hack to extend this to 8GB for Excel, since the default wasn’t enough for many of our pricing sheets.\nWhen I parted ways with the company post-COVID, I got a corporate laptop from the new employer. The office was much sparser, quieter and with ‘hot seats’ approach. I worked mostly remotely either way. This meant switching off the company machine each day, as the VPN connections and certificates wouldn’t last overnight. I was extremely annoyed with opening all of the daily tools again and again, after getting used to having it all waiting for me to jump right in.\nHence the need for a startup script to open all of the apps, tools and files programatically. It won’t cover everything, like authorizations or connections but still a little helper to start the day.\nTo spice things up, we will overengineer the hell out of it and use generic typing, generators and decorators :D."
  },
  {
    "objectID": "posts/startup-script/index.html#the-startup-script",
    "href": "posts/startup-script/index.html#the-startup-script",
    "title": "Python Startup Script",
    "section": "The startup script",
    "text": "The startup script\n\nPublic interface\nLet’s first think about the design and what we want to achieve. Imagine the code being split into two parts:\n\nthe hidden logic layer, the worker that does stuff and\nthe public interface that integrates with the rest of the codebase or is called at the top level, the manager.\n\nWe can start by creating the public interface, see what we want to achieve and later deal with filling in a working implementation. You can either define the logic functions as mocks, or just live with linting issues. This is what my desired usage is:\n\ndef run_startup_script() -&gt; None:\n    \"\"\"Run the startup script.\"\"\"\n    logger.info(f\" Welcome {os.getlogin()}! \".center(40, \"*\"))\n    start_programs(\n        [\n            Program.POWERSHELL,\n            Program.NOTEPAD,\n            (Program.FIREFOX, 8),\n        ],\n    )\n    start_work_files([Path.home() / \".temp\"])\n    run_commands(['Write-Output \"test\"'])\n\nWe specify programs to be launched, open all files in a chosen temp folder and run a list of shell commands. After each step there should be some delay to avoid spamming system with process calls. Certain steps might be more time consuming, like cloud services authorization. Those need longer delay. On the other hand, specifying delay for each task would be cumbersome, most cases would be fine with some default value. We end up with a design that our soon-to-be workers start_programs, start_work_files, and run_commands expect lists of either task or (task, delay_seconds). We can now start the implementation by figuring out how the delay time should be defaulted if not specified.\n\n\nDecorator defaulting the time delays\nNow we can start the implementation. We want the workers to be called with a list of tasks, but a task can be either a command or a tuple including the delay. Let’s not include some complicated conditionals in each of the workers — that would be annoying and potentially get out of sync at some point.\nOther way to do this is to add a default delay to all non-tuple items. We can implement that as a separate defaulting function, which we would call in each worker. But — being more clever! — we could also use a decorator that changes the workers’s signature.\n\nfrom functools import wraps\nfrom collections.abc import Callable\nfrom typing import TypeVar\n\nT = TypeVar(\"T\")\nTask = tuple[T, int]\nTaskList = list[Task[T]]\nTaskListOptionalDelay = list[Task[T] | T]\n\n\nDEFAULT_DELAY_SECONDS = 4\n\ndef with_optional_delay(\n    task_worker: Callable[[TaskList[T]], None],\n) -&gt; Callable[[TaskListOptionalDelay[T]], None]:\n    \"\"\"Add default delay to all non-tuple items.\n\n    Args:\n    ----\n        task_worker: A function that takes a list of tasks.\n\n    \"\"\"\n\n    @wraps(task_worker)\n    def task_defaulted_worker(task_list: TaskListOptionalDelay[T]) -&gt; None:\n        \"\"\"Add a default delay to tasks in a task list if no delay is specified.\n\n        Args:\n        ----\n            task_list: A list of tasks with optional delays.\n\n        \"\"\"\n        tasks_with_defaulted_delays: TaskList[T] = [\n            item if isinstance(item, tuple) else (item, DEFAULT_DELAY_SECONDS)\n            for item in task_list\n        ]\n        return task_worker(tasks_with_defaulted_delays)\n\n    return task_defaulted_worker\n\nFirst, for convenience, let’s define a template type annotation:\n\nThe generic variable type is conventionally denoted by T.\nA Task is a tuple of a generic task T and an int delay.\nA TaskList is a list of Tasks. Simple.\nA TaskListOptionalDelay is a list of Tasks or Ts. Those are the guys we are going to turn into TaskLists.\n\nThe decorator with_optional_delay adds a default delay of 4 seconds to all non-tuple items. Its input is a worker function that already expects a TaskList. It fills in the missing delay with the default value and passes it to the decorated function.\n\n\nMain workers\nWith the preparation done, we can start with the workers. For the programs we will be launching, we need to look up the exact paths of the executables. Let’s define a Program enum that would wrap those up in readable nice names. For working with system paths we will use pathlib.Path that provides high-level interface.\n\nfrom enum import Enum\nfrom pathlib import Path\n\n\nclass Program(Enum):\n    \"\"\"Types of programs.\"\"\"\n\n    POWERSHELL = Path(r\"C:\\windows\\system32\\windowspowershell\\v1.0\\powershell.exe\")\n    NOTEPAD = Path(r\"C:\\Program Files\\Notepad++\\notepad++.exe\")\n    FIREFOX = Path(r\"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Firefox.lnk\")\n\nOther than that, the main workers start_programs, start_work_files, and run_commands are simple. They just iterate over the provided TaskList and do the respective action for a given Task.\n\n@with_optional_delay\ndef start_programs(\n    programs: TaskList[Program],\n) -&gt; None:\n    \"\"\"Start listed programs.\n\n    Args:\n    ----\n        programs: List of programs to start.\n            Can be a string or a tuple. If a tuple is given, the first\n            element is the name, the second is the delay.\n\n    \"\"\"\n    for program, delay in programs:\n        start_process(\n            name=program.name,\n            path=program.value,\n            delay=delay,\n        )\n\n\n@with_optional_delay\ndef start_work_files(\n    directory_tasks: TaskList[Path],\n) -&gt; None:\n    \"\"\"Start all  files in the work folders.\n\n    Args:\n    ----\n        directory_tasks: List of tasks with paths to work folders.\n\n    \"\"\"\n    for path, delay in path_files(directory_tasks):\n        start_process(\n            name=path.name,\n            path=path,\n            delay=delay,\n        )\n\n\n@with_optional_delay\ndef run_commands(\n    commands: TaskList[str],\n) -&gt; None:\n    \"\"\"Run all commands in the command list.\n\n    Args:\n    ----\n        commands: List of commands to run.\n\n    \"\"\"\n    for command, delay in commands:\n        run_command(command, delay)\n\n\n\nList all files in list of directories\nNotice the use of path_files generator above. When working with complex iterations, it’s a good practice to create a generator that wraps the iteration details. It is beneficial for readability and maintainability, especially in cases where you need to:\n\nyield multiple values at once (ex. yield path, delay for path in directory),\nhave nested iterators (ex. for directory in list for path in directory),\nfilter the iteration (ex. for path in directory if filter(path)).\n\nHere we’ll have all three of them combined!\n\nNAME_EXCLUDES = (\"$\", \"tmp\")\nEXT_EXCLUDES = (\"exe\",)\n\n\ndef filter_excluded(\n    path: Path,\n) -&gt; bool:\n    \"\"\"Filter path based on name and extension exclude lists.\n\n    Args:\n    ----\n        path: Path to filter.\n\n    \"\"\"\n    return (path.stem not in NAME_EXCLUDES) and (path.suffix not in EXT_EXCLUDES)\n\n\n\ndef path_files(\n    directory_tasks: TaskList[Path],\n) -&gt; Generator[tuple[Path, int], None, None]:\n    \"\"\"Generate all files in the work folder that are not excluded.\n\n    Yields the folder path at beginning of the generator.\n\n    Args:\n    ----\n        directory_tasks: List of tasks with paths to work folders.\n\n    \"\"\"\n    for folder, delay in directory_tasks:\n        yield folder, delay\n\n        all_files = folder.glob(FILES_IN_TREE_PATTERN)\n        filtered = filter(filter_excluded, all_files)\n\n        for file in filtered:\n            yield file, delay\n\nThe filter_excluded function filters out files based on exclusions in name and extension lists. Path.stem and Path.suffix are used to check if the file name or extension is in the lists respectively.\n\n\nInteracting with the OS\nWith all of the framework prepared, the next step is to interact with the OS. To open a file, folder or run an app, we can use the os.startfile function. All the rest of the start_process function is just utility logging. For running a shell command we can use the subprocess module, calling powershell with the powershell.exe and adding the command to run.\n\nimport os\nimport subprocess\nimport time\n\n\ndef start_process(\n    *,\n    name: str,\n    path: Path,\n    delay: int = DEFAULT_DELAY_SECONDS,\n) -&gt; None:\n    \"\"\"Given a path, starts the target.\n\n    Behavior:\n        * Minimizes all windows.\n        * Depending on the path target:\n            * executable files are run,\n            * content files are opened with system default program,\n            * folders are opened with system explorer.\n\n    Args:\n    ----\n        name: Name of the process to start.\n        path: Path to the target.\n        delay: Time to wait after starting the process.\n\n    \"\"\"\n    if path.is_dir():\n        logger.info(\"Opening folder %s\", name)\n\n    if path.suffix in (\".exe\", \".lnk\"):\n        logger.info(\"Running app %s\", name)\n    else:\n        logger.info(\"Opening file %s\", name)\n\n    os.startfile(path)\n    time.sleep(delay)\n\n\ndef run_command(\n    command: str,\n    delay: int,\n) -&gt; None:\n    \"\"\"Run a powershell command.\n\n    Args:\n    ----\n        command: Command to run.\n        delay: Time to wait after starting the process.\n\n    \"\"\"\n    _ = subprocess.call(\n        f\"powershell.exe {command}\",\n        shell=False,\n    )\n    time.sleep(delay)"
  },
  {
    "objectID": "posts/startup-script/index.html#the-last-bit-of-convenience",
    "href": "posts/startup-script/index.html#the-last-bit-of-convenience",
    "title": "Python Startup Script",
    "section": "The last bit of convenience",
    "text": "The last bit of convenience\nWe got it, friends, the script works and the job is done. But… do you recall the last time you googled a shortcut for a semi-frequently used functionality? Do you still remember the shortcut, or use it each time you need the functionality? Convenience needs to be convenient (obviously). So let’s make the usage of our script as seamless as possible.\nIn Windows OS the best way for me would be to have a shortcut that would run it with one click. We could pin it to the taskbar and start menu. To create one:\n\nGo to any folder, right-click and select New &gt; Shortcut.\nIn the guide that pops up paste in %systemroot%\\System32\\cmd.exe /c \"python.exe $1\" where $1 should be replaced by the path to your script. You can also replace python.exe with interpreter path of any venv you wish.\nOptionally, you can later change the icon for the shortcut (needs to be .ico file). I like to roll with Win-98 style ‘My Computer’ icon.\nCopy the shortcut to start menu directory. For Win11 it’s C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs. You should be able to see it in start menu already. Now you can pin it to the taskbar.\n\n\nThat’s a good enough reminder and convenience tool for me. You might need some different setup, especially for another OS. For Linux, you might try to leverage activate or bashrc scripts in your working setup."
  },
  {
    "objectID": "posts/startup-script/index.html#further-extensions",
    "href": "posts/startup-script/index.html#further-extensions",
    "title": "Python Startup Script",
    "section": "Further extensions",
    "text": "Further extensions\nThere are a couple more things I wish this guy could do for me still:\n\nChanging Teams status to green - there’s a MS Graph API that could do this but we would need to manage Azure authorizations through the script. I am not up to that, especially on a work account. Might experiment on personal one in the future.\nDisplay placement of opened processes — I have 2 displays (which you could count as 4, due to the size format) and I am very particular about where each app should go. I would love the apps to open where they should. This is however OS specific, for Win it require to mingle with win32api. Yet another project for the future.\n\n\n\n\n\n\n\nNote\n\n\n\nDownload the startup script and example Windows shortcut."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in the bwrob blog. Welcome!\nThis blog is a battleground of sorts, but instead of swords and shields, we wield the weapons of Python and C++. I’m a mathematician turned quantitative analyst turned software engineer. You can expect high standard deviation of topics here.\nHere, I’ll document my coding conquests, from building practical and impractical tools, exploring financial concepts, to playing around with physics simulations.\nExpect a healthy dose of humor alongside the technical discussions. Let’s be honest, even the most complex problems are more enjoyable with a sprinkle of laughter. So, grab a cup of coffee and join me on this exploration – even if it’s just for one interested reader!\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "bwrob blog",
    "section": "",
    "text": "This blog is a battleground of sorts, but instead of swords and shields, we wield the weapons of Python and C++. I’m a mathematician turned quantitative analyst turned software engineer. You can expect high standard deviation of topics here.\nHere, I’ll document my coding conquests, from building practical and impractical tools, exploring financial concepts, to playing around with physics simulations.\nExpect a healthy dose of humor alongside the technical discussions. Let’s be honest, even the most complex problems are more enjoyable with a sprinkle of laughter. So, grab a cup of coffee and join me on this exploration – even if it’s just for one interested reader!\n\n\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMathematician in the financial markets (PL)\n\n\n\nCareer\n\n\n\nHow to survive in the whirlpool of finance.\n\n\n\nbwrob\n\n\nMar 22, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinux in Windows via WSL\n\n\n\nDev Setup\n\n\n\nHow to have a great dev setup and still play CS over a coffee break.\n\n\n\nbwrob\n\n\nAug 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython Startup Script\n\n\n\nPythonic Distractions\n\n\n\nHow to start your day with a cup of coffee, not opening the same apps all over again.\n\n\n\nbwrob\n\n\nMay 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExit stack to the rescue\n\n\n\nPythonic Distractions\n\n\nContext Managers\n\n\n\nHow to chain resource managers in an elegant way.\n\n\n\nbwrob\n\n\nMay 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nStrategies for Numerical Integration\n\n\n\nPythonic Distractions\n\n\nDesign Patterns\n\n\n\nHow to apply strategy design pattern in Python.\n\n\n\nbwrob\n\n\nApr 28, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nNews\n\n\n\nHow to enjoy the ride with me.\n\n\n\nbwrob\n\n\nApr 23, 2024\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "pages/resume.html",
    "href": "pages/resume.html",
    "title": "Bartosz Wróblewski",
    "section": "",
    "text": "Mathematician at heart, quantitative finance technologist by trade. I leverage diverse experiences in academia, derivatives valuation, market risk, and quantitative development to bring a generalist’s perspective to quantitative finance and software engineering.\n\n \n  \n   \n  \n    \n     LinkedIn\n  \n  \n    \n     Github\n  \n  \n    \n     Contact"
  },
  {
    "objectID": "pages/resume.html#professional-experience",
    "href": "pages/resume.html#professional-experience",
    "title": "Bartosz Wróblewski",
    "section": "Professional Experience",
    "text": "Professional Experience\n\nDXC Luxoft\n\nSenior Software Developer | Sep 2024 – Present\nRisk Engine Engineer role in the counterparty credit risk (CCR) modelling and analytics team within R&C model development group.\n\n\n\nSyberry\n\nFinancial Software Engineer | Sep 2023 – Sep 2024\nDevelopment of a financial platform for a hedge fund client.\n\nQuantitative developer bridging the gap between hedge fund risk managers and software engineers.\nDeveloping risk management platform that pipes and transforms trading data.\nResponsible for integration of vendor risk management system into the platform, efficient orchestration of asynchronous API calls and resources.\nWorking directly with client’s risk manager and CRO on specifying the business needs and requirements.\n\nTechnologies\n\nBackend: Python, Dagster, FastAPI, Pytest, Pandas, NumPy, SQLAlchemy.\nDatabases: PostgreSQL, DuckDB.\nInfrastructure/pipelines: Amazon Web Services, Terraform, Terraspace, Docker, GitHub Actions.\n\n\n\n\nBank of New York Mellon\n\nSenior Specialist, Model Development | Jul 2022 – Sep 2023\nIndependent specialist at Risk and Compliance department (MO). Market Risk team responsible for modeling of VaR and SVaR, comprehensive test scenarios and portfolio sensitivity exposures.\n\nDeveloping and maintaining market risk models — VaR, SVaR — and stress testing frameworks implemented in C++.\nCalibrating and benchmarking vendor pricing models (Murex risk management system).\nDesigning, creating and analyzing risk-related reports and ad hoc analyses for front office and risk management.\nResponsible for Market Risk RWA projections submission for CCAR 2023.\nCoordinating development projects with IT, Validation and Risk Management.\nDeveloped a method for directly comparing interest rate sensitivities between FO and MO systems using different conventions and curves setups.\nRe-implemented legacy C++ volatility surface builder in Python without performance loss.\n\nTechnologies\n\nInternal risk models: C++.\nVendor pricing system: Murex.\nDatabases: MS SQL.\nTooling: Python, Quantlib, VBA.\n\n\n\n\nCredit Suisse\n\nQuantitative Analyst | Nov 2018 – Jun 2022\nJunior analyst at Credit Derivatives division, part of global front office QuantStrats department (700+ quants, developers and data analysts).\n\nDevelopment and maintenance of an in-house valuation framework used across bank’s systems (COM C++ and .Net). Contributions to valuation models and market data object builders used in pricing.\nProviding direct support to traders and Middle Office in ad hoc investigations on valuation, risks and technical issues.\nExtending and creating COM-addin-based Excel pricing sheets used by Trading and Product Control.\nAssisting with calculation and analysis of risk profiles, PnL reports, transition impact assessments of trade portfolios.\nRepresented the company by giving lectures and taking part in campus recruitment programs.\nCoordinated resolution of strategic process of calculating Collateral Adjusted Valuation for the xVA desk.\n\nStructured Notes\nCredit Suisse issued structured note products (corporate bonds with derivatives attached to payout).\n\nContributed to structured notes valuation model framework implemented in factorized C++.\nUpdated credit curve models and utilities to be compatible with OIS discounting in preparation to LIBOR cessation (F#).\nExtended trading pricing sheets with logic needed to price instruments with compounding rates financing (Excel, COM-addins, .Net extensions).\nCollaborated with quantitative developers from in-house risk management system project on addition of new market data builders (C#).\n\nLongevity Derivatives\nLongevity-based (insurance policies and pension schemes) financial derivatives.\n\nMigrated existing legacy tools to 64-bit environment.\nProvided technical support to Product Control in their monthly tie-in processes.\n\nTechnologies\n\nPricing framework: F#, C++, COM.\nRisk Managment: C#.\nTrading tools: Excel, VBA.\nCI/CD: Perforce, TeamCity."
  },
  {
    "objectID": "pages/resume.html#academic-experience",
    "href": "pages/resume.html#academic-experience",
    "title": "Bartosz Wróblewski",
    "section": "Academic Experience",
    "text": "Academic Experience\n\nWrocław University of Science and Technology\n\nTeaching Assistant | Oct 2024 – Present\nTeaching computer science for Mathematics students.\n\n\n\nUniversity of Wrocław\n\nPhD Candidate | Oct 2016 – Jan 2019\nResearched evolution equations involving non-local unbounded operators. Focused on applications of functional and harmonic analysis. Main ‘hero’ of my research was the fractional Laplacian operator — jump-diffusion analogue of the classical Laplacian.\nAlso interested in hydrodynamic models and applications of PDEs in physics (porous medium modelling, flocking models, quantum mechanics).\nUnfinished.\n\n\nJunior Researcher | Apr 2017 – Jan 2019\nParticipated in the Polish National Science Center research grant Nonlocal parabolic problems: regularity, blowup, pattern formation. Principal Investigator Prof. Piotr Biler.\n\n\nTeaching Assistant | Mar 2017 – Jul 2018\nNon-linear Functional Analysis, Ordinary Differential Equations, Honors Ordinary Differential Equations.\n\n\n\nUniversity of Warsaw\n\nResearch Intern | Dec 2016 – Mar 2017\nVisiting position during CrossFields PDEs semester organised and sponsored by The Simons Foundation.\nCollaboration with Raphael Dunchin, Piotr B. Mucha and with Jan Peszek in the research on fractional Euler alignment system (hydrodynamic flocking dynamics).\n\nRegular solutions to the fractional Euler alignment system in the Besov spaces framework published in Mathematical Models and Methods in Applied Sciences Vol. 29, No. 01, pp. 89-119\n\n\n\nTeaching Assistant | Jan 2017 – Mar 2017\nAnalysis 1, Analysis 2."
  },
  {
    "objectID": "pages/resume.html#education",
    "href": "pages/resume.html#education",
    "title": "Bartosz Wróblewski",
    "section": "Education",
    "text": "Education\n\nUniversity of Wrocław\n\nMsc in Theoretical Mathematics | Oct 2014 – Sep 2016\nThesis topic: “The anomalous diffusion and fractional Laplacian on the half-line” written under the supervision of Prof. Grzegorz Karch.\n\n\n\nWrocław University of Science and Technology\n\nBSc in Theoretical Mathematics | Oct 2011 – Jul 2014"
  },
  {
    "objectID": "pages/courses/uwr-odes-1r-2018.html",
    "href": "pages/courses/uwr-odes-1r-2018.html",
    "title": "Równania Różniczkowe 1R (UWr Lato 2018)",
    "section": "",
    "text": "Prowadzę ćwiczenia do wykładu Piotra Bilera. Program kursu można znaleźć tutaj."
  },
  {
    "objectID": "pages/courses/uwr-odes-1r-2018.html#materiały-do-nauki",
    "href": "pages/courses/uwr-odes-1r-2018.html#materiały-do-nauki",
    "title": "Równania Różniczkowe 1R (UWr Lato 2018)",
    "section": "Materiały do nauki",
    "text": "Materiały do nauki\n\nRównania różniczkowe zwyczajne\n\nSkrypt Raczyńskiego\nSkrypt Palczewskiego\nZadania Palczewskiego\nCzynnik całkujący\nKrzywe ortogonalne\n\n\n\nRównania różniczkowych cząstkowych\n\nMetoda charakterystyk\nMetoda rozdzielania zmiennych\nRównanie fali\nRównanie ciepła\nRównanie Laplace’a"
  },
  {
    "objectID": "pages/courses/uwr-odes-1r-2018.html#listy-zadań",
    "href": "pages/courses/uwr-odes-1r-2018.html#listy-zadań",
    "title": "Równania Różniczkowe 1R (UWr Lato 2018)",
    "section": "Listy zadań",
    "text": "Listy zadań\n\nLista 00 - lista uzupełniająca/powtórzeniowa dotycząca zagadnień z analizy.\nLista 01 - lista z równań liniowych pierwszego rzędu i równań o zmiennych rozdzielonych.\nLista 02 - lista z równań w postaci różniczki zupełnej i zastosowań równań pierwszego rzędu.\nLista 03 - lista z twierdzeń o istnieniu i jednoznaczności.\nLista 04 - lista z liniowych układów równań.\nLista 05 - lista z równań skalarnych wyższych rzędów.\nLista 06 - lista ze stabilności i portretów fazowych.\nLista 07 - lista z metody charakterystyk.\nLista 08 - lista z metody rozdzielania zmiennych\nLista 09 - lista z własności równania fali, równania ciepła i równania Laplace’a.\nLista 10 - lista nieobowiązkow z transformaty Laplace’a."
  },
  {
    "objectID": "pages/courses/uwr-odes-1r-2018.html#kolokwia",
    "href": "pages/courses/uwr-odes-1r-2018.html#kolokwia",
    "title": "Równania Różniczkowe 1R (UWr Lato 2018)",
    "section": "Kolokwia",
    "text": "Kolokwia\n\nKolokwium 1 (16.04):\n\nRozwiązania\n\nKolokwium 2 (11.06):\n\nRozwiązania"
  },
  {
    "objectID": "pages/courses/uw-analysis-2016.html",
    "href": "pages/courses/uw-analysis-2016.html",
    "title": "Zajęcia wyrównawcze dla Analizy 1.1 (UW Zima 2016)",
    "section": "",
    "text": "W styczniu prowadzę zajęcia wyrównawcze dla studentów pierwszego roku matematyki na MIMUW.\nZajęcia odbędą się w celu przygotowania studentów do drugiego kolokwium z Analizy 1.1.\nW trakcie zajęć będziemy zajmowali się zadaniami z “jawnej puli” dostępnymi tutaj.\nW razie potrzeby będę umieszczał tu dodatkowe zadania i materiały.\n\n\n Back to top"
  },
  {
    "objectID": "pages/courses/uw-analysis-2017.html",
    "href": "pages/courses/uw-analysis-2017.html",
    "title": "Zajęcia wyrównawcze dla Analizy 1.2 (UW Lato 2017)",
    "section": "",
    "text": "W marcu prowadzę zajęcia wyrównawcze dla studentów pierwszego roku matematyki na MIMUW. Zajęcia odbędą się w celu przygotowania studentów do pierwszego kolokwium z Analizy 1.2.\nW trakcie zajęć będziemy zajmowali się zadaniami z “jawnej puli” dostępnymi tutaj.\nPrzykłady szczegółowego badania przebiegu funkcji zaczerpnięte z książki Analiza matematyczna 1 - Przykłady, zadania można znaleźć 1 tutaj."
  },
  {
    "objectID": "pages/courses/uw-analysis-2017.html#douczkowe-listy-zadań",
    "href": "pages/courses/uw-analysis-2017.html#douczkowe-listy-zadań",
    "title": "Zajęcia wyrównawcze dla Analizy 1.2 (UW Lato 2017)",
    "section": "Douczkowe listy zadań",
    "text": "Douczkowe listy zadań\n\nJednostajna ciągłość i wypukłość"
  },
  {
    "objectID": "pages/courses/uwr-odes-1a-2017.html",
    "href": "pages/courses/uwr-odes-1a-2017.html",
    "title": "Równania Różniczkowe 1A (UWr Lato 2017)",
    "section": "",
    "text": "Prowadzę jedną z grup ćwiczeniowych do wykładu Roberta Stańczego."
  },
  {
    "objectID": "pages/courses/uwr-odes-1a-2017.html#skrypty",
    "href": "pages/courses/uwr-odes-1a-2017.html#skrypty",
    "title": "Równania Różniczkowe 1A (UWr Lato 2017)",
    "section": "Skrypty",
    "text": "Skrypty\n\nRównania Różniczkowe Zwyczajne\n\nRaczyński, A. Skrypt do kursu\nPalczewski, A. Skrypt do zajęć na UW\nPalczewski, A. Zbiór zadań\n\n\n\nRównania Różniczkowe Cząstkowe\n\nRozwiązane zadania na metodę charakterystyk\nKarpiński, W.: Rozwiązane zadania z równań drugiego rzędu\nRozwiązane zadania na metodę rozdzielania zmiennych\n\n\n\nListy Zadań\n\nLista 1\nLista 2\nLista 3\nLista 4\nLista 5\nLista 6\nLista 7\nLista 8\nLista 9\nLista 10\nLista 11\nLista 12\nLista 13\nLista 14\nLista 15 - powtórzeniowa"
  },
  {
    "objectID": "pages/courses/pwr-intro-to-cs-2024.html",
    "href": "pages/courses/pwr-intro-to-cs-2024.html",
    "title": "Wstęp do programowania (PWr Zima 2024)",
    "section": "",
    "text": "Laboratoria komputerowe do wykładu Andrzeja Giniewicza."
  },
  {
    "objectID": "pages/courses/pwr-intro-to-cs-2024.html#zasady-zaliczenia",
    "href": "pages/courses/pwr-intro-to-cs-2024.html#zasady-zaliczenia",
    "title": "Wstęp do programowania (PWr Zima 2024)",
    "section": "Zasady zaliczenia",
    "text": "Zasady zaliczenia\nOgólne zasady zaliczenia kursu można znaleźć na stronie kursu u wykładowcy.\nDoprecyzowania obowiazujace w moich grupach:\n\nListy zadańZadanie domoweOdpowiedź ustnaProjekt grupowyAktywność\n\n\nConajmniej pierwsze 4 listy będziemy robić na zajęciach, w systemie deklaracyjnym. Po zajęciach proszę o przesłanie rozwiązań. Kolejne listy zadań będą w formie zadań domowych, do zrobienia i przesłania przed zajęciami. Rozwiązania będą omiawiane i wyrywkowo sprawdzane w trakcie zajęć.\n\n\nWyobraź sobie, że pomagasz młodszemu koledze lub koleżance, którzy dalej są w liceum. Chcesz przygotować interaktywny notebook tłumaczący jakieś zagadnienie z zakresu matematyki, fizyki, informatyki lub chemii. Wybrany temat może, ale nie musi pochodzić z zakresu nauczania w szkole średniej. Ma być zrozumiały i dostępny dla ucznia liceum. Kod Python nie musi być zrozumiały dla licealisty. Polecam wybrać temat, który Ciebie też interesuje.\nW Twoim dokumencie powinny znaleźć się prawidłowo sformatowane komórki tekstowe, z nagłówkami oraz wzorami. Umieść również obliczenia wykonane w języku Python, jako ilustrację do niektórych przykładów, rozwiązanie zadań, lub wizualizację. Można, ale nie trzeba używać modułów Python nie przedstawionych na kursie.\nZa zadanie domowe można dostać maksymalnie 10 punktów. Po 3 za użycie Pythona, skład i formatowanie komórek Markdown oraz treść tłumaczaca zagadnienie. Dodatkowy punkt za ogólna schludność i estetykę zeszytu.\nGdybyś chciał wydrukować notatnik, powinien zająć przynajmniej dwie strony A4 przy standardowym rozmiarze kroju pisma (podpowiedź - możesz sprawdzić podgląd wydruku w menu File w narzędziu Jupyter Lab, jeśli trudno ocenić Ci ile już napisałeś).\nTermin oddania do 19 listopada (grupa wtorkowa) / 21 listopada (grupa czwartkowa). Zadanie domowe proszę przesyłać mailowo. Proszę załaczyć informację czy zgadzasz się na pokazanie Twojej pracy innym studentom i opublikowanie jej tutaj jako przyklad.\n\n\nOd 7-mych zajęć można zgłaszać się na ochotnika, co najmniej 3 ochotników jest wymaganych na jednych zajęciach.\n\n\nMożna się łączyć w grupy w obrębie moich 2 zajęć (wtorek 7:30 i czwartek 7:30), ale nie poza. Zakładam w sumie 5-8 grup projektowych.\n\n\nPunkty zostaną przydzielone na zasadzie normalizacji rozkładu aktywności na zajęciach. Gwarantuję, że jedna duża aktywność (np. przedstawienie pełnego rozwiązania z listy) będzie dawała co najmniej jeden punkt."
  },
  {
    "objectID": "pages/courses/pwr-intro-to-cs-2024.html#python",
    "href": "pages/courses/pwr-intro-to-cs-2024.html#python",
    "title": "Wstęp do programowania (PWr Zima 2024)",
    "section": "Python",
    "text": "Python\n\nPrzykłady zeszytów JupyterKomentarze do list zadań\n\n\nPrzykłady ilustrujące wachlarz możliwości zeszytów Jupyter i Markdown w zastosowaniach matematycznych. Wymagają one osobnych ustawień środowiska programistycznego i zewnętrznych narzędzi. Polecam zapoznanie się z nimi czysto ilustracyjnie jako motywacja do nauki.\n\nWizualizacja zbioru Mandelbrota obliczana na karcie graficznej - link\nPobieranie i analiza danych o cenie akcji spółki giełdowej - link\nNumeryczne rozwiązanie równań różniczkowych cząstkowych - link\nRozwiązania zadań z podstaw algebry liniowej - link\nCała obecna strona została utworzona z wykorzystaniem Markdownu i Pythona korzystając z technologii [Quarto]](https://quarto.org/) - link\n\n\n\n\nLista 1Lista 2Lista 3Lista 4Lista 5Lista 6\n\n\nPython lista 1 - wyrażenia matematyczne\nLista zadań\n\nZamiast\n\nimport math\npole = math.pi * 10**2\n\nwarto użyć\n\nfrom math import pi\npole = pi * 10**2\n\nZmniejszamy ilość pisania przy wielokrotnym użyciu, a sam import jest wydajniejszy co może mieć znaczenie przy bardziej zaawansowanych zadaniach.\nFunkcje pierwiastka kwadratowego i podnoszenia do potęgi \\(1/2\\) są oczywiście równoważne, natomiast polecana jest math.sqrt. Mniej ogólne algorytmy są zazwyczaj lepiej zoptymalizowane (przy naszych zastosowaniach nie ma to jednak znaczenia).\n\nfrom math import sqrt\nx = 2\ny = sqrt(x)\nz = x**0.5\nprint(y, z, y == z)\n\n1.4142135623730951 1.4142135623730951 True\n\n\nW zadaniu 4 występuje funkcja podłoga $ x $. Jest to największa liczba całkowita mniejsza niż \\(x\\). W Pythonie można używać funkcji math.floor.\n\nfrom math import floor\nx = 2.5\ny = 2.9\nz = -3.1\nprint(floor(x), floor(y), floor(z))\n\n2 2 -4\n\n\nZadanie 5 pokazuje, jak ważne jest umiejetne korzystanie ze zmiennych pomocniczych.\n\nfrom math import sqrt, pi\n\nsuma_w_nawiasie = 5 ** 4 + 53 * sqrt(89)\n\nmianownik = 80 * sqrt(15) * suma_w_nawiasie ** (3/2)\nlicznik = 3308 * suma_w_nawiasie - 3 * sqrt(89)\npi_przyblizenie = mianownik / licznik\n\nprint(round(pi_przyblizenie, 10))\nprint(round(pi_przyblizenie, 10) == round(pi, 10))\n\n3.1415926536\nTrue\n\n\nW powyższym kodzie dużo łatwiej wyłapac bład niż w jednolinijkowym gigancie.\nDo zadania 6 wrócimy jeszcze raz po funkcjach i pętlach aby zaimplemetować dużo czytelniejsze rozwiązanie.\n\n\n\nPython lista 2 - napisy\nLista zadań\n\nW razie gdy chcemy sprawdzić, gdzie w systemie zapisany jest dany plik Python albo zeszyt Jupyter poniższe drukuje obecna ścieżkę robocza (Current Working Directory).\n\nimport os\nprint(os.getcwd())\n\n/Users/bwrob/repos/bwrob.github.io/pages/courses\n\n\n\n\n\nPython lista 3 - listy i słowniki\nLista zadań\nKomentarze dla zaawansowanych:\nZadanie 2\nKluczem do pisania szybkiego kodu w Pythonie jest jak najczestsze kożystanie z wbudowanych funkcji, które wykonywane sa bezposrednio w języku niskopoziomowym.\nPrzykładowo, to zadanie można elegancko rozwiazac za pomoca wbudowaniej biblioteki itertools. Składaja się na nia pomocnicze funkcje rozwiazujace często potrzebne funkcjonalności dookoła iteratorów:\n\nfrom itertools import accumulate\nL = list(accumulate((-1) ** i / (i) for i in range(1, 101)))\nprint(L)\n\n[-1.0, -0.5, -0.8333333333333333, -0.5833333333333333, -0.7833333333333332, -0.6166666666666666, -0.7595238095238095, -0.6345238095238095, -0.7456349206349207, -0.6456349206349207, -0.7365440115440116, -0.6532106782106782, -0.7301337551337552, -0.6587051837051838, -0.7253718503718505, -0.6628718503718505, -0.7216953797836152, -0.6661398242280596, -0.718771403175428, -0.6687714031754279, -0.7163904507944756, -0.6709359053399302, -0.7144141662094954, -0.6727474995428288, -0.7127474995428288, -0.6742859610812904, -0.7113229981183273, -0.6756087124040416, -0.7100914710247312, -0.6767581376913979, -0.7090162022075269, -0.6777662022075269, -0.7080692325105572, -0.6786574678046748, -0.7072288963761034, -0.6794511185983256, -0.7064781456253526, -0.6801623561516684, -0.7058033817926941, -0.6808033817926941, -0.7051936256951331, -0.6813841018856093, -0.7046399158390977, -0.681912643111825, -0.7041348653340472, -0.6823957348992646, -0.7036723306439455, -0.6828389973106122, -0.7032471605759183, -0.6832471605759183, -0.7028550037131732, -0.683624234482404, -0.7024921590107058, -0.6839736404921873, -0.7021554586740055, -0.6842983158168626, -0.7018421754659854, -0.6846007961556405, -0.7015499486980133, -0.6848832820313466, -0.7012767246542975, -0.685147692396233, -0.7010207082692488, -0.6853957082692488, -0.7007803236538641, -0.685628808502349, -0.7005541816366774, -0.6858482992837363, -0.7003410529069246, -0.6860553386212104, -0.7001398456634639, -0.686250956774575, -0.6999495869115613, -0.6864360733980478, -0.6997694067313811, -0.686611511994539, -0.699598524981552, -0.6867780121610392, -0.6994362400091404, -0.6869362400091404, -0.6992819190214861, -0.6870867970702665, -0.6991349898413509, -0.687230227936589, -0.698994933818942, -0.6873670268421977, -0.698861279715761, -0.6874976433521246, -0.6987335984083044, -0.6876224872971933, -0.6986114982862043, -0.6877419330688129, -0.6984946212408559, -0.6878563233685155, -0.6983826391579893, -0.6879659724913226, -0.6982752508418381, -0.688071169209185, -0.698172179310195, -0.688172179310195]\n\n\nStosujemy tu potrójne złożenie generatorów. Generatory to obiekty, po których możemy iterować, a zwaracaja wartości pojedynczo. Często wykonywane jest to leniwie, dopiero kiedy sa o to zapytane.\n\nrange(1, 101) tworzy generator liczb od 1 do 100, nie trzyma tych liczb od razu w pamięci, tylko wie która jest następna.\n(func(n) for n in range(1, 101)) tworzy generator liczb od 1 do 100, a potem wykona operacje na nich.\naccumulate bierze coś po czym moźna iterować i operator binarny (domyślnie +) i zwraca generator częściowych wartości używania tego operatora na wszystkich elementach generatora.\nlist tworzy listę zawierajaca elementy złożonego generatora, zmusza do materializacji wynikow. Wszystko powyżej było tworzone leniwie.\n\nZadanie 5\nIterowanie się po wszystkich elementach zbioru często da się zastapić za pomoca matematycznych operacji na zbiorach, które sa dobrze zoptymalizowane.\n\nS = {\"dolnośląskie\", \"lubuskie\", \"wielkopolskie\"}\nM = {\"Wrocław\", \"Opole\", \"Zielona Góra\", \"Gorzów Wielkopolski\"}\nD = {\n    \"dolnośląskie\": {\"Wrocław\"},\n    \"kujawsko-pomorskie\": {\"Bydgoszcz\", \"Toruń\"},\n    \"lubelskie\": {\"Lublin\"},\n    \"lubuskie\": {\"Gorzów Wielkopolski\", \"Zielona Góra\"},\n    \"łódzkie\": {\"Łódź\"},\n    \"małopolskie\": {\"Kraków\"},\n    \"mazowieckie\": {\"Warszawa\"},\n    \"opolskie\": {\"Opole\"},\n    \"podkarpackie\": {\"Rzeszów\"},\n    \"podlaskie\": {\"Białystok\"},\n    \"pomorskie\": {\"Gdańsk\"},\n    \"śląskie\": {\"Katowice\"},\n    \"świętokrzyskie\": {\"Kielce\"},\n    \"warmińsko-mazurskie\": {\"Olsztyn\"},\n    \"wielkopolskie\": {\"Poznań\"},\n    \"zachodniopomorskie\": {\"Szczecin\"},\n}\n\nprint(set.union(*D.values()))\nprint({key for key, value in D.items() if value.intersection(M)})\n\n{'Łódź', 'Gorzów Wielkopolski', 'Toruń', 'Kielce', 'Zielona Góra', 'Gdańsk', 'Katowice', 'Kraków', 'Opole', 'Białystok', 'Wrocław', 'Poznań', 'Bydgoszcz', 'Lublin', 'Warszawa', 'Rzeszów', 'Olsztyn', 'Szczecin'}\n{'lubuskie', 'opolskie', 'dolnośląskie'}\n\n\nZadanie 6\nW Pythonie 3.8+ jest to możliwe za pomoca operatora := (walrus operator). Pozwala na tworzenie zmiennych pomocniczych wewnatrz wyrażeń języka.\n\nfrom math import sin, cos, radians\n\nn = 101\npunkty = {\n    (angle:=i * 360 / n): (cos(radians(angle)), sin(radians(angle)))\n    for i in range(n)\n}\nprint(punkty)\n\n{0.0: (1.0, 0.0), 3.5643564356435644: (0.9980655971335943, 0.06216963743148053), 7.128712871287129: (0.9922698723632765, 0.12409875261325935), 10.693069306930694: (0.9826352482222637, 0.18554775382949326), 14.257425742574258: (0.9691989991996661, 0.24627890683200138), 17.821782178217823: (0.9520131075327299, 0.30605725458788735), 21.386138613861387: (0.9311440620976595, 0.3646515262826552), 24.95049504950495: (0.9066726011770726, 0.4218350320620623), 28.514851485148515: (0.8786934000992688, 0.4773865400511271), 32.07920792079208: (0.8473147049577775, 0.531091132257275), 35.64356435643565: (0.8126579138282503, 0.5827410360463009), 39.20792079207921: (0.7748571071028898, 0.6321364279743265), 42.772277227722775: (0.7340585287594601, 0.6790862068658859), 46.336633663366335: (0.6904200205717468, 0.7234087331472497), 49.9009900990099: (0.6441104114503977, 0.7649325315746477), 53.46534653465346: (0.5953088642766661, 0.8034969546386757), 57.02970297029703: (0.5442041827560273, 0.8389528040783012), 60.59405940594059: (0.4909940809733222, 0.8711629080999505), 64.15841584158416: (0.4358844184753712, 0.90000265206853), 67.72277227722772: (0.3790884038403794, 0.9253604606172415), 71.2871287128713: (0.3208257698153676, 0.9471382293110002), 74.85148514851485: (0.26132192321286074, 0.9652517041934356), 78.41584158415841: (0.20080707285571844, 0.9796308077490816), 81.98019801980197: (0.13951533894392312, 0.9902199100196695), 85.54455445544555: (0.07768384728900624, 0.9969780438256293), 89.10891089108911: (0.015551811920350793, 0.9998790632601495), 92.67326732673267: (-0.046640390387417484, 0.9989117448426108), 96.23762376237623: (-0.10865215008547437, 0.9940798309400526), 99.8019801980198: (-0.17024355572239872, 0.9854020152886813), 103.36633663366337: (-0.23117632211496966, 0.9729118706714375), 106.93069306930693: (-0.2912147122272519, 0.9566577190314197), 110.4950495049505: (-0.3501264491913907, 0.936702444523675), 114.05940594059406: (-0.40768361494168887, 0.9131232502286187), 117.62376237623762: (-0.46366353198532706, 0.8860113594683149), 121.18811881188118: (-0.5178496248983254, 0.8554716628811638), 124.75247524752476: (-0.5700322582137827, 0.8216223126204006), 128.31683168316832: (-0.620009547460775, 0.7845942652463661), 131.88118811881188: (-0.6675881402161536, 0.7445307750810152), 135.44554455445544: (-0.7125839641475069, 0.7015868399847767), 139.009900990099: (-0.7548229391532569, 0.6559286016999402), 142.5742574257426: (-0.7941416508447535, 0.6077327030805316), 146.13861386138615: (-0.8303879827647975, 0.5571856046954285), 149.7029702970297: (-0.8634217048966635, 0.5044828634486399), 153.26732673267327: (-0.8931150161867917, 0.44982837600763564), 156.83168316831683: (-0.9193530389822364, 0.3934335899667523), 160.3960396039604: (-0.9420342634699891, 0.335516685797525), 163.96039603960395: (-0.9610709403987245, 0.2763017327508305), 167.52475247524754: (-0.976389420563607, 0.2160178219764834), 171.0891089108911: (-0.9879304397407567, 0.1548981802140847), 174.65346534653466: (-0.9956493479690186, 0.09317926748407171), 178.21782178217822: (-0.9995162822919881, 0.031099862269836753), 181.78217821782178: (-0.9995162822919881, -0.03109986226983695), 185.34653465346534: (-0.9956493479690186, -0.09317926748407147), 188.9108910891089: (-0.9879304397407568, -0.15489818021408447), 192.47524752475246: (-0.9763894205636071, -0.21601782197648314), 196.03960396039605: (-0.9610709403987245, -0.27630173275083025), 199.6039603960396: (-0.9420342634699891, -0.33551668579752525), 203.16831683168317: (-0.9193530389822363, -0.3934335899667525), 206.73267326732673: (-0.8931150161867916, -0.4498283760076358), 210.2970297029703: (-0.8634217048966636, -0.5044828634486397), 213.86138613861385: (-0.8303879827647976, -0.5571856046954283), 217.4257425742574: (-0.7941416508447537, -0.6077327030805314), 220.990099009901: (-0.754822939153257, -0.6559286016999399), 224.55445544554456: (-0.7125839641475068, -0.7015868399847768), 228.11881188118812: (-0.6675881402161534, -0.7445307750810153), 231.68316831683168: (-0.6200095474607752, -0.7845942652463659), 235.24752475247524: (-0.5700322582137832, -0.8216223126204003), 238.8118811881188: (-0.5178496248983256, -0.8554716628811637), 242.37623762376236: (-0.4636635319853273, -0.8860113594683149), 245.94059405940595: (-0.40768361494168853, -0.913123250228619), 249.5049504950495: (-0.3501264491913909, -0.9367024445236749), 253.06930693069307: (-0.291214712227252, -0.9566577190314197), 256.63366336633663: (-0.2311763221149701, -0.9729118706714374), 260.1980198019802: (-0.17024355572239874, -0.9854020152886813), 263.76237623762376: (-0.10865215008547438, -0.9940798309400526), 267.3267326732673: (-0.04664039038741795, -0.9989117448426108), 270.8910891089109: (0.015551811920350768, -0.9998790632601495), 274.45544554455444: (0.07768384728900554, -0.9969780438256294), 278.019801980198: (0.13951533894392268, -0.9902199100196695), 281.58415841584156: (0.20080707285571756, -0.9796308077490818), 285.1485148514852: (0.2613219232128609, -0.9652517041934355), 288.71287128712873: (0.3208257698153682, -0.947138229311), 292.2772277227723: (0.37908840384037934, -0.9253604606172415), 295.84158415841586: (0.4358844184753714, -0.9000026520685299), 299.4059405940594: (0.490994080973322, -0.8711629080999506), 302.970297029703: (0.5442041827560273, -0.8389528040783011), 306.53465346534654: (0.5953088642766663, -0.8034969546386754), 310.0990099009901: (0.6441104114503976, -0.7649325315746478), 313.66336633663366: (0.6904200205717469, -0.7234087331472497), 317.2277227722772: (0.7340585287594598, -0.6790862068658863), 320.7920792079208: (0.7748571071028897, -0.6321364279743266), 324.35643564356434: (0.8126579138282498, -0.5827410360463015), 327.9207920792079: (0.8473147049577773, -0.5310911322572754), 331.48514851485146: (0.8786934000992683, -0.4773865400511279), 335.0495049504951: (0.9066726011770727, -0.4218350320620621), 338.61386138613864: (0.9311440620976598, -0.3646515262826547), 342.1782178217822: (0.9520131075327298, -0.30605725458788735), 345.74257425742576: (0.9691989991996662, -0.2462789068320011), 349.3069306930693: (0.9826352482222637, -0.18554775382949354), 352.8712871287129: (0.9922698723632765, -0.12409875261325934), 356.43564356435644: (0.9980655971335943, -0.0621696374314802)}\n\n\nInna metoda jest użycie generatora wewnatrz listy składanej.\n\npunkty = {\n    angle: (cos(radians(angle)), sin(radians(angle)))\n    for angle in (i * 360 / n for i in range(n))\n}\nprint(punkty)\n\n{0.0: (1.0, 0.0), 3.5643564356435644: (0.9980655971335943, 0.06216963743148053), 7.128712871287129: (0.9922698723632765, 0.12409875261325935), 10.693069306930694: (0.9826352482222637, 0.18554775382949326), 14.257425742574258: (0.9691989991996661, 0.24627890683200138), 17.821782178217823: (0.9520131075327299, 0.30605725458788735), 21.386138613861387: (0.9311440620976595, 0.3646515262826552), 24.95049504950495: (0.9066726011770726, 0.4218350320620623), 28.514851485148515: (0.8786934000992688, 0.4773865400511271), 32.07920792079208: (0.8473147049577775, 0.531091132257275), 35.64356435643565: (0.8126579138282503, 0.5827410360463009), 39.20792079207921: (0.7748571071028898, 0.6321364279743265), 42.772277227722775: (0.7340585287594601, 0.6790862068658859), 46.336633663366335: (0.6904200205717468, 0.7234087331472497), 49.9009900990099: (0.6441104114503977, 0.7649325315746477), 53.46534653465346: (0.5953088642766661, 0.8034969546386757), 57.02970297029703: (0.5442041827560273, 0.8389528040783012), 60.59405940594059: (0.4909940809733222, 0.8711629080999505), 64.15841584158416: (0.4358844184753712, 0.90000265206853), 67.72277227722772: (0.3790884038403794, 0.9253604606172415), 71.2871287128713: (0.3208257698153676, 0.9471382293110002), 74.85148514851485: (0.26132192321286074, 0.9652517041934356), 78.41584158415841: (0.20080707285571844, 0.9796308077490816), 81.98019801980197: (0.13951533894392312, 0.9902199100196695), 85.54455445544555: (0.07768384728900624, 0.9969780438256293), 89.10891089108911: (0.015551811920350793, 0.9998790632601495), 92.67326732673267: (-0.046640390387417484, 0.9989117448426108), 96.23762376237623: (-0.10865215008547437, 0.9940798309400526), 99.8019801980198: (-0.17024355572239872, 0.9854020152886813), 103.36633663366337: (-0.23117632211496966, 0.9729118706714375), 106.93069306930693: (-0.2912147122272519, 0.9566577190314197), 110.4950495049505: (-0.3501264491913907, 0.936702444523675), 114.05940594059406: (-0.40768361494168887, 0.9131232502286187), 117.62376237623762: (-0.46366353198532706, 0.8860113594683149), 121.18811881188118: (-0.5178496248983254, 0.8554716628811638), 124.75247524752476: (-0.5700322582137827, 0.8216223126204006), 128.31683168316832: (-0.620009547460775, 0.7845942652463661), 131.88118811881188: (-0.6675881402161536, 0.7445307750810152), 135.44554455445544: (-0.7125839641475069, 0.7015868399847767), 139.009900990099: (-0.7548229391532569, 0.6559286016999402), 142.5742574257426: (-0.7941416508447535, 0.6077327030805316), 146.13861386138615: (-0.8303879827647975, 0.5571856046954285), 149.7029702970297: (-0.8634217048966635, 0.5044828634486399), 153.26732673267327: (-0.8931150161867917, 0.44982837600763564), 156.83168316831683: (-0.9193530389822364, 0.3934335899667523), 160.3960396039604: (-0.9420342634699891, 0.335516685797525), 163.96039603960395: (-0.9610709403987245, 0.2763017327508305), 167.52475247524754: (-0.976389420563607, 0.2160178219764834), 171.0891089108911: (-0.9879304397407567, 0.1548981802140847), 174.65346534653466: (-0.9956493479690186, 0.09317926748407171), 178.21782178217822: (-0.9995162822919881, 0.031099862269836753), 181.78217821782178: (-0.9995162822919881, -0.03109986226983695), 185.34653465346534: (-0.9956493479690186, -0.09317926748407147), 188.9108910891089: (-0.9879304397407568, -0.15489818021408447), 192.47524752475246: (-0.9763894205636071, -0.21601782197648314), 196.03960396039605: (-0.9610709403987245, -0.27630173275083025), 199.6039603960396: (-0.9420342634699891, -0.33551668579752525), 203.16831683168317: (-0.9193530389822363, -0.3934335899667525), 206.73267326732673: (-0.8931150161867916, -0.4498283760076358), 210.2970297029703: (-0.8634217048966636, -0.5044828634486397), 213.86138613861385: (-0.8303879827647976, -0.5571856046954283), 217.4257425742574: (-0.7941416508447537, -0.6077327030805314), 220.990099009901: (-0.754822939153257, -0.6559286016999399), 224.55445544554456: (-0.7125839641475068, -0.7015868399847768), 228.11881188118812: (-0.6675881402161534, -0.7445307750810153), 231.68316831683168: (-0.6200095474607752, -0.7845942652463659), 235.24752475247524: (-0.5700322582137832, -0.8216223126204003), 238.8118811881188: (-0.5178496248983256, -0.8554716628811637), 242.37623762376236: (-0.4636635319853273, -0.8860113594683149), 245.94059405940595: (-0.40768361494168853, -0.913123250228619), 249.5049504950495: (-0.3501264491913909, -0.9367024445236749), 253.06930693069307: (-0.291214712227252, -0.9566577190314197), 256.63366336633663: (-0.2311763221149701, -0.9729118706714374), 260.1980198019802: (-0.17024355572239874, -0.9854020152886813), 263.76237623762376: (-0.10865215008547438, -0.9940798309400526), 267.3267326732673: (-0.04664039038741795, -0.9989117448426108), 270.8910891089109: (0.015551811920350768, -0.9998790632601495), 274.45544554455444: (0.07768384728900554, -0.9969780438256294), 278.019801980198: (0.13951533894392268, -0.9902199100196695), 281.58415841584156: (0.20080707285571756, -0.9796308077490818), 285.1485148514852: (0.2613219232128609, -0.9652517041934355), 288.71287128712873: (0.3208257698153682, -0.947138229311), 292.2772277227723: (0.37908840384037934, -0.9253604606172415), 295.84158415841586: (0.4358844184753714, -0.9000026520685299), 299.4059405940594: (0.490994080973322, -0.8711629080999506), 302.970297029703: (0.5442041827560273, -0.8389528040783011), 306.53465346534654: (0.5953088642766663, -0.8034969546386754), 310.0990099009901: (0.6441104114503976, -0.7649325315746478), 313.66336633663366: (0.6904200205717469, -0.7234087331472497), 317.2277227722772: (0.7340585287594598, -0.6790862068658863), 320.7920792079208: (0.7748571071028897, -0.6321364279743266), 324.35643564356434: (0.8126579138282498, -0.5827410360463015), 327.9207920792079: (0.8473147049577773, -0.5310911322572754), 331.48514851485146: (0.8786934000992683, -0.4773865400511279), 335.0495049504951: (0.9066726011770727, -0.4218350320620621), 338.61386138613864: (0.9311440620976598, -0.3646515262826547), 342.1782178217822: (0.9520131075327298, -0.30605725458788735), 345.74257425742576: (0.9691989991996662, -0.2462789068320011), 349.3069306930693: (0.9826352482222637, -0.18554775382949354), 352.8712871287129: (0.9922698723632765, -0.12409875261325934), 356.43564356435644: (0.9980655971335943, -0.0621696374314802)}\n\n\nPlusem użycia generatora, a nie osobnej listy jest to, że jest on leniwie ewaluowany - jeden element na raz. Nie trzymamy katów w pamieci dwa razy.\n\n\nPython lista 4 - funkcje.\nLista zadań\n\nNa zajęciach zobaczyliśy jak zapisać zadanie Fizz Buzz bez porównania modulo 15:\n\ndef fizz_buzz(\n    liczba: int,\n) -&gt; str:\n    \"\"\"Wyznacz FizzBuzz dla liczby.\"\"\"\n    msg = \"\"\n    if liczba % 3 == 0:\n        msg += \"Fizz\"\n    if liczba % 5 == 0:\n        msg += \"Buzz\"\n    return msg or str(liczba)\n\n\nprint([fizz_buzz(i) for i in range(1, 16)])\n\n['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']\n\n\nJest to szczególnie istotne, jeżeli dodamy dodatkowo Mizz dla liczb podzielnych przez 7 i Duzz dla liczb podzielnych przez 8. Funkcję można wtedy jeszcze bardziej uprościć za pomoca słownika i listy składanej:\n\ndef fizz_buzz(\n    liczba: int,\n) -&gt; str:\n    \"\"\"Wyznacz FizzBuzz dla liczby.\"\"\"\n    msg = \"\"\n    mapa = {\n        3: \"Fizz\",\n        5: \"Buzz\",\n        7: \"Mizz\",\n        8: \"Duzz\",\n    }\n    lista_slow = [mapa[i] for i in mapa if liczba % i == 0]\n    msg = \"\".join(lista_slow)\n    return msg or str(liczba)\n\nprint([fizz_buzz(i) for i in range(1, 16)])\n\n['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', 'Mizz', 'Duzz', 'Fizz', 'Buzz', '11', 'Fizz', '13', 'Mizz', 'FizzBuzz']\n\n\nSprawdzanie wszystkich podzielności miesznych było by bardzo niekomfortowe.\n\n\n\nPython lista 5 - numpy, matplotlib.\nLista zadań\n\n\nPython lista 6 - testowanie, wyjatki\nLista zadań"
  },
  {
    "objectID": "pages/courses/pwr-intro-to-cs-2024.html#bash-i-git",
    "href": "pages/courses/pwr-intro-to-cs-2024.html#bash-i-git",
    "title": "Wstęp do programowania (PWr Zima 2024)",
    "section": "Bash i git",
    "text": "Bash i git\n\nNawigacja systemu plikówSkryptowanieGit i GitLab\n\n\nPrzyklady komend uzytych na zajeciach (rozszyfrowanie ich jako zadanie dla czytelnika):\nhistory -c\npwd\ncd ~\nmkdir test\ncd test\ntouch test.txt\ncode test.txt\ncp test.txt test2.txt\nmv test2.txt test3.txt\nrm test2.txt\necho \"Hello World\" &gt;&gt; test3.txt\ncat test3.txt\nwc &lt; test3.txt\ncat test.txt test3.txt &gt; test4.txt\ncd ..\nrm -ri test\nls -la\nhistory 1 &gt; notatki.txt\n\n\nPrzykladowy skrypt zapisany jako plik hello.sh:\n#! bash\n\necho \"Hello $1 !\"\n\nif [ \"$1\"==\"Flip\" ] ; then\n    echo ”Long time no see ! ”\nelif [ \"$1\"==\"Flap\" ] ; then\n    echo \"What do you want?\"\nelse\n    echo \"Who are you again ?\"\nfi\n\nif ! [ -f log.txt ] ; then\n    touch log.txt\nfi\necho \"$(date) User $1 visited.\" &gt;&gt; log.txt\n\nfor i in $(seq 5 -1 1)\ndo\n    echo \"Konczymy za $i\"\ndone\nJego wykonanie:\nchmod +x hello.sh\n./hello.sh Flap\nSkrypt w pythonie:\n\n#! python3\n\nimport sys\n\nprint(f\"Hello !\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) &gt; 1:\n        for x in sys.argv[1:]:\n            print(f\"Nice to meet you {x}\")\n\nHello !\nNice to meet you -f\nNice to meet you /private/var/folders/cp/8hw2xqrd443d0znxcbb7vjmm0000gn/T/tmpvs1c_4hq.json\nNice to meet you --HistoryManager.hist_file=:memory:\n\n\nJego wykonanie:\nchmod +x hello.py\n./hello.py Flip Flap Flop\n\n\nGenerowanie klucza SSH (warto przeczytać oficjalne instrukcje)\nssh-keygen -t ed25519 -C \"imie nazwisk, indeks\"\nKlucz publiczny powinien byc w pliku ~/.ssh/id_ed25519.pub. Na koncie GitLab powinien byc dodany klucz publiczny SSH.\nUstawienie klucza SSH w systemie lokalnym:\neval $(ssh-agent)\nssh-add &lt;sciezka klucza&gt;\nssh git@gitlab.com\nTworzymy repozytorium lekcja-1na stronie GitLab. Klikamy na niebieskie przycisk Code i kopiujemy to co pod SSH.\nKlonujemy repozytorium GitLab, ustawiamy uzycie klucza SSH, tworzymy gałąź main.\ngit clone &lt;sciezka ssh&gt;\ngit config --local user.name \"&lt;imie nazwisko&gt;\"\ngit config --local user.email \"&lt;email pwr&gt;\"\ngit config --local gpg.format ssh\ngit config --local user.signingkey /ścieżka/do/klucza/id_ec25519.pub\ngit switch --create main\nTworzymy plik README.md, dodajemy go do repozytorium, commitujemy i pushujemy.\ntouch README.md\ngit add README.md\ngit commit -S -m \"puste readme\"\ngit status\ngit push"
  },
  {
    "objectID": "pages/notebooks/mandebrot.html",
    "href": "pages/notebooks/mandebrot.html",
    "title": "bwrob blog",
    "section": "",
    "text": "from functools import partial\n\nfrom mandelbrot import (\n    create_fractal,\n    create_fractal_gpu,\n    create_fractal_jit,\n    show_fractal,\n)\n\n\nresolution = (1440, 3440)\niter_small = 10\niter_medium = 10_000\niter_large = 1_000_000\nview_rectangle = (-2.5, 1.5, -1.2, 1.2)\n\n\ndef show_size(iters: int):\n    return partial(\n        show_fractal,\n        max_iters=iters,\n        resolution=resolution,\n        view=view_rectangle,\n    )\n\n\nshow_quick = show_size(iter_small)\nshow_medium = show_size(iter_medium)\nshow_long = show_size(iter_large)\n\n\nfor worker in [\n    create_fractal,\n    create_fractal_jit,\n    create_fractal_gpu,\n]:\n    show_quick(worker)\n\nMandelbrot created in 4.110897000180557s\nMax iterations to escape 10\n\n\n\n\n\n\n\n\n\nMandelbrot created in 0.33227419992908835s\nMax iterations to escape 10\n\n\n\n\n\n\n\n\n\nMandelbrot created in 0.35070399986580014s\nMax iterations to escape 10\n\n\n\n\n\n\n\n\n\n\nfor worker in [\n    create_fractal_jit,\n    create_fractal_gpu,\n]:\n    show_medium(worker)\n\nMandelbrot created in 16.01580259995535s\nMax iterations to escape 10000\n\n\n\n\n\n\n\n\n\nMandelbrot created in 0.5051736000459641s\nMax iterations to escape 10000\n\n\n\n\n\n\n\n\n\n\nshow_fractal(\n    fractal_worker=create_fractal_gpu,\n    max_iters=10_000_000,\n    resolution=(14400, 34400),\n    view=view_rectangle,\n)\n\n\n\n\n Back to top"
  }
]