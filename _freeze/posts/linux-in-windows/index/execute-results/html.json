{
  "hash": "ad5b00ce8cae224598316c557d9095ef",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Linux in Windows via WSL\"\ndescription: \"How to have a great dev setup and still play CS over a coffee break.\"\nauthor: \"bwrob\"\n\ndate: \"2024-08-11\"\ndate-modified: \"2024-08-30\"\n\ncategories: [Dev Setup]\nimage: image.jpg\n---\n\n\n\n\n\n![](image.jpg){width=\"95%\" fig-align=\"center\"}\n\n## Windows, Linux, and You: Ménage à trois\n\nTired of the same old Windows vs. Linux beef among PC superusers? Well, get ready to become a mediator in this feud. I'll show you how to get the best of both worlds.\n\n### Pros and cons\n\nWindows OS has long been the dominant platform for mainstream consumers and businesses. It offers good hardware compatibility, de facto *the* PC gaming experience and is friendly to the casual user. However, Windows has significant limitations in terms of system control and software development tools.\n\nLinux, on the other hand, is an operating system created by developers and for developers (and system administrators). It provides infinite flexibility and a deep pool of open-source tools. But the learning curve is steep, the open-source projects often get abandoned and with great power (`sudo`) comes great responsibility (and sometimes system reinstall).\n\n::: callout-note\nActually, to publish this post in the most convenient and elegant [way](https://quarto.org/docs/publishing/github-pages.html#publish-command), I needed to switch to Linux. The Windows `quarto` CLI fails with some certification errors, coming from `deno`, that I can't be bothered to clean up. Discovered this while writing these words as [my previous approach](https://quarto.org/docs/publishing/github-pages.html#render-to-docs) was much messier. Irony is the ambrosia of life (for me at least).\n:::\n\n### Bridging the gap\n\nAt this point even Microsoft --- a strong contrarian to Linux in the past --- embraced the usefulness of Linux shell at your fingertips. Imagine having the familiar interface of Windows for your everyday tasks. Combine it with a the raw power and controllability of Linux for when you need to dive deep into development or system administration. And limited stakes once you (inevitably) remove half of your file system with a bash script. Enter Windows Subsystem for Linux (WSL): a ticket to 10x-ing your software development on Windows.\n\n### WSL vs. Virtual Machines: What's the Difference?\n\nYou might be wondering how WSL differs from a traditional virtual machine (VM). While both provide a way to run Linux on Windows, they operate in different ways. A VM emulates a virtual computer within your computer, complete with its own operating system and make-belive hardware resources. This makes VMs resource-intensive and can impact overall system performance. They are also hard to set up and maintain.\n\nWSL, on the other hand, is a more lightweight approach. It integrates Linux directly into the Windows kernel, allowing for faster boot times, better performance, and seamless file sharing between Windows and Linux environments.\n\n## Installing and setting up WSL\n\nFirst, we need to set up the WSL and install a chosen Linux distribution. Fortunately, this is \"super easy, barely an inconvenience\". You can choose from a list of distros pre-packaged by Microsoft or download and build an image from scratch. You can even build Arch and be legally allowed to say `BTW, I use Arch (on Windows)`. For this guide, we'll take a more conventional approach and opt for the long-term support (LTS) version of Ubuntu. Now, open the Powershell with administrative privileges and run:\n\n\n\n\n\n```{shell}\nwsl --update\nwsl --version\n```\n\n\n\n\n\nThese commands ensure that WSL is up-to-date and displays the installed WSL version.\n\n![](1.png)\n\nOur next command will be:\n\n\n\n\n\n```{shell}\nwsl -l -o\n```\n\n\n\n\n\nThis yields a curated list of pre-packaged Linux distributions that Microsoft provides, making the process almost effortless.\n\n![](2.png)\n\nFor the installation itself:\n\n\n\n\n\n```{shell}\nwsl --install -d 'Ubuntu-24.04'\n```\n\n\n\n\n\n![](3.png)\n\nReboot the Windows system and you'll see \\`Ubuntu' among your applications. ![](4.png) ![](5.png)\n\n## Base setup --- new shell and package manager\n\nThere is an additional benefit we can reap with just a bit of more work --- a fully system-agnostic setup. By having Linux kernel run on Windows, we unified 2 out of 3 giants. The only pillar that is missing is the Mac OS. But wait, it's based on Unix as well! It just uses different default shell and lacks a package manager, as Apple doesn't trust its clients. `zsh` offers a more interactive and customizable shell experience compared to the default bash. Homebrew, often referred to as the \"missing package manager for macOS\", provides a convenient way to install additional software on Linux systems. Let's change the terminal shell to `zsh` in our Ubuntu installation and compile a secondary (to `apt-get`) package manager -- `brew`.\n\n### Brewing starts\n\nBefore we dive into installing Homebrew, we need to equip our system with the essential tools. The build-essential package provides a collection of compilers and libraries necessary for building software from the source code. Git is a version control system used for managing code projects.\n\nLet's install these prerequisites using the following command:\n\n\n\n\n\n```{bash}\nsudo apt-get upgrade -y\nsudo apt-get install build-essential git -y\n```\n\n\n\n\n\nExecute the installation script for Homebrew:\n\n\n\n\n\n```{bash}\nINSTALL_PATH=\"https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh\"\n/bin/bash -c \"$(curl -fsSL $INSTALL_PATH)\"\n```\n\n\n\n\n\n![](6.png)\n\nTo make Homebrew accessible from your shell, you need to load its environment variables. The following command achieves this and subsequently runs a diagnostic check:\n\n\n\n\n\n```{bash}\neval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"\nbrew doctor\n```\n\n\n\n\n\n![](7.png)\n\nDoctor's orders to append brew to some set of paths! Let's do this then:\n\n\n\n\n\n```{bash}\necho 'export XDG_DATA_DIRS=\"/home/linuxbrew/.linuxbrew/share:$XDG_DATA_DIRS\"' >> ~/.profile\n```\n\n\n\n\n\n## Z-shell --- sea-shell\n\nHomebrew makes package management a breeze. Let's install `zsh`, a powerful and customizable shell.\n\n\n\n\n\n```{bash}\nbrew install zsh\nzsh --version\nzsh\n```\n\n\n\n\n\nThis will take you to interactive `.zshrc` file setup. The file contains commands that are run each time a shell is spawned. You can either generate empty file with `0` or go through the interactive setup with `1`. ![](8.png)\n\nAdd the brew initialization to `.zshrc` file as well. This way `brew` will always be by your side!\n\n\n\n\n\n```{bash}\n(echo; echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"') >> /home/bwrob/.zshrc\n```\n\n\n\n\n\nCheck the default shell and set it to `zsh`:\n\n\n\n\n\n```{bash}\necho $SHELL\nsudo chsh -s $(which zsh)\necho $SHELL\n```\n\n\n\n\n\n## GitHub command line tool\n\nRemember `git != GitHub`, we need a way to authenticate and use Github from CLI. There's a tool for that!\n\n\n\n\n\n```{bash}\nbrew install gh\ngh auth login\n```\n\n\n\n\n\n![](9.png)\n\nNow create a convenient directory and copy your favourite `GitHub` repo:\n\n\n\n\n\n```{bash}\nmkdir repos && cd repos\ngh repo clone python_playground\n```\n\n\n\n\n\n## Connect to Visual Studio Code\n\nWhile WSL grants us the power of Linux, let's not forget the user-friendly interface of Windows. When it comes to software development, we can achieve the perfect blend by integrating Visual Studio Code (VSC) with our WSL environment.\n\nHere's how:\n\n-   **Install the WSL Extension in VSC**: Fire up VSC on your Windows machine and head over to the Extensions tab. Search for \"WSL\" and install the official extension by Microsoft: [WSL extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl).\n\n-   **Launching VSC from WSL**: Within your WSL terminal, you can directly invoke VSC as if it were running natively on Windows. Use the following command:\n\n\n\n\n\n```{bash}\ncode ~\\repos\\python_playground\n```\n\n\n\n\n\n![](10.png)\n\nIn the [next post]() I will show you how to set up Python environment in Linux. Stay tuned :) .\n\n::: callout-note\nDownload the Ubuntu shell script [here](../../scripts/wsl_setup.sh).\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}