{
  "hash": "f968a3ab09e9751258895bdbf7ef104c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Start your day with coffee\"\ndescription: \"How to create a start up script in python and enjoy your coffee \n    instead of opening the same apps all over again every morning.\"\nauthor: \"bwrob\"\n\ndate: \"2024-05-21\"\n\ncategories: [Pythonic Distractions]\n\nimage: win_98.png\n\ndraft: true\n\nformat-links: [html]\n---\n\n## Why a start up script?\n\nConfesion time. Pre-COVID I worked for a Swiss bank --- it was the whole corporate package. \nWorking from a crowded office, open space, dedicated desks, dedicated desktop PCs, hundreds of people.\nAnd we never turned the PC's off, some of them were running constantly for months. \nNot very eco-friendly behaviour, either from the company side and from the employees. \nBut there were legit reasons for this and the company had much [bigger sins](https://www.wikiwand.com/en/Credit_Suisse#Controversies) on their books.\n\nAs for the reasons for eternaly turned on machines --- the propriaetary frameworks and tooling we used was awfully heavy and slow. \nIf you were occasionally forced to kill all the processes once in a while due to an update or system crash getting them all up again would take an hour or more. \nDeveloper tools, pricing systems, connections to Monte Carlo farms, downloading trade data, analysis definitions. \n\nOne tidbit to get this point across - in 2019 we still used 32-bit Win7, which had a cap on single-process memory consumption to 4Gb. \nWe had a universally used hack to extend this to 8Gb for Excel, since the default wasn't enough for many of our pricing sheets.\n\nWhen post-COVID I parted ways with the company, I got a work notebook from the new employer.\nThe office was much sparser, quiter with 'hot seats' approach.  I worked mostly remotely either way. \nThis ment switching off the company machine each day, as the VPN connections woudnt last overnight either way.\nI was very annoyed with openning all of the usual setup day after day, after getting used to having it all waiting for me to jump right in.\n\nHence the startup script to open all of the apps, tools and files programatically. \nIt won't cover everything, like authorizations or connections but stil a little helper to start the day.\n\n\n### The setup\n\nLet's think about the design first -- this is a good practice by the way. Imagine the code being split into two\n\n* the hiddden logic layer, the worker that does stuff,\n* and the public interface that integrates with the rest of the, the manager.\n\nWe can write the public interface first to see what we want to achive and later deal with filling in a working implementation. \nYou can either define the logic functions as mocks, or just live with linting issues. This is what my desired usage is:\n\n::: {#422fa3ab .cell execution_count=1}\n``` {.python .cell-code}\ndef run_startup_script():\n    \"\"\"\n    Runs the startup script.\n    \"\"\"\n    print(f\"Welcome!\")\n    start_programs(\n        [\n            \"powershell\",\n            \"notepad++\",\n            (\"firefox\", 8),\n        ]\n    )\n    start_work_files([\".temp\"])\n    run_commands([('login-to-cloud --user bwrob', 30)])\n```\n:::\n\n\nWe want to specify programs to start, open all files in some temp folder, and run a list of shell commands.\nAfter each step there should be some delay not to spam system with process calls.\nCertain steps might be more time consuming, like cloud services authorization. Those need longer delay.\nOn the other hand, specifying delay for each step is cumbersome, most cases would be fine with some default value.\n\n\n## The last bit of convinienvce\n\nWe got it guys, the script works and the job is done. \nBut.. do you recall the last time you googled a shortcut for a semi-frequently used functionality?\nDo you still remember the shortcut, or use it each time you need the functionality? \nConvinience needs to be convinient (obviously). So let' make usage of our script as seemless as possible. \n\nAt Windows OS, for me best way would be to have a shortcut that would run it on one click that is pinned to taskbar and start menu. \nTo create one:\n\n* Go to any folder, right-click and select `New > Shortcut`.\n* In the guide that pops up paste in `%systemroot%\\System32\\cmd.exe /c \"python.exe $1\"` where `$1` should be replaced by the path to your script. \n    You can also replace `python.exe` with interpreter path of any venv you wish.\n* Optionally, you can later change the icon for the shortcut (neweds to be `.ico` file).\n    I like to roll with Win-98 style `My Computer' icon.\n* Copy the shortcut to start menu dir. For Win11 it's `C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs`.\n    You should be able to see it in start menu already. Now you can pin it to taskbar.\n\n![](startup_shortcut.png){width=\"100%\"}\n\nThat's a good enough reminder and convinience tool for me. You might need some different setup, especially for another OS. For Linux, you might try to levarage `activate` or `bashrc` scripts in your working setup. Here you can download the [script](startup_script.py) and example Windows [shortcut](Startup!.lnk).\n\n## Further extensions\n\nThere are a couple more things I wish this guy could do for me still:\n\n* **Changing Teams status to green** - there's a MS Graph API that could do this but we would need to manage Azure authorizations through the script. I am not up to that, especially on a work account. Might experiment on personal one in the future.\n* **Display placement of opened processes** -- I have 2 displays (which you could count as 4, due to size format) and I am very particular about where each app should go. I would love the apps to open where they should. This is however OS specific, for Win it require to mingle with win32api. Yet another project for the future.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}