<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>bwrob blog</title>
<link>https://bwrob.github.io/</link>
<atom:link href="https://bwrob.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>bwrob personal and professional blog</description>
<image>
<url>https://bwrob.github.io/assets/python_mug.png</url>
<title>bwrob blog</title>
<link>https://bwrob.github.io/</link>
<height>144</height>
<width>144</width>
</image>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Mon, 20 May 2024 22:00:00 GMT</lastBuildDate>
<item>
  <title>Start your day with coffee</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/000004_startup_script/</link>
  <description><![CDATA[ 





<section id="why-a-start-up-script" class="level2">
<h2 class="anchored" data-anchor-id="why-a-start-up-script">Why a start up script?</h2>
<p>If we know we’re never going to use all of the resources, we should clean up the server artifacts after receving the results. So for each resource we should have a CM.</p>
<section id="the-setup" class="level3">
<h3 class="anchored" data-anchor-id="the-setup">The setup</h3>
<p>The setup described above comes from a real-life situation I worked through. I can’t show you the actual API usage or data (or even the name of RMS itself), so we need to define some mocker functions. Mocks like this are actually not an uncommon thing — such approach is prevalent in testing API client code. In our case it would look like this:</p>
<div id="d656f4d4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Enum</span></code></pre></div>
</div>
</section>
</section>
<section id="the-last-bit-of-convinienvce" class="level2">
<h2 class="anchored" data-anchor-id="the-last-bit-of-convinienvce">The last bit of convinienvce</h2>
<p>We got it guys, the script works and the job is done. But.. do you recall the last time you googled a shortcut for a semi-frequently used functionality? Do you still remember the shortcut, or use it each time you need the functionality? Convinience needs to be convinient (obviously). So let’s apply this to our script.</p>
<p>For Windows OS, for me best way would be to have a shortcut that would run it on one click that is pinned to taskbar and start menu. To create one:</p>
<ul>
<li>Go to any folder, right-click and select <code>New &gt; Shortcut</code>.</li>
<li>In the guide that pops up paste in <code>%systemroot%\System32\cmd.exe /c "python.exe $1"</code> where <code>$1</code> should be replaced by the path to your script. You can also replace <code>python.exe</code> with interpreter path of any venv you wish.</li>
<li>Optionally, you can later change the icon for the shortcut (neweds to be <code>.ico</code> file). I choose Win-98 style `My Computer’ icon.</li>
<li>Copy the shortcut to start menu dir. For Win11 it’s <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs</code>. You should be able to see it in start menu already. Now you can pin it to taskbar.</li>
</ul>
<p><img src="https://bwrob.github.io/posts/000004_startup_script/startup_shortcut.png" class="img-fluid" style="width:100.0%"></p>
<p>That’s a good enough reminder and convinience tool for me. You might need some different setup, especially for another OS. For Linux, you might try to levarage <code>activate</code> or <code>bashrc</code> scripts in your working setup. Here you can download the <a href="startup_script.py">script</a> and example Windows <a href="Startup!.lnk">shortcut</a>.</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Pythonic Distractions</category>
  <guid>https://bwrob.github.io/posts/000004_startup_script/</guid>
  <pubDate>Mon, 20 May 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/000004_startup_script/win_98.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Exit stack to the rescue</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/240512_exit_stack/</link>
  <description><![CDATA[ 





<section id="working-with-risk-managment-systems" class="level2">
<h2 class="anchored" data-anchor-id="working-with-risk-managment-systems">Working with risk managment systems</h2>
<p>As a quantitative finance professional you’ll often find yourself with risk management systems (RMS). RMS’s are extensive frameworks that let you properly define a book (portfolio) of your financial transactions and run varia of pricing and risk analysis on it. For big financial players, like investment banks, the RMS will be internal proprietary framework that is run in-house. For smaller enterprises or second-line reporting it’s not feasable to tackle creating such vast framework. Hence, where there’s a need, someone will try to make money on it. This leads us to third-party (or vendor) RMS, of which there are plenty (ex. Murex, Acadia).</p>
<p>Working with vendor RMS, especially one that covers computations for you, entails juggling multiple resources to obtain your risk metrics. Defining OTC products, benchmarks, portfolios, and running risk analysis can involve numerous API calls, each requiring proper setup and cleanup. This can lead to messy code and potential errors or performance bottlenecks if resources aren’t handled correctly.</p>
<p>Thankfully, Python provides a powerful concept called context managers (<strong>CM</strong>) that streamline resource managment. True to the language’s ‘batteries included’ philosophy, there’s also a <code>contextlib</code> library that contains variety of tools for easing up your work with CMs. Today we’ll look at a (mock-up) usage of <code>ExitStack</code> class in real-life scenario of running risk analysis on RMS. If you need a refresher on CMs, check out this <a href="https://realpython.com/python-with-statement/">tutorial</a> by RealPython.</p>
</section>
<section id="setting-the-stage" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-stage">Setting the stage</h2>
<p>To run an analysis, the RMS first needs to know what our positions are. In case of tradable assets it’s simple — we provide a market identifier and how much of the instrument we are holding. What do we do if we have some bespoke agreement with specific counterparty (an over-the-counter transaction)? We will need to define it from scratch in the RMS using data from the term sheet (assuming this kind of agreement is covered).</p>
<p>Next, we need to specify the risk metrics we want to calculate — define the analysis scope. Let’s say we hold some equity options and we are intertested in their deltas and beta exposures. The betas are defined with respect to some benchmark — ex. portfolio holding 1 stock in US500 ETF. So we define the benchmark and link it to our analysis.</p>
<p>Finally — once portfolio and analysis are defined in RMS — we call the API to start the calculation and respond with results. This is the control flow we execute to get to this point:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  A[OTC Products] --&gt; B[Portfolio]
  B --&gt; C{Analysis Run}
  D[Benchmarks] --&gt; E[Analysis Definition]
  E --&gt; C
  C --&gt; F(Results)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>If we know we’re never going to use all of the resources, we should clean up the server artifacts after receving the results. So for each resource we should have a CM.</p>
<section id="mock-functions" class="level3">
<h3 class="anchored" data-anchor-id="mock-functions">Mock functions</h3>
<p>The setup described above comes from a real-life situation I worked through. I can’t show you the actual API usage or data (or even the name of RMS itself), so we need to define some mocker functions. Mocks like this are actually not an uncommon thing — such approach is prevalent in testing API client code. In our case it would look like this:</p>
<div id="de718061" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StrEnum</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> uuid <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uuid4</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MockObject(StrEnum):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Types of mock objects."""</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">    ANALYSIS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analysis"</span></span>
<span id="cb1-9">    BENCHMARK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"benchmark"</span></span>
<span id="cb1-10">    OTC_PRODUCTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"otc_products"</span></span>
<span id="cb1-11">    PORTFOLIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mock_object(object_type: MockObject) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock a UUID for a given object type.</span></span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        object_type: Type of object.</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>object_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>uuid4()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mock_preparation(object_type: MockObject, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock preparation of an object.</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        object_type: Type of object.</span></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Preparing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>object_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kwargs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> kwargs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>))</span>
<span id="cb1-30"></span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mock_clean_up(object_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock clean up of an object.</span></span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        object_uuid: Uuid of the object.</span></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cleaning up after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>object_uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
</div>
<p>For each of the four types of resources we mock the preparation, object (ex. API response, some id of definition on server) and the clean up process.</p>
</section>
<section id="context-managers" class="level3">
<h3 class="anchored" data-anchor-id="context-managers">Context managers</h3>
<p>Easiest way to define a CM is through <code>contextlib.contextmanager</code> decorator. To use it, you need a function that returns a generator. Code executed on enter should come before <code>yield</code> statement and the one for the exit afterwards. The generator yields the result of the CM (ex. handle to an opened file), the <code>y</code> in <code>with x(*args) as y:</code>.</p>
<div id="202b286e" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextmanager</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Generator</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> analysis(</span>
<span id="cb2-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb2-7">    benchmark_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb2-8">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of an analysis.</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example: equity delta and correlation with benchmark.</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        benchmark_uuid: Uuid of the benchmark.</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-16">    mock_preparation(</span>
<span id="cb2-17">        MockObject.ANALYSIS,</span>
<span id="cb2-18">        benchmark_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb2-19">    )</span>
<span id="cb2-20">    analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.ANALYSIS)</span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> analysis_uuid</span>
<span id="cb2-22">    mock_clean_up(analysis_uuid)</span></code></pre></div>
</div>
<p>Modern approach to Python development leans heavily towards type annotations. Dynamical typing is powerful but can lead to unwieldy code. To properly annotate the <code>analysis</code> function we need to import <code>Generator</code> from <code>typing</code> module. Remember, the <code>@contextmanager</code> decorator takes the function and turns it into CM — a class with <code>__enter__</code> and <code>__exit__</code> methods. The <code>Generator</code> needs three inputs but in our case only the first one is important — <code>YieldType</code>, here <code>str</code> (<a href="https://docs.python.org/3/library/typing.html#typing.Generator">see</a> for more).</p>
<p>With this done implementing the 3 remaining CMs is easy, just remember our flow chart.</p>
<div id="c5b2c0e8" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> benchmark() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of a benchmark.</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        otc_products_uuid: Uuid of the otc products.</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-8">    mock_preparation(</span>
<span id="cb3-9">        MockObject.BENCHMARK,</span>
<span id="cb3-10">    )</span>
<span id="cb3-11">    benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.BENCHMARK)</span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> benchmark_uuid</span>
<span id="cb3-13">    mock_clean_up(benchmark_uuid)</span>
<span id="cb3-14"></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb3-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> otc_products() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of an otc products.</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        otc_products_uuid: Uuid of the otc products.</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-23">    mock_preparation(MockObject.OTC_PRODUCTS)</span>
<span id="cb3-24">    otcs_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.OTC_PRODUCTS)</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> otcs_uuid</span>
<span id="cb3-26">    mock_clean_up(otcs_uuid)</span>
<span id="cb3-27"></span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb3-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> portfolio(</span>
<span id="cb3-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb3-32">    portfolio_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb3-33">    otc_products_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb3-34">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of a portfolio.</span></span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        otc_products_uuid: Uuid of the otc products.</span></span>
<span id="cb3-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-40">    mock_preparation(</span>
<span id="cb3-41">        MockObject.PORTFOLIO,</span>
<span id="cb3-42">        portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_name,</span>
<span id="cb3-43">        otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_products_uuid,</span>
<span id="cb3-44">    )</span>
<span id="cb3-45">    portfolio_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.PORTFOLIO)</span>
<span id="cb3-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span> portfolio_uuid</span>
<span id="cb3-47">    mock_clean_up(portfolio_uuid)</span></code></pre></div>
</div>
</section>
<section id="analysis-results" class="level3">
<h3 class="anchored" data-anchor-id="analysis-results">Analysis results</h3>
<p>No stress or complexity here, to run the analysis we need to specify which analysis to run on which portfolio.</p>
<div id="be16d4ea" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> analysis_results(</span>
<span id="cb4-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb4-5">    analysis_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb4-6">    portfolio_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb4-7">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis on a given portfolio.</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns empty dataframe.</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        analysis_uuid: Uuid of the analysis.</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        portfolio_uuid: Uuid of the portfolio.</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Running analysis </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>analysis_uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on portfolio </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>portfolio_uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.DataFrame()</span></code></pre></div>
</div>
</section>
</section>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
<p>Finally, we can run some (mock) risk analysis!</p>
<section id="using-contexts-directly" class="level3">
<h3 class="anchored" data-anchor-id="using-contexts-directly">Using contexts directly</h3>
<p>First, we use the managers directly through <code>with</code> clause, remembering the dependencies from our flow chart.</p>
<div id="7a23ac97" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">PORTFOLIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_1"</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_analysis() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis using with clauses."""</span></span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> otc_products() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> otc_uuid:</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> benchmark() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> benchmark_uuid:</span>
<span id="cb5-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> portfolio(</span>
<span id="cb5-8">                portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PORTFOLIO,</span>
<span id="cb5-9">                otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb5-10">            ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> portfolio_uuid:</span>
<span id="cb5-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> analysis(</span>
<span id="cb5-12">                    benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb5-13">                ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> analysis_uuid:</span>
<span id="cb5-14">                    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analysis_results(</span>
<span id="cb5-15">                        analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb5-16">                        portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb5-17">                    )</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results</span></code></pre></div>
</div>
<p>This is terrible! I am already getting lost, needed few tries to get it right. We ended up with <strong>6</strong> levels of indentation, the code is confusing, the flow is obtuse. Let’s run it either way, to see if at least works.</p>
<div id="cf0b1144" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> print_title(title: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Print a title padded, surrounded by dashes and empty lines."""</span></span>
<span id="cb6-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> title.center(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis."</span>)</span>
<span id="cb6-6">run_analysis()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
---------------------Running analysis.----------------------

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_efee9e27-df10-4b7a-b216-30eac8f23552'}
Preparing analysis using {'benchmark_name': 'benchmark_97535feb-98ba-4743-89df-e557bb2ec4b2'}
Running analysis analysis_eb8d3739-aa80-40b8-8625-8b007ad8cf15 on portfolio portfolio_6a74190c-e653-4026-afa1-bcacab59be81.
Cleaning up after analysis_eb8d3739-aa80-40b8-8625-8b007ad8cf15.
Cleaning up after portfolio_6a74190c-e653-4026-afa1-bcacab59be81.
Cleaning up after benchmark_97535feb-98ba-4743-89df-e557bb2ec4b2.
Cleaning up after otc_products_efee9e27-df10-4b7a-b216-30eac8f23552.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
</div>
<p>Great, the behaviour is as expected, everything is cleaned after nicely. We achieved the goal but the code is unmaintainable. Looks like a subject of the joke <em>“good code makes your job safe for a day, but terrible code in production makes it safe for a lifetime”</em>. Being reckless and with no regard to job security as we are, we’ll fix it.</p>
<p><em>I can clearly recall the most unamanagable and unreadable code I’ve seen in my career and the culprit was fired in the end. Different reasons, long time later, but still. So the joke is just a joke, don’t rely on a bad code as your job insurance.</em></p>
</section>
</section>
<section id="the-exitstack" class="level2">
<h2 class="anchored" data-anchor-id="the-exitstack">The ExitStack</h2>
<p>Here comes in the MVP — <code>ExitStack</code> from <code>contextlib</code>, made for streamlining complex context managment situationships. Conceptually it’s just a First-In-Last-Out (FILO) stack. You put CMs on top, one by one. When CM is pushed to stack, its <code>__enter__</code> method is called and you can intercept the result. ExitStack is a CM itself, it’s <code>__exit__</code> method is just calling the exits of CMs in reverse order.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    A(Enter CM A) ---&gt; B(Enter CM B)
    B ---&gt; C(Enter CM C)
    C ---&gt; D[Do stuff]
    D ---&gt; E(Exit CM C)
    E ---&gt; F(Exit CM B)
    F ---&gt; G(Exit CM A)
    A -.- G
    B -.- F
    C -.- E

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>So the flow is exactly the same as in our first attempt. Let’s try it!</p>
<div id="364e06c0" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ExitStack</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_analysis_with_exit_stack() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis using exit stack."""</span></span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ExitStack() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stack:</span>
<span id="cb8-6">        otc_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(otc_products())</span>
<span id="cb8-7">        benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(benchmark())</span>
<span id="cb8-8">        portfolio_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb8-9">            portfolio(</span>
<span id="cb8-10">                portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PORTFOLIO,</span>
<span id="cb8-11">                otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb8-12">            )</span>
<span id="cb8-13">        )</span>
<span id="cb8-14">        analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb8-15">            analysis(</span>
<span id="cb8-16">                benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb8-17">            )</span>
<span id="cb8-18">        )</span>
<span id="cb8-19">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analysis_results(</span>
<span id="cb8-20">            analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb8-21">            portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb8-22">        )</span></code></pre></div>
</div>
<p>That’s amazing (if the approach works)! In our code we end up with only single <code>with</code> clause and the outputs of CMs are defined just like the regular variables. We just need to wrap the CM calls in <code>stack.enter_context</code> method that pushes each CM to the stack.</p>
<div id="ae14d46b" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis with exit stack."</span>)</span>
<span id="cb9-2">run_analysis_with_exit_stack()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
-------------Running analysis with exit stack.--------------

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_a60a51c2-f781-4fcb-8519-45e7180d27b9'}
Preparing analysis using {'benchmark_name': 'benchmark_a48e3d24-8c6d-4a23-9d17-84336834cde1'}
Running analysis analysis_67744945-e773-47d0-b53a-09067fa2ace7 on portfolio portfolio_26e809af-3f36-485a-954f-7873629ea000.
Cleaning up after analysis_67744945-e773-47d0-b53a-09067fa2ace7.
Cleaning up after portfolio_26e809af-3f36-485a-954f-7873629ea000.
Cleaning up after benchmark_a48e3d24-8c6d-4a23-9d17-84336834cde1.
Cleaning up after otc_products_a60a51c2-f781-4fcb-8519-45e7180d27b9.</code></pre>
</div>
</div>
<p>It works as well! We also get a package of benefits for free.</p>
<section id="disabling-the-clean-up" class="level3">
<h3 class="anchored" data-anchor-id="disabling-the-clean-up">Disabling the clean up</h3>
<p>Working with API is tricky and debugging could be a painful experience. If we notice something iffy with the results we are reciving, it could be due to a bug at any of the stages. In such case disabling the artifact clean up and examining them is a good way to investigate. How do we do that? Comment out the exit code in our resource CMs? Nope, now we know better. With exit stack approach we just need to clean up the stack before exiting its context.</p>
<div id="50de0a90" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_analysis_with_exit_stack(</span>
<span id="cb11-2">    clean_up: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-3">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis using exit stack.</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clean_up: Whether to clean up after the objects.</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-9"></span>
<span id="cb11-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ExitStack() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stack:</span>
<span id="cb11-11">        otc_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(otc_products())</span>
<span id="cb11-12">        benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(benchmark())</span>
<span id="cb11-13">        portfolio_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb11-14">            portfolio(</span>
<span id="cb11-15">                portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PORTFOLIO,</span>
<span id="cb11-16">                otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb11-17">            )</span>
<span id="cb11-18">        )</span>
<span id="cb11-19">        analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb11-20">            analysis(</span>
<span id="cb11-21">                benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb11-22">            )</span>
<span id="cb11-23">        )</span>
<span id="cb11-24">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analysis_results(</span>
<span id="cb11-25">            analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb11-26">            portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb11-27">        )</span>
<span id="cb11-28"></span>
<span id="cb11-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> clean_up:</span>
<span id="cb11-30">            _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.pop_all()</span>
<span id="cb11-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results</span></code></pre></div>
</div>
<p>The <code>_ = some_function()</code> is a Pythonic way of disregarding outputs of <code>some_function</code>. Method <code>pop_all</code> actually moves the stack contents to a new stack, but we don’t care about that. We just want to get rid of them from our current one.</p>
<div id="819d11f9" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis with exit stack and no clean up."</span>)</span>
<span id="cb12-2">run_analysis_with_exit_stack(clean_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
-----Running analysis with exit stack and no clean up.------

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_c75232c1-3926-40d5-a78d-3955cb30c636'}
Preparing analysis using {'benchmark_name': 'benchmark_92a42f15-910d-416d-b5b5-635613b7e52d'}
Running analysis analysis_caa32677-722e-4899-9ea1-77896be0e45a on portfolio portfolio_ee4f418d-6e3c-46a8-922a-a024eb403d52.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="32">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
</div>
</section>
<section id="multiple-portfolios" class="level3">
<h3 class="anchored" data-anchor-id="multiple-portfolios">Multiple portfolios</h3>
<p>Benefit #2 — what do we do if we have multiple managers and many portfolios to re-run for? Or — outside of the example scope — we want to held multiple files open at the same time? Easy, we just push to the stack in a loop or a list comprehension.</p>
<div id="bf658f3c" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">PORTFOLIOS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_3"</span>]</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_analysis_with_exit_stack(clean_up: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb14-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis for multiple portfolios using exit stack.</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clean_up: Whether to clean up after the objects.</span></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> ExitStack() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stack:</span>
<span id="cb14-10">        otc_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(otc_products())</span>
<span id="cb14-11">        benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(benchmark())</span>
<span id="cb14-12">        portfolio_uuids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-13">            stack.enter_context(</span>
<span id="cb14-14">                portfolio(</span>
<span id="cb14-15">                    portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_name,</span>
<span id="cb14-16">                    otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb14-17">                )</span>
<span id="cb14-18">            )</span>
<span id="cb14-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> portfolio_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> PORTFOLIOS</span>
<span id="cb14-20">        ]</span>
<span id="cb14-21">        analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb14-22">            analysis(</span>
<span id="cb14-23">                benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb14-24">            )</span>
<span id="cb14-25">        )</span>
<span id="cb14-26">        result_parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-27">            analysis_results(</span>
<span id="cb14-28">                analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb14-29">                portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb14-30">            )</span>
<span id="cb14-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> portfolio_uuid <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> portfolio_uuids</span>
<span id="cb14-32">        ]</span>
<span id="cb14-33">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(result_parts)</span>
<span id="cb14-34"></span>
<span id="cb14-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> clean_up:</span>
<span id="cb14-36">            _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.pop_all()</span>
<span id="cb14-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results</span>
<span id="cb14-38"></span>
<span id="cb14-39">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis with exit stack on multiple portfolios."</span>)</span>
<span id="cb14-40">run_analysis_with_exit_stack(clean_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
--Running analysis with exit stack on multiple portfolios.--

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_7af52ed6-6dec-4df1-a6f0-793bb238df4f'}
Preparing portfolio using {'portfolio_name': 'portfolio_2', 'otc_products_uuid': 'otc_products_7af52ed6-6dec-4df1-a6f0-793bb238df4f'}
Preparing portfolio using {'portfolio_name': 'portfolio_3', 'otc_products_uuid': 'otc_products_7af52ed6-6dec-4df1-a6f0-793bb238df4f'}
Preparing analysis using {'benchmark_name': 'benchmark_c0c5e514-a2ba-46c9-874e-dcf2f26185d5'}
Running analysis analysis_5f57869b-acc5-4dad-9149-a81ad387c6e1 on portfolio portfolio_f75c0169-0836-481d-9d7a-0d81b2e2e40f.
Running analysis analysis_5f57869b-acc5-4dad-9149-a81ad387c6e1 on portfolio portfolio_bfc180f6-66bf-471d-9f3e-5724bc29869d.
Running analysis analysis_5f57869b-acc5-4dad-9149-a81ad387c6e1 on portfolio portfolio_7a0b68ba-e847-4c26-8861-a6ede738d4b2.
Cleaning up after analysis_5f57869b-acc5-4dad-9149-a81ad387c6e1.
Cleaning up after portfolio_7a0b68ba-e847-4c26-8861-a6ede738d4b2.
Cleaning up after portfolio_bfc180f6-66bf-471d-9f3e-5724bc29869d.
Cleaning up after portfolio_f75c0169-0836-481d-9d7a-0d81b2e2e40f.
Cleaning up after benchmark_c0c5e514-a2ba-46c9-874e-dcf2f26185d5.
Cleaning up after otc_products_7af52ed6-6dec-4df1-a6f0-793bb238df4f.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="33">
<div>
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Today we’ve learnt a new Python tool and seen an example of how quantitative developer might set up risk reporting job on vendor RMS. Sound like a very niche and unlikely situation for you? Maybe. But the moral here is to go and explore the Python standard library. Without using any additional packages we improved readability and flexibility of our initial attempt. Python really has <em>‘batteries included’</em>, <a href="https://docs.python.org/3/library/index.html">see</a> for yourself!</p>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Pythonic Distractions</category>
  <category>Context Managers</category>
  <guid>https://bwrob.github.io/posts/240512_exit_stack/</guid>
  <pubDate>Sat, 11 May 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/240512_exit_stack/python_mug.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Strategies for Numerical Integration</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/240426_strategy_integration/</link>
  <description><![CDATA[ 





<section id="numerical-integration" class="level2">
<h2 class="anchored" data-anchor-id="numerical-integration">Numerical integration</h2>
<p>Calculation of many financial methods or metrics relies on a mathematical tool called numerical integration. In simple terms, numerical integration takes a function that represents a continuous process (like the changing value of an investment over time) and approximates the area under its curve. This area can then be used to calculate important quantities, like the total return of the investment or price of a derivative instrument.</p>
<p>So we are tasked with a problem, and one that has many different ways of solving, or rather approximating the solution. You most likely (taking into account you’re still reading this) encountered rectangle rule, or Riemann summation in your Calculus 101 course/self-learning. But there are many other techniques, which we call schemes.</p>
<p>For quantitative analysts, the choice of the integration method matters. Different integration schemes offer varying levels of accuracy and efficiency. Unfortunately there’s no <em>best technique</em>. Same algorithm can be a perfect fit for problems with certain characteristics, but unusable for others. And then there is the old as time performance vs.&nbsp;accuracy trade-off.</p>
<p>As programmers working in finance, we need to be adaptable and leverage solutions that allow us to switch between these methods seamlessly.</p>
</section>
<section id="design-patterns" class="level2">
<h2 class="anchored" data-anchor-id="design-patterns">Design patterns</h2>
<p>This is where design patterns come in. Design patterns are reusable solutions to common programming problems. Their widespread adoption in software development is largely attributed to the publication of <a href="https://www.oreilly.com/library/view/design-patterns-elements/0201633612/">Design Patterns: Elements of Reusable Object-Oriented Software</a> in 1994. Authored by E. Gamma, R. Helm, R. Johnson, and J. Vlissides (often referred to as the “Gang of Four” or GoF), this book cataloged 23 essential software design patterns. These patterns provided solutions to common design problems in object-oriented programming, promoting code reusability, maintainability, and flexibility.</p>
<p>Some design patterns can feel clunky or inelegant when implemented in Python. The language itself often has built-in features or idioms that achieve the same result in a more Pythonic way (meaning it follows Python’s style and conventions). Sometimes, design patterns can be seen as overcomplicating simple problems. On the other hand, usage of well-known and understood patterns may enhance your engineering skills and improve code readability.</p>
<p>Ultimately, the decision of whether or not to use design patterns in Python depends on the specific context of your project and your coding style. There’s no right or wrong answer. But first, you need to know the classics to diss the classics. We’ll hold on with the dissing for now, cause in the example below chosen design pattern makes for a very clean implementation. You’ll see for yourself.</p>
</section>
<section id="strategy-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strategy-pattern">Strategy pattern</h2>
<p>We know the stage now — one problem statement, multiple strategies to tackle. Important observation here is that we don’t actually care which one is used. When you substitute the integral value to client code — a formula or further algorithm — it’s irrelevant how it was computed, as long its correct to required level of accuracy. This means that the problem should be decoupled from algorithms to solve it. We should target a implementation where you can state a problem <em>Calculate the integral of</em> <img src="https://latex.codecogs.com/png.latex?%5Csin(x)"> <em>from</em> <img src="https://latex.codecogs.com/png.latex?0"> <em>to</em> <img src="https://latex.codecogs.com/png.latex?%5Cpi"> and then just throw different algorithms at it to obtain a solution. So let’s get coding!</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I will show you this pattern through an example. If you prefer more generic setup see Refactoring Guru’s <a href="https://refactoring.guru/design-patterns/strategy/python/example">implementation</a>. The customary ‘software engineering’ example used to present the SDP is sorting a list of integers using different sorting algorithms.</p>
</div>
</div>
</section>
<section id="abstract-schema" class="level2">
<h2 class="anchored" data-anchor-id="abstract-schema">Abstract schema</h2>
<p>Each scheme that we’d come up with, even the most complex ones, would have the same main purpose — ‘integrate’. To make the implementation for it, we create a template class that all concrete schemes will inherit from.</p>
<div id="97cdee87" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> abc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ABC, abstractmethod</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> IntegrationScheme(ABC):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Abstract base class for integration schemas."""</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@abstractmethod</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> integrate(</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb1-10">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb1-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb1-12">        start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb1-13">        end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb1-14">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb1-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Abstract method for integrating a function."""</span></span></code></pre></div>
</div>
<p>Unpacking this, we already used some nifty Pythonic tricks in those few lines:</p>
<ul>
<li><code>ABC</code> is a way of defining abstract classes. If you try to create an object of a class inheriting from <code>ABC</code> you’d get an error. It is used as a base class for concrete subclasses and serves as a template. Think of an example of <em>animal</em> and <em>cat</em> from the real world. You’ve never seen an abstract animal being in your life (that would be a truly transcendental experience). But you’ve hopefully seen many cats.</li>
<li>Decorator <code>@abstractmethod</code> signifies that the method is just a mock-up. It needs to be present and overridden in all concrete classes that inherit from <code>IntegrationScheme</code></li>
<li>Type annotations like <code>start: float</code> don’t affect the script behavior in any way. Those are only for us to not get lost in Python’s dynamic typing magic. They can also be leveraged by static type checkers like <a href="https://mypy.readthedocs.io/en/stable/#">mypy</a> to flag problems with your code before you run it — just like in compiled languages.</li>
<li><code>Callable</code> annotation signifies a function-like object something you can <em>call</em> through <code>()</code>, like <code>some_func(one, second=two)</code>’ — here <code>some_func</code> is a callable. Calls to an object can be implemented by writing the <code>__call__</code> method for the class.</li>
</ul>
</section>
<section id="concrete-schema-implementations" class="level2">
<h2 class="anchored" data-anchor-id="concrete-schema-implementations">Concrete schema implementations</h2>
<section id="rectangle-rule" class="level3">
<h3 class="anchored" data-anchor-id="rectangle-rule">Rectangle Rule</h3>
<p>It’s the simplest way of estimating the area under a curve you can think of — cover it with smaller and smaller rectangles with the value of a function at the leftmost point as height constant width.</p>
<p><a href="https://en.wikipedia.org/wiki/File:Rectangle_rule.gif"><img src="https://bwrob.github.io/posts/240426_strategy_integration/Rectangle_rule.gif" class="img-fluid" style="width:100.0%"></a></p>
<p>Implementing this idea is trivial when using <a href="https://numpy.org/">numpy</a>, but let’s add some syntactic sugar so the class is sweeter to work with.</p>
<div id="ad3cba7f" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RectangleScheme(IntegrationScheme):</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Schema for rectangle integration."""</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb2-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-8">        steps: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="cb2-9">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initializes the rectangle integration config."""</span></span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Steps must be greater than 0."</span>)</span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> steps</span>
<span id="cb2-14"></span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb2-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the string representation of the schema."""</span></span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Rectangle schema with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> steps"</span></span>
<span id="cb2-18"></span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> integrate(</span>
<span id="cb2-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-21">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb2-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb2-23">        start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb2-24">        end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb2-25">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb2-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Integrates a function using rectangle integration."""</span></span>
<span id="cb2-27">        x_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._steps)</span>
<span id="cb2-28">        values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> integrand(x_points)</span>
<span id="cb2-29">        dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.float64(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._steps)</span>
<span id="cb2-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx</span></code></pre></div>
</div>
<ul>
<li><code>RectangleScheme</code> subclasses <code>IntegrationScheme</code> so we need to implement the <code>integrate</code> method.</li>
<li><code>__init__</code> method is run each time object of this class is requested. It sets the stage — in this case all we need is the number of rectangles we are to use. To be cautious, we check if the <code>steps</code> number is positive.</li>
<li><code>__str__</code> is called when we try to represent the object as string — ex. in f-strings or directly calling <code>str()</code>. We just taught our class objects to introduce themselves nicely.</li>
<li><code>integrate</code> is as simple as the idea behind it:
<ul>
<li>get the equaly spaced x values,</li>
<li>calculate <code>integrand</code> values at the points,</li>
<li>sum it up,</li>
<li>multiply the sum by the distance between two consecutive points.</li>
</ul></li>
</ul>
</section>
<section id="simple-monte-carlo" class="level3">
<h3 class="anchored" data-anchor-id="simple-monte-carlo">Simple Monte Carlo</h3>
<p>This guy sounds fancy with its luxurious Monaco vibes, but it’s just a peasant in a nice suit. Instead of looking at equaly-spaced points, we shuffle them from uniform distribution on the interval of integration. We calculate the integrand function values at those points and sum them up. Then multiply the sum by the average distance between points and through the magic of probability theory (and not opening actual probability textbook in 10 years) you get a good probabilistic estimator of the integral value. The implementation is analogous to the <code>RectangleScheme</code>.</p>
<div id="99a7e241" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Optional</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MonteCarloScheme(IntegrationScheme):</span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Schema for Monte Carlo integration."""</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb3-8">        random_points: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="cb3-9">        random_seed: Optional[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb3-10">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initializes the rectangle integration config."""</span></span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> random_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Points must be greater than 0."</span>)</span>
<span id="cb3-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_points</span>
<span id="cb3-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_seed</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb3-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the string representation of the schema."""</span></span>
<span id="cb3-19">        points_msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Monte Carlo schema with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__random_points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> random points"</span></span>
<span id="cb3-20">        seed_msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" and seed </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__random_seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_seed <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>points_msg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>seed_msg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> integrate(</span>
<span id="cb3-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb3-25">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb3-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb3-27">        start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb3-28">        end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb3-29">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb3-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Integrates a function using Monte Carlo integration."""</span></span>
<span id="cb3-31">        np.random.seed(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_seed)</span>
<span id="cb3-32">        x_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(start, end, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_points)</span>
<span id="cb3-33">        values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> integrand(x_points)</span>
<span id="cb3-34">        average_dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.float64(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_points)</span>
<span id="cb3-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> average_dx</span></code></pre></div>
</div>
<ul>
<li><code>Optional[int]</code> annotation means that the value of <code>random_seed</code> can be a <code>float</code> or <code>None</code>. With a set seed we get a reproducable results — good for testing but not for actual usage. Hence the default value here is <code>None</code>.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>Optional</code> stands for <em>could be <code>None</code> as well</em>, it doesn’t affect if the input is mandatory or not. In our case it’s not, but thats stated by the <code>= None</code> part. In Python 3.11 onwards it’s recommended to use <code>int | None</code> instead.</p>
</div>
</div>
</section>
</section>
<section id="integrator" class="level2">
<h2 class="anchored" data-anchor-id="integrator">Integrator</h2>
<p>What’s left is to have a way of defining the problem to solve and define how our schemes (strategies) interact with it.</p>
<div id="3e58e962" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""An integrator class that allows to perform integration using different schemas."""</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Integrator:</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""An integrator class that allows to perform integration using different</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    schemas as strategies."""</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb4-10">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb4-11">        interval_start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb4-12">        interval_end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb4-13">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initializes the integrator class."""</span></span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> interval_end:</span>
<span id="cb4-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start value must be less than end value."</span>)</span>
<span id="cb4-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__integrand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> integrand</span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_start</span>
<span id="cb4-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_end</span>
<span id="cb4-20"></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(</span>
<span id="cb4-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb4-23">        schema: IntegrationScheme,</span>
<span id="cb4-24">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb4-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Calculates the definite integral value of a function.</span></span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb4-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            schema: integration schema</span></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-31">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>schema<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb4-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> schema.integrate(</span>
<span id="cb4-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__integrand,</span>
<span id="cb4-34">            start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_start,</span>
<span id="cb4-35">            end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_end,</span>
<span id="cb4-36">        )</span></code></pre></div>
</div>
<ul>
<li>The <code>__init__</code> takes in the obvious parameters — function to integrate, start and end of the interval. It also checks if it’s a proper integral.</li>
<li>We get to implement our own <code>__call__</code> method now. It’s clear what <code>Integrator</code> class does. No need to have a method with a descriptive name like <code>Integrator.integrate</code>. To use it you pass through the integration scheme into the integrator — notice annotation of the abstract <code>IntegrationScheme</code>. It prints the info on strategy used (using the <code>__str__</code> methods) and calls <code>integrate</code> method of the scheme. No care in the world on how the value is actually calculated.</li>
</ul>
</section>
<section id="lets-integrate" class="level2">
<h2 class="anchored" data-anchor-id="lets-integrate">Let’s integrate!</h2>
<p>Ok, now to the integrating! Let’s set up the stage:</p>
<div id="acb771de" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">start, end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.sin(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.cos(x)</span></code></pre></div>
</div>
<p>Excited? Don’t be… yet.</p>
<p>We should get some benchmark value first. As none of us would bother to integrate this by hand, we’ll use SciPy. Unexpectedly (SciPy uses C and Fortran underneath), we get the result in a breeze and it is very close to <a href="https://www.wolframalpha.com/input?i=integrate+sin%28x%29+%2B+cos%28x%29+over+0+to+pi%2F2">actual value of 2.0</a>.</p>
<div id="4798c2bb" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.integrate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> quad</span>
<span id="cb6-2"></span>
<span id="cb6-3">scipy_quad, err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad(f, start, end)</span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(scipy_quad)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.9999999999999998</code></pre>
</div>
</div>
<p>Now let’s use our <code>Integrator</code> class and see.</p>
<div id="179a414d" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">integrator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Integrator(</span>
<span id="cb8-2">    f,</span>
<span id="cb8-3">    interval_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>start,</span>
<span id="cb8-4">    interval_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>end,</span>
<span id="cb8-5">)</span>
<span id="cb8-6"></span>
<span id="cb8-7">iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb8-8">rectangle_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [integrator(RectangleScheme(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> iterations]</span>
<span id="cb8-9">mc_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [integrator(MonteCarloScheme(random_points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> iterations]</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Rectangle schema results:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rectangle_results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb8-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Monte Carlo schema results:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mc_results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Rectangle schema with 1 steps.
Using Rectangle schema with 32 steps.
Using Rectangle schema with 1024 steps.
Using Rectangle schema with 32768 steps.
Using Rectangle schema with 1048576 steps.
Using Monte Carlo schema with 1 random points.
Using Monte Carlo schema with 32 random points.
Using Monte Carlo schema with 1024 random points.
Using Monte Carlo schema with 32768 random points.
Using Monte Carlo schema with 1048576 random points.
Rectangle schema results:
[1.5707963267948966, 1.986172817555692, 1.9995804632216618, 1.9999869013603688, 1.9999995906791057].
Monte Carlo schema results:
[2.213767303125614, 1.9696661792974728, 1.986878631098522, 2.001129346968637, 1.9996841123631968].</code></pre>
</div>
</div>
<p>The performance and convergence of those schemes is terrible. Like anything in Python, if you want robust and performing code, you need to implement it with C or use any/all of the enhancement frameworks that Python provides (see Numba). Additionally, the simple methods we implemented are very naive. The standard numerical packages use sophisticated algorithms honed for many decades.</p>
<p>But I was wrong! You <em>should</em> be excited! We just learned new approach for setting up extensible and readable code! Look how cleanly the problem statement is separated form different strategies to solve it.</p>
<p>If you are now wondering how much we could improve by using more advanced techniques (like <a href="http://proceedings.mlr.press/v28/carpentier13.pdf">stratified Monte Carlo</a> or <a href="https://www.wikiwand.com/en/Adaptive_quadrature">adaptive quadrature</a>) you just need to implement new subclass of `IntegrationSchema’ and you’re done. No changes to the existing code are needed, just simple extension. And that’s the idea behind strategy pattern.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the whole code <a href="integration.py">here</a>.</p>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Pythonic Distractions</category>
  <category>Design Patterns</category>
  <guid>https://bwrob.github.io/posts/240426_strategy_integration/</guid>
  <pubDate>Sat, 27 Apr 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/240426_welcome/</link>
  <description><![CDATA[ 





<p>This is the first post in the bwrob blog. Welcome!</p>
<p>This blog is a battleground of sorts, but instead of swords and shields, we wield the weapons of Python and C++. I’m a mathematician turned quantitative analyst turned software engineer. You can expect high standard deviation of topics here.</p>
<p>Here, I’ll document my coding conquests, from building practical and impractical tools, exploring financial concepts, to playing around with physics simulations.</p>
<p>Expect a healthy dose of humor alongside the technical discussions. Let’s be honest, even the most complex problems are more enjoyable with a sprinkle of laughter. So, grab a cup of coffee and join me on this exploration – even if it’s just for one interested reader!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>News</category>
  <guid>https://bwrob.github.io/posts/240426_welcome/</guid>
  <pubDate>Mon, 22 Apr 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/240426_welcome/python_mug.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
