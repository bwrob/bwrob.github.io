---
title: "Wstęp do programowania (Zima 2024/2025)"

toc: true
toc-depth: 3
toc-expand: true

about:
  template: marquee
---

## Informacje ogólne

Zasady zaliczenia na [stronie kursu u wykładowcy](https://alfa.im.pwr.edu.pl/~giniew/doku.php?id=rok2425:zimowy:wdp).

Dodatkowe zasady moich grup lablatorialnych:

- *Listy zadań* - co najmniej pierwsze 4 listy będziemy robić na zajęciach, w systemie deklaracyjnym. Po zajęciach proszę o przesłanie rozwiązań. Kolejne listy zadań będą w formie zadań domowych, do zrobienia i przesłania przed zajęciami. Rozwiązania będą omiawiane i wyrywkowo sprawdzane w trakcie zajęć.
- *Odpowiedź ustna* - od 7-mych zajęć można zgłaszać się na ochotnika, co najmniej 3 ochotników jest wymaganych na jednych zajęciach.
- *Projekt grupowy* - można się łączyć w grupy w obrębie moich 2 grup, ale nie poza. Zakładam 5-8 grup.
- *Aktywność* - punkty zostaną przydzielone na zasadzie normalizacji aktywności na zajęciach. Gwarantuję, że jedna *duża* aktywność (np. przedstawienie pełnego rozwiązania z listy) będzie dawała co najmniej jeden punkt.

## Notki z zajęć

### Rozważania wstępne

1. Po co matematykowi komputer?
2. Co i dlaczego będzie na kursie?
3. Organizacja pracy i zasady zaliczenia.
4. Czym jest język programowania?
5. Charakterystyka języka Python.
6. Środowisko programistyczne Jupyter Notebook.
7. Podstawy języka znacznikowego Markdown.

#### Przykłady zeszytów Jupyter

Przykłady ilustrujące wachlarz możliwości zeszytów Jupyter i Markdown w zastosowaniach matematycznych.
Wymagają one osobnych ustawień środowiska programistycznego i zewnętrznych narzędzi.
Polecam zapoznanie się z nimi czysto ilustracyjnie jako motywacja do nauki.

- Wizualizacja [zbioru Mandelbrota](https://www.wikiwand.com/pl/articles/Zbi%C3%B3r_Mandelbrota) obliczana na karcie graficznej - [link](https://github.com/bwrob/bwrob.github.io/tree/main/pages/notebooks/mandebrot.ipynb)
- Pobieranie i analiza danych o cenie akcji spółki giełdowej - [link](https://github.com/bwrob/bwrob.github.io/tree/main/pages/notebooks/cd_projekt_red.ipynb)
- Numeryczne rozwiązanie [równań różniczkowych cząstkowych](https://www.wikiwand.com/pl/articles/R%C3%B3wnanie_r%C3%B3%C5%BCniczkowe_cz%C4%85stkowe) - [link](https://github.com/jorgensd/dolfinx-tutorial/blob/main/chapter1/fundamentals_code.ipynb)
- Rozwiązania zadań z podstaw [algebry liniowej](https://www.wikiwand.com/pl/articles/Algebra_liniowa) - [link](https://github.com/weijie-chen/Linear-Algebra-With-Python/blob/master/notebooks/Chapter%201%20-%20Linear%20Equation%20System.ipynb)
- Cała obecna strona została utworzona z wykorzystaniem Markdownu i Pythona korzystając z technologii Quarto - [link](https://quarto.org/)

#### Python lista 1

[link](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_1.ipynb)

- Zamiast
  ```{python}
  import math
  pole = math.pi * 10**2
  ```
  warto użyć
  ```{python}
  from math import pi
  pole = pi * 10**2
  ```
  Zmniejszamy ilość pisania przy wielokrotnym użyciu, a sam import jest wydajniejszy co może mieć znaczenie przy bardziej zaawansowanych zadaniach.

- Funkcje pierwiastka kwadratowego i podnoszenia do potęgi $1/2$ są oczywiście równoważne, natomiast polecana jest `math.sqrt`. Mniej ogólne algorytmy są zazwyczaj lepiej zoptymalizowane (przy naszych zastosowaniach nie ma to jednak znaczenia).
  ```{python}
  from math import sqrt
  x = 2
  y = sqrt(x)
  z = x**0.5
  print(y, z, y == z)
  ```

- Do *zadania 6* jeszcze wrócimy po funkcjach i pętlach aby zaimplemetować dużo czytelniejsze rozwiązanie.
