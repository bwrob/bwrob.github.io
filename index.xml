<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>bwrob blog</title>
<link>https://bwrob.github.io/</link>
<atom:link href="https://bwrob.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>bwrob personal and professional blog</description>
<image>
<url>https://bwrob.github.io/logo/python_mug.png</url>
<title>bwrob blog</title>
<link>https://bwrob.github.io/</link>
<height>144</height>
<width>144</width>
</image>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Fri, 21 Mar 2025 23:00:00 GMT</lastBuildDate>
<item>
  <title>Mathematician in the financial markets (PL)</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/mathematician-in-finance/</link>
  <description><![CDATA[ 






<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bwrob.github.io/posts/mathematician-in-finance/financial_whirlpool.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This post accompanies a lecture I delivered at the University of Wroclaw on career planning for mathematicians. It explores the skills, roles, and opportunities in the financial industry, highlighting how mathematical expertise can be applied to areas like risk management, quantitative analysis, and algorithmic trading.</p>
</section>
<section id="rynki-finansowe" class="level2">
<h2 class="anchored" data-anchor-id="rynki-finansowe">Rynki Finansowe</h2>
<p>Rynki finansowe to złożone ekosystemy, w których handluje się aktywami, takimi jak akcje, obligacje i instrumenty pochodne. Rynki te ułatwiają przepływ kapitału między inwestorami a przedsiębiorstwami, napędzając wzrost gospodarczy. Pozwalają takze na transfer już istniejącego ryzyka finansowego.</p>
<p>Charakteryzują się:</p>
<ul>
<li>Ciągłymi zmianami i zmiennością.</li>
<li>Ogromnymi wolumenami danych.</li>
<li>Wzajemnymi powiązaniami globalnych gospodarek.</li>
<li>Potrzebą precyzyjnej wyceny i oceny ryzyka.</li>
</ul>
<p>Główne postaci na parkietach rynkiowych:</p>
<ul>
<li><strong>Spekulant:</strong>
<ul>
<li>Cel: Zysk z przewidywania zmian cen.</li>
<li>Działanie: Kupno/sprzedaż z ryzykiem.</li>
<li>Znaczenie: Płynność, zmienność.</li>
</ul></li>
<li><strong>Arbitrażysta:</strong>
<ul>
<li>Cel: Zysk bez ryzyka z różnic cen.</li>
<li>Działanie: Szybkie transakcje wykorzystujące niespójności.</li>
<li>Znaczenie: Efektywność rynków.</li>
</ul></li>
<li><strong>Hedger:</strong>
<ul>
<li>Cel: Zmniejszenie ryzyka.</li>
<li>Działanie: Zabezpieczanie się instrumentami finansowymi.</li>
<li>Znaczenie: Stabilność rynków.</li>
</ul></li>
<li><strong>Pośrednik:</strong>
<ul>
<li>Cel: Ułatwienie transakcji.</li>
<li>Działanie: Łączenie kupujących i sprzedających.</li>
<li>Znaczenie: Płynność, dostęp do rynków.</li>
</ul></li>
</ul>
</section>
<section id="rola-matematyków" class="level2">
<h2 class="anchored" data-anchor-id="rola-matematyków">Rola Matematyków</h2>
<ul>
<li><strong>Modelowanie niepewności:</strong>
<ul>
<li>Rynki finansowe charakteryzują się inherentną niepewnością.</li>
<li>Matematycy wykorzystują zaawansowane narzędzia rachunku prawdopodobieństwa i statystyki do modelowania oraz kwantyfikacji tej niepewności, co umożliwia efektywne zarządzanie ryzykiem.</li>
</ul></li>
<li><strong>Precyzyjna wycena instrumentów finansowych:</strong>
<ul>
<li>Wycena instrumentów finansowych, w szczególności instrumentów pochodnych, wymaga stosowania złożonych modeli matematycznych.</li>
<li>Rachunek stochastyczny, równania różniczkowe cząstkowe oraz metody numeryczne stanowią fundamentalne narzędzia w tym procesie.</li>
</ul></li>
<li><strong>Zarządzanie ryzykiem finansowym:</strong>
<ul>
<li>Matematycy opracowują zaawansowane modele służące do pomiaru i zarządzania różnorodnymi rodzajami ryzyka finansowego, w tym ryzykiem rynkowym, kredytowym oraz operacyjnym.</li>
<li>Zapewnia to stabilność i odporność instytucji finansowych na potencjalne wstrząsy.</li>
</ul></li>
<li><strong>Handel algorytmiczny:</strong>
<ul>
<li>Handel wysokiej częstotliwości oraz inne strategie algorytmiczne opierają się na optymalizacji matematycznej i analizie statystycznej w celu identyfikacji i wykorzystania możliwości rynkowych.</li>
</ul></li>
<li><strong>Analiza danych finansowych:</strong>
<ul>
<li>Analiza i interpretacja ogromnych zbiorów danych finansowych wymaga zastosowania zaawansowanych technik matematycznych i statystycznych.</li>
<li>Matematycy posiadają kompetencje w zakresie ekstrakcji istotnych informacji ze złożonych zbiorów danych.</li>
</ul></li>
<li><strong>Optymalizacja portfela inwestycyjnego:</strong>
<ul>
<li>Optymalizacja portfela inwestycyjnego oraz inne problemy finansowe wymagają znalezienia optymalnych rozwiązań przy uwzględnieniu określonych ograniczeń.</li>
<li>Techniki optymalizacji matematycznej mają kluczowe znaczenie w osiąganiu pożądanych wyników.</li>
</ul></li>
<li><strong>Zgodność z regulacjami prawnymi:</strong>
<ul>
<li>Przepisy regulujące sektor finansowy wymagają rygorystycznej analizy ilościowej oraz walidacji modeli.</li>
<li>Matematycy odgrywają istotną rolę w zapewnieniu zgodności instytucji finansowych z obowiązującymi regulacjami. zgodności z tymi przepisami.</li>
</ul></li>
</ul>
</section>
<section id="rodzaje-analityków-ilościowych" class="level2">
<h2 class="anchored" data-anchor-id="rodzaje-analityków-ilościowych">Rodzaje analityków ilościowych</h2>
<div id="efe9a465" class="cell" data-collapse="true" data-execution_count="1">
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Front Office Quant</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Market Risk Quant</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-3" aria-controls="tabset-1-3" aria-selected="false">Credit Risk Quant</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-4" aria-controls="tabset-1-4" aria-selected="false">Validation Quant</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-5-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-5" aria-controls="tabset-1-5" aria-selected="false">Quant Researcher</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-6-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-6" aria-controls="tabset-1-6" aria-selected="false">Algorithmic Trader</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-7-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-7" aria-controls="tabset-1-7" aria-selected="false">Quant Developer</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<p>Opracowuje i stosuje modele ilościowe do wyceny, zarządzania ryzykiem i strategii handlowych w dziale transakcyjnym instytucji finansowej.</p>
        <script type="text/javascript">
        window.PlotlyConfig = {MathJaxConfig: 'local'};
        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}
        </script>
        <script type="module">import "https://cdn.plot.ly/plotly-3.0.1.min"</script>
        
<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-3.0.1.min.js"></script>                <div id="115048d8-07dc-4d30-b701-09deacfcb351" class="plotly-graph-div" style="height:525px; width:600px;"></div>            <script type="text/javascript">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById("115048d8-07dc-4d30-b701-09deacfcb351")) {                    Plotly.newPlot(                        "115048d8-07dc-4d30-b701-09deacfcb351",                        [{"orientation":"h","x":[0,1,3,0,0,0,3,0,0,3,1,0,1],"y":["Zarz\u0105dzanie Danymi","Wiedza Regulacyjna","Wiedza Finansowa","Walidacja Modeli","Uczenie Statystyczne","Projektowanie Algorytm\u00f3w","Programowanie","Modelowanie Ryzyka","Mikrostruktura Rynku","Matematyka Finansowa","In\u017cynieria Oprogramowania","Eksploracja Danych","Analiza Danych"],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermap":[{"type":"scattermap","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"},"margin":{"b":0,"l":0,"r":0,"t":30}}},"xaxis":{"showgrid":false,"tickmode":"linear","tick0":0,"dtick":1},"title":{"text":"Skill Levels - Front Office Quant"},"width":600},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('115048d8-07dc-4d30-b701-09deacfcb351');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };            </script>        </div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<p>Opracowuje i waliduje modele do pomiaru i zarządzania ryzykiem rynkowym, zapewniając zgodność z wymogami regulacyjnymi.</p>
<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-3.0.1.min.js"></script>                <div id="0c305d1d-a589-48dc-bb7c-877bad2eeaa9" class="plotly-graph-div" style="height:525px; width:600px;"></div>            <script type="text/javascript">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById("0c305d1d-a589-48dc-bb7c-877bad2eeaa9")) {                    Plotly.newPlot(                        "0c305d1d-a589-48dc-bb7c-877bad2eeaa9",                        [{"orientation":"h","x":[0,2,2,0,0,0,2,3,0,2,0,0,1],"y":["Zarz\u0105dzanie Danymi","Wiedza Regulacyjna","Wiedza Finansowa","Walidacja Modeli","Uczenie Statystyczne","Projektowanie Algorytm\u00f3w","Programowanie","Modelowanie Ryzyka","Mikrostruktura Rynku","Matematyka Finansowa","In\u017cynieria Oprogramowania","Eksploracja Danych","Analiza Danych"],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermap":[{"type":"scattermap","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"},"margin":{"b":0,"l":0,"r":0,"t":30}}},"xaxis":{"showgrid":false,"tickmode":"linear","tick0":0,"dtick":1},"title":{"text":"Skill Levels - Market Risk Quant"},"width":600},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('0c305d1d-a589-48dc-bb7c-877bad2eeaa9');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };            </script>        </div>
</div>
<div id="tabset-1-3" class="tab-pane" aria-labelledby="tabset-1-3-tab">
<p>Opracowuje i waliduje modele do pomiaru i zarządzania ryzykiem kredytowym, oceniając prawdopodobieństwo niewypłacalności pożyczkobiorcy.</p>
<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-3.0.1.min.js"></script>                <div id="6898f78f-1df6-42ec-9693-429be4be619d" class="plotly-graph-div" style="height:525px; width:600px;"></div>            <script type="text/javascript">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById("6898f78f-1df6-42ec-9693-429be4be619d")) {                    Plotly.newPlot(                        "6898f78f-1df6-42ec-9693-429be4be619d",                        [{"orientation":"h","x":[0,0,2,0,0,0,2,3,0,3,1,0,2],"y":["Zarz\u0105dzanie Danymi","Wiedza Regulacyjna","Wiedza Finansowa","Walidacja Modeli","Uczenie Statystyczne","Projektowanie Algorytm\u00f3w","Programowanie","Modelowanie Ryzyka","Mikrostruktura Rynku","Matematyka Finansowa","In\u017cynieria Oprogramowania","Eksploracja Danych","Analiza Danych"],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermap":[{"type":"scattermap","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"},"margin":{"b":0,"l":0,"r":0,"t":30}}},"xaxis":{"showgrid":false,"tickmode":"linear","tick0":0,"dtick":1},"title":{"text":"Skill Levels - Credit Risk Quant"},"width":600},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('6898f78f-1df6-42ec-9693-429be4be619d');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };            </script>        </div>
</div>
<div id="tabset-1-4" class="tab-pane" aria-labelledby="tabset-1-4-tab">
<p>Niezależnie ocenia i waliduje modele finansowe opracowane przez innych kwantów, zapewniając ich dokładność i solidność.</p>
<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-3.0.1.min.js"></script>                <div id="a90fad7e-1c5f-48d6-bf47-7a8cb724bba0" class="plotly-graph-div" style="height:525px; width:600px;"></div>            <script type="text/javascript">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById("a90fad7e-1c5f-48d6-bf47-7a8cb724bba0")) {                    Plotly.newPlot(                        "a90fad7e-1c5f-48d6-bf47-7a8cb724bba0",                        [{"orientation":"h","x":[0,3,0,3,0,0,2,0,0,3,0,0,1],"y":["Zarz\u0105dzanie Danymi","Wiedza Regulacyjna","Wiedza Finansowa","Walidacja Modeli","Uczenie Statystyczne","Projektowanie Algorytm\u00f3w","Programowanie","Modelowanie Ryzyka","Mikrostruktura Rynku","Matematyka Finansowa","In\u017cynieria Oprogramowania","Eksploracja Danych","Analiza Danych"],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermap":[{"type":"scattermap","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"},"margin":{"b":0,"l":0,"r":0,"t":30}}},"xaxis":{"showgrid":false,"tickmode":"linear","tick0":0,"dtick":1},"title":{"text":"Skill Levels - Validation Quant"},"width":600},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('a90fad7e-1c5f-48d6-bf47-7a8cb724bba0');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };            </script>        </div>
</div>
<div id="tabset-1-5" class="tab-pane" aria-labelledby="tabset-1-5-tab">
<p>Prowadzi nowatorskie badania w dziedzinie finansów ilościowych, opracowując nowe modele i techniki handlu, zarządzania ryzykiem i wyceny aktywów.</p>
<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-3.0.1.min.js"></script>                <div id="a392c413-3f51-4dda-9a7b-4583b59ab645" class="plotly-graph-div" style="height:525px; width:600px;"></div>            <script type="text/javascript">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById("a392c413-3f51-4dda-9a7b-4583b59ab645")) {                    Plotly.newPlot(                        "a392c413-3f51-4dda-9a7b-4583b59ab645",                        [{"orientation":"h","x":[0,0,3,0,3,0,2,0,0,3,0,2,0],"y":["Zarz\u0105dzanie Danymi","Wiedza Regulacyjna","Wiedza Finansowa","Walidacja Modeli","Uczenie Statystyczne","Projektowanie Algorytm\u00f3w","Programowanie","Modelowanie Ryzyka","Mikrostruktura Rynku","Matematyka Finansowa","In\u017cynieria Oprogramowania","Eksploracja Danych","Analiza Danych"],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermap":[{"type":"scattermap","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"},"margin":{"b":0,"l":0,"r":0,"t":30}}},"xaxis":{"showgrid":false,"tickmode":"linear","tick0":0,"dtick":1},"title":{"text":"Skill Levels - Quant Researcher"},"width":600},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('a392c413-3f51-4dda-9a7b-4583b59ab645');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };            </script>        </div>
</div>
<div id="tabset-1-6" class="tab-pane" aria-labelledby="tabset-1-6-tab">
<p>Opracowuje i wdraża zautomatyzowane strategie handlowe przy użyciu modeli ilościowych i algorytmów, często koncentrując się na handlu wysokiej częstotliwości.</p>
<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-3.0.1.min.js"></script>                <div id="240f2d70-1a27-4167-a166-2e2cf18873cd" class="plotly-graph-div" style="height:525px; width:600px;"></div>            <script type="text/javascript">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById("240f2d70-1a27-4167-a166-2e2cf18873cd")) {                    Plotly.newPlot(                        "240f2d70-1a27-4167-a166-2e2cf18873cd",                        [{"orientation":"h","x":[2,0,3,0,3,0,3,0,3,0,2,2,0],"y":["Zarz\u0105dzanie Danymi","Wiedza Regulacyjna","Wiedza Finansowa","Walidacja Modeli","Uczenie Statystyczne","Projektowanie Algorytm\u00f3w","Programowanie","Modelowanie Ryzyka","Mikrostruktura Rynku","Matematyka Finansowa","In\u017cynieria Oprogramowania","Eksploracja Danych","Analiza Danych"],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermap":[{"type":"scattermap","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"},"margin":{"b":0,"l":0,"r":0,"t":30}}},"xaxis":{"showgrid":false,"tickmode":"linear","tick0":0,"dtick":1},"title":{"text":"Skill Levels - Algorithmic Trader"},"width":600},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('240f2d70-1a27-4167-a166-2e2cf18873cd');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };            </script>        </div>
</div>
<div id="tabset-1-7" class="tab-pane" aria-labelledby="tabset-1-7-tab">
<p>Projektuje i wdraża rozwiązania programowe dla systemów handlu ilościowego, platform zarządzania ryzykiem i narzędzi modelowania finansowego.</p>
<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>
        <script charset="utf-8" src="https://cdn.plot.ly/plotly-3.0.1.min.js"></script>                <div id="2df0df68-e485-4149-be2d-3d396c552aaf" class="plotly-graph-div" style="height:525px; width:600px;"></div>            <script type="text/javascript">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById("2df0df68-e485-4149-be2d-3d396c552aaf")) {                    Plotly.newPlot(                        "2df0df68-e485-4149-be2d-3d396c552aaf",                        [{"orientation":"h","x":[2,1,2,0,0,3,3,0,0,1,3,0,0],"y":["Zarz\u0105dzanie Danymi","Wiedza Regulacyjna","Wiedza Finansowa","Walidacja Modeli","Uczenie Statystyczne","Projektowanie Algorytm\u00f3w","Programowanie","Modelowanie Ryzyka","Mikrostruktura Rynku","Matematyka Finansowa","In\u017cynieria Oprogramowania","Eksploracja Danych","Analiza Danych"],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermap":[{"type":"scattermap","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"},"margin":{"b":0,"l":0,"r":0,"t":30}}},"xaxis":{"showgrid":false,"tickmode":"linear","tick0":0,"dtick":1},"title":{"text":"Skill Levels - Quant Developer"},"width":600},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('2df0df68-e485-4149-be2d-3d396c552aaf');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };            </script>        </div>
</div>
</div>
</div>
</div>
</section>
<section id="codzienne-doświadczenia-quanta" class="level2">
<h2 class="anchored" data-anchor-id="codzienne-doświadczenia-quanta">Codzienne Doświadczenia Quanta</h2>
<p>Życie analityka ilościowego wykracza daleko poza samo przetwarzanie liczb. To różnorodne połączenie wiedzy technicznej i umiejętności interpersonalnych.</p>
<ul>
<li><strong>Rozwój i Testowanie Modeli:</strong>
<ul>
<li>Znaczną część dnia poświęca się na rozwój, udoskonalanie lub testowanie modeli ilościowych.</li>
<li>Obejmuje to kodowanie, analizę statystyczną i rygorystyczne testowanie, co wymaga silnych umiejętności <strong>rozwiązywania problemów</strong> i <strong>myślenia analitycznego</strong>.</li>
</ul></li>
<li><strong>Współpraca i Komunikacja:</strong>
<ul>
<li>Quanci ściśle współpracują z traderami, menedżerami ryzyka i programistami.</li>
<li>Wyjaśnianie złożonych modeli i wyników nietechnicznym współpracownikom jest kluczowe, co podkreśla znaczenie <strong>jasnej komunikacji</strong>.</li>
<li>Praca w zespołach wymaga doskonałych umiejętności <strong>współpracy</strong>.</li>
</ul></li>
<li><strong>Rozwiązywanie Problemów pod Presją:</strong>
<ul>
<li>Rynki finansowe mogą być niestabilne, co wymaga od kwantów szybkiego dostosowywania się do zmieniających się warunków.</li>
<li>Wymaga to <strong>zdolności adaptacji</strong> i umiejętności zachowania spokoju pod presją.</li>
<li>Poziom presji znacznie różni się w zależności od stanowiska.</li>
</ul></li>
<li><strong>Ciągłe Uczenie się:</strong>
<ul>
<li>Dziedzina finansów ilościowych stale się rozwija, co wymaga od kwantów bycia na bieżąco z nowymi technikami i technologiami.</li>
<li>Zaangażowanie w <strong>całożyciowe uczenie się</strong> jest niezbędne, co może sprawić, że praca jest ciekawa.</li>
</ul></li>
<li><strong>Bycie na bieżąco</strong>
<ul>
<li>Niektóre profesje wymagają stałej znajomości przeglądu danych rynkowych, wiadomości i raportów, aby być na bieżąco z globalnymi trendami finansowymi.</li>
<li>Wymaga to <strong>dbałości o szczegóły</strong> i umiejętności szybkiego przyswajania złożonych informacji.</li>
</ul></li>
<li><strong>Zgodność z Regulacjami:</strong>
<ul>
<li>Wielu quantów spędza czas na upewnianiu się, że modele i procesy są zgodne z obowiązującymi przepisami. Wymaga to dużej <strong>dbałości o szczegóły</strong> i umiejętności rozumienia złożonych dokumentów.</li>
</ul></li>
</ul>
</section>
<section id="potencjali-pracodawcy" class="level2">
<h2 class="anchored" data-anchor-id="potencjali-pracodawcy">Potencjali pracodawcy</h2>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Wrocław</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Polska</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<ul>
<li>Allianz Deutchland (ubezpieczenia)</li>
<li>BNY Mellon</li>
<li>EY (konsulting)</li>
<li>Qube RT</li>
<li>Santander</li>
<li>UBS</li>
</ul>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<ul>
<li>Citi</li>
<li>Commerzbank</li>
<li>Goldman Sachs</li>
<li>HSBC</li>
<li>mBank</li>
<li>Natwest</li>
<li>Point 72</li>
<li>Revolut</li>
<li>Standard Chartered</li>
</ul>
</div>
</div>
</div>
</section>
<section id="przegląd-mojej-edukacji-i-kariery" class="level2">
<h2 class="anchored" data-anchor-id="przegląd-mojej-edukacji-i-kariery">Przegląd mojej edukacji i kariery</h2>
<p><a href="../../pages/resume.html">Resume</a></p>
</section>
<section id="materiały" class="level2">
<h2 class="anchored" data-anchor-id="materiały">Materiały</h2>
<section id="książki-popularne" class="level3">
<h3 class="anchored" data-anchor-id="książki-popularne">Książki popularne</h3>
<ul>
<li><a href="https://www.amazon.pl/Quants-Whizzes-Conquered-Street-Destroyed/dp/0307453383">The Quants: How a New Breed of Math Whizzes Conquered Wall Street and Nearly Destroyed It – Scott Patterson</a></li>
<li><a href="https://www.amazon.pl/Random-Walk-Down-Wall-Street/dp/0393358380/ref=sr_1_2?crid=1W4HZGGMCPXAH&amp;dib=eyJ2IjoiMSJ9.Q_in3kdh8y-uXHbz63xwv4icS1gkci0B1-6hYgi3E3SOvzab9rkMMDRfV-2R-w8nEoh5r51cbapjszbhoXftUqKflaXkDNNtOuoTnR-JjeFuXyxihtN9ZjMtkYxwegDOgH-ckqhdtv4lBqQEWVR6tbxler_okYcmpxMQQHGmVVVSI5KUWyTiYN1PlMGF7YgskPvLe7NAS92R_GpzphX4JmCxBj_XT0JOJPJKZpDviId65oCbF1wnGsuL-MtZwah_KAPYMU2gfZxuLciI_J_PRWs-OydFtvtIXnnwyBcz5w_HNBjZ4dVL-bYJmMwQJ72A.7FRbzQVSiOKe43_JVVkvE0uatJCvGY6SeP-LB7qXJk4&amp;dib_tag=se&amp;keywords=random+walk+down+wall+street&amp;qid=1743147892&amp;sprefix=random+walk+%2Caps%2C113&amp;sr=8-2">A Random Walk Down Wall Street: The Time-Tested Strategy for Successful Investing – Burton G. Malkiel</a></li>
<li><a href="https://www.amazon.pl/Money-Formula-Finance-Science-Mathematicians/dp/1119358612/ref=sr_1_1?crid=3MKWYCUO6PI73&amp;dib=eyJ2IjoiMSJ9.qjPzdto7o1HkZ5Bln3iLZaIeAPGJV2jl79qCQlTCb5x8ri5_REY4VYJm4CS5osmQNBrOvBsCpOmOvtKFhzP7JzY3OTz_Rejw_Oixb-9Ut1VrSAjkZUBuxbpxod9ZOfoTu0b7LO7XQyFFesE5BtTXGD3S6uob3JpeK84HSGDCPFbcdOxIzGvtCvJt2pGQJIa3y5MYl_GkfHRGCifiVyberYGGo5LJwzlIaZXrW4Olcww1Pp5SlOphC6ybYEUQtq5hX5Y_QptTwVX3s7BuIYOhCnIQbqaJivK3lMeL4sZEQM1iXRSIrRTvdCH_jyIgxbzMGPOjDU4LNMLdBLYnSJ1xVus6zJfKS9mjexVpG7szdCUnznaXM9z-BOwqMfI0FjS7454Zn3WBNEMa9vcqgJsZGjD9eQ8tROwa6WuBF_Srmbu0R6DO5IQ7ymCsun8EM1J-.70m2CEdtCnSpHNGwtwtajzvCG3TMC1YPtyT3iJBbphQ&amp;dib_tag=se&amp;keywords=the+money+formula&amp;qid=1743147962&amp;sprefix=the+money+form%2Caps%2C103&amp;sr=8-1">The Money Formula: Dodgy Finance, Pseudo Science, and How Mathematicians Took Over the Markets – Paul Wilmott, David Orrell</a></li>
</ul>
</section>
<section id="biografie" class="level3">
<h3 class="anchored" data-anchor-id="biografie">Biografie</h3>
<ul>
<li><a href="https://www.amazon.pl/Man-All-Markets-Street-Dealer/dp/0812979907/ref=sr_1_1?crid=2K13FHXQS2SZN&amp;dib=eyJ2IjoiMSJ9.RJZpnl206t7XXNtlhqkOR7oYmQe_dcivmw6ztqaFHmDB3FUtCRFSX6bov4hx0fPJKrsjsoCJ5a7gEiSkLTNZQuC2JaeZsXRFXAsca0_imJ5UXzgx48pM1JYK0eFZo0P4idrfDzFkQohzYfeMGhI3XUxB5IEEoOlpR6o4HTk1aqTleNQComnOdCdnQUVUmrH9LrNJ4yBwuo1jI3W_uW7poRZD2mnwqYPp8kA5ptJDJhEDPjWbn4Kt4w03l13qx5iiUB5q3DjOhHIOBn8-rttcPk48xoTnzflkLr5kMkKz2VMMGVsKjH5gp8NwTeh4zjf7OkacuKLw7yzQk69AnkTJbg.RR899uP7uBEyeF_Yxz_-HxGbCZ2fwFOENTWm4fnf50w&amp;dib_tag=se&amp;keywords=the+man+for+all+markets&amp;qid=1743147099&amp;sprefix=the+man+for+all+ma%2Caps%2C99&amp;sr=8-1">A Man for All Markets: From Las Vegas to Wall Street, How I Beat the Dealer and the Market – Edward O. Thorp</a></li>
<li><a href="https://www.amazon.pl/Man-Who-Solved-Market-Revolution/dp/0593086317/ref=pd_lpo_d_sccl_2/257-5762872-5624662?pd_rd_w=Y63Cm&amp;content-id=amzn1.sym.4f0010e1-e663-418f-b0d7-f571eacea3de&amp;pf_rd_p=4f0010e1-e663-418f-b0d7-f571eacea3de&amp;pf_rd_r=1VGNB9V9VHCTNAKXWAJP&amp;pd_rd_wg=S9CVu&amp;pd_rd_r=8f8c7731-255c-4798-8390-7560d8fe41d6&amp;pd_rd_i=0593086317&amp;psc=1">The Man Who Solved the Market: How Jim Simons Launched the Quant Revolution – Gregory Zuckerman</a></li>
<li><a href="https://www.amazon.pl/My-Life-Quant-Reflections-Physics/dp/0470192739/ref=sr_1_1?crid=1C3YC85CCMHY6&amp;dib=eyJ2IjoiMSJ9.ZXtaJIGHfwUq_nbtUvAUHkQ6jl-E0cJI6P2r9i9Q2qs.6FPkV19seKV8ur934_q5y-wuvaIE-ILZ5qJfFP69Kzs&amp;dib_tag=se&amp;keywords=my+life+as+a+quant+derman&amp;qid=1743147195&amp;sprefix=my+life+as+a+qu%2Caps%2C111&amp;sr=8-1">My Life as a Quant: Reflections on Physics and Finance – Emanuel Derman</a></li>
</ul>
</section>
<section id="podstawy-matematyki-finansowejfinansów-ilościowych" class="level3">
<h3 class="anchored" data-anchor-id="podstawy-matematyki-finansowejfinansów-ilościowych">Podstawy matematyki finansowej/finansów ilościowych</h3>
<ul>
<li><a href="https://www.amazon.pl/Financial-Calculus-Introduction-Derivative-Pricing/dp/0521552893/ref=sr_1_1?crid=224BTTLDF1R7B&amp;dib=eyJ2IjoiMSJ9.jIE1xIxSaiHw9MVO00XmcAUUDvhnxydbZrfIa0P5t00O1F8FIVjbqJ6CEp3YVftz95x4SaOBBi8l_sGjcx6CIDBPeM0YHne4wfgCwt9UQSlv7zguJSzmsLmbcsnsklFNkwnfWleLJ4KFH2HSmv3X9F7dEJNFhkYQpXmmqL0yhopSfPOITANH9g-a3aBaUXqHqRmZx3bFVJUSEKsLmLFsw3BhSmsh7RS4sEU0IAZ0INZfGqMAPTEPFCyWSHix50YVPmzcywnxKHVb4xz3el8MPH9duDchlHq-42he0JyBP2p4wtfqrvsTKhsm9tXqRCCjlIsl_pRwEuiL2qJZ_hhJ-llwgm4S3l9cD5dDgOMrPlqwvGsq5PwYm-6vRItGgvGSsaYsZfS51AoSSPS_bnuEFvKNvq1xiSH1EkaK9s48vaTjtvMnZrMSYdz7JwGtUeF-.S8r875u8Sk0zcE70rkbfxfppwpYRCyJtQh1dW6YP9VY&amp;dib_tag=se&amp;keywords=financial+calculus&amp;qid=1743147318&amp;sprefix=financial+cal%2Caps%2C108&amp;sr=8-1">Financial Calculus: An Introduction to Derivative Pricing – Martin Baxter, Andrew Rennie</a></li>
<li><a href="https://www.amazon.pl/Paul-Wilmott-Introduces-Quantitative-Finance/dp/0470319585/ref=sr_1_2?__mk_pl_PL=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=13DORP0UI7GI3&amp;dib=eyJ2IjoiMSJ9.Acf2r9uXUoVi3cGPQstWJa4XEtmkGvQRRTRIOT6axWW1zYvdQcSoTj_O_nhlbK879FDoIm_ZGA87QO9dAtKdUBq4RxIH14hCimpYru9lbgqB3rMRIO5q6e_4honTko0fauRHDGPo16XowWXuH3EFb5LUQDgib0E3WGSpyUUn8q9Depa0-RwTsF6OewlKPA3Lv9DJxo-tYmq9nK3ruVORodg8nPaumh3m62BmzJQIUBzHr-AMkcYPNBnrGSvGHg_OHupk5xfh_xk5XkD1_wAbja3icsEJM5iQDc9kKZGNja1d_rD8xXhRUOeCWtfkrFqXh9L-NDPdHaF6eJ8NELXCiJ3wLP277zlNA5VEKjwr6QRScAX_qoW2WhCCuONlGAWp1p-SHr_ioG7MZ6mCFCrS70LYG3d23BLy5ZWkFXR5PtBxxY3ucqKNPgTmsSHjrMq4.jTolMLk4qD4sek3V6PObfyw-wAaA3HpSAkZzLxqWv8c&amp;dib_tag=se&amp;keywords=wilmott&amp;qid=1743147433&amp;sprefix=wilmott%2Caps%2C94&amp;sr=8-2">Paul Wilmott Introduces Quantitative Finance – Paul Wilmott</a></li>
<li><a href="https://www.amazon.pl/Stochastic-Calculus-Finance-Binomial-Pricing/dp/0387401008?ref_=Oct_d_omg_d_27253366031_1&amp;pd_rd_w=PFqQp&amp;content-id=amzn1.sym.fa91fe24-39af-42d2-adb5-f7d474a12b45&amp;pf_rd_p=fa91fe24-39af-42d2-adb5-f7d474a12b45&amp;pf_rd_r=WDAMCMG4VJTQZJQNAPWX&amp;pd_rd_wg=uu0O5&amp;pd_rd_r=c83aceba-36da-42c0-8846-670960c51584&amp;pd_rd_i=0387401008">Stochastic Calculus for Finance I: The Binomial Asset Pricing Model – Steven Shreve</a></li>
<li><a href="https://www.amazon.pl/Mathematical-Modeling-Computation-Finance-Exercises/dp/1786348055/ref=sr_1_1?__mk_pl_PL=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;crid=1PTX9LNPV5O00&amp;dib=eyJ2IjoiMSJ9.Ztp8T_RoHtuzFvO5a0WxEAMMcdsWt1NvyGx4JNngYSMj3cNWbJoEx9WmlX2PzLBUeF45Gcg8hV-UwsPSzmK4s0EJh4_9cdrhTWfx9_LDowwhxgjT8uIhOfyjFQNSp9x0a4gPsaeEkrQOwf6we6MWN4H5AgN4EJstkbkXVADPn-pealGuBWL1jXSgNDsg-sGugyVg01-wD-d90HAcqrKXyKMB59xuIRTZSTu_C9HLXGxZcjeEi60YJU2MLpOum_5w.JFJAEc7DCJutuoPLDYd9fN5Td3jynrV2IW3tvdJtmqQ&amp;dib_tag=se&amp;keywords=MATHEMATICAL+MODELING+AND+COMPUTATION+IN+FINANCE%3A&amp;qid=1743148195&amp;sprefix=mathematical+modeling+and+computation+in+finance+%2Caps%2C89&amp;sr=8-1">Mathematical Modeling and Computation in Finance: With Exercises and Python and MATLAB Computer Codes – Cornelis W Oosterlee &amp; Lech A Grzelak</a></li>
</ul>
</section>
<section id="przygotowanie-do-rozmów-rekrutacyjnych" class="level3">
<h3 class="anchored" data-anchor-id="przygotowanie-do-rozmów-rekrutacyjnych">Przygotowanie do rozmów rekrutacyjnych</h3>
<ul>
<li><a href="https://www.amazon.pl/Frequently-Asked-Questions-Quantitative-Finance/dp/0470748753/ref=pd_bxgy_thbs_d_sccl_2/257-5762872-5624662?pd_rd_w=cyi9H&amp;content-id=amzn1.sym.71e0abca-6e8f-42cb-bc1c-dd3fdec92313&amp;pf_rd_p=71e0abca-6e8f-42cb-bc1c-dd3fdec92313&amp;pf_rd_r=APBPBHZMP6JGQFQCNZJX&amp;pd_rd_wg=LoCKZ&amp;pd_rd_r=bd792de7-eb07-4973-83f0-0cb0ae243d42&amp;pd_rd_i=0470748753&amp;psc=1">Frequently Asked Questions in Quantitative Finance – Paul Wilmott</a></li>
<li><a href="https://www.amazon.pl/Joshi-Interview-Questions-Answers-Second/dp/B00NBE74RY/ref=sr_1_7?crid=2KGGBEAVKS8G6&amp;dib=eyJ2IjoiMSJ9.Chh1WFBhlI0VzVgAbdKEmyTN6FeqL9XBp7Bl_1ok_GFQLH6uBOxEWl7XXXJkeuq_8Q5eq9BllpWVyUuMXhhcB6SG1Oo8tQrJfrfesCUokeXT_SjzdPYNz2WawlM-N4GrBw2JYtxwsaS6--QNBXA7Kg.9DoNdVdXVudg9bnAESsMu4dDN7ndSOYmW0iilLuB5d8&amp;dib_tag=se&amp;keywords=quant+interview&amp;qid=1743147626&amp;sprefix=quant+intervie%2Caps%2C86&amp;sr=8-7">Quant Job Interview Questions and Answers - Mark Joshi</a></li>
<li><a href="https://www.amazon.pl/Frequently-Asked-Questions-Quant-Interviews/dp/173453124X/ref=sr_1_1?crid=3MR4U7D96C8CW&amp;dib=eyJ2IjoiMSJ9.6qZR5OZxCC2LBuR-pWVGx_09deO6i_fiyOBHpYMQ_2PTfiWgKzMGiyz8qe4r-auu.Pka1MfBkGj_U5J-jwvKo_Zbw2CYrlnI0-rpmmBBx978&amp;dib_tag=se&amp;keywords=quant+interviews&amp;qid=1743147775&amp;sprefix=Quant+inter%2Caps%2C99&amp;sr=8-1">150 Most Frequently Asked Questions on Quant Interviews – Dan Stefanica, Radoš Radoičić, Tai-Ho Wang</a></li>
</ul>
</section>
<section id="youtube" class="level3">
<h3 class="anchored" data-anchor-id="youtube">YouTube</h3>
<ul>
<li><a href="https://www.youtube.com/computationsinfinance">Computations in Finance</a></li>
<li><a href="https://www.youtube.com/@DimitriBianco">Dimitri Bianco</a></li>
</ul>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Career</category>
  <guid>https://bwrob.github.io/posts/mathematician-in-finance/</guid>
  <pubDate>Fri, 21 Mar 2025 23:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/mathematician-in-finance/financial_whirlpool.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Prettify Dev Terminal Setup</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/linux_shell_setup/</link>
  <description><![CDATA[ 






<section id="oh-my-posh" class="level2">
<h2 class="anchored" data-anchor-id="oh-my-posh">Oh my posh</h2>
<p>Oh My Posh is a prompt theme engine for any shell, including Zsh. It allows you to customize your terminal prompt with themes and segments.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">brew install jandedobbeleer/oh-my-posh/oh-my-posh</span>
<span id="cb1-2">echo 'eval "$(oh-my-posh init zsh)"' &gt;&gt; .zshrc</span>
<span id="cb1-3">echo 'OH_MY_POSH_THEME="kali"' &gt;&gt; .zshrc</span></code></pre></div>
</section>
<section id="autosuggestions" class="level2">
<h2 class="anchored" data-anchor-id="autosuggestions">autosuggestions</h2>
<p>Zsh autosuggestions provide command suggestions based on your history and current input, enhancing your command line experience.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">brew install zsh-autosuggestions</span>
<span id="cb2-2"># To activate the autosuggestions, add the following at the end of your .zshrc:</span>
<span id="cb2-3">source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span></code></pre></div>
</section>
<section id="aliases" class="level2">
<h2 class="anchored" data-anchor-id="aliases">Aliases</h2>
<p>Create a file <code>~/.bash_aliases</code> and add your aliases there, or directly in <code>.zshrc</code>.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1"># Alias definitions.</span>
<span id="cb3-2"># You may want to put all your additions into a separate file like</span>
<span id="cb3-3"># ~/.bash_aliases, instead of adding them here directly.</span>
<span id="cb3-4"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span>
<span id="cb3-5"></span>
<span id="cb3-6">if [ -f ~/.bash_aliases ]; then</span>
<span id="cb3-7">    . ~/.bash_aliases</span>
<span id="cb3-8">fi</span>
<span id="cb3-9"></span>
<span id="cb3-10">alias zshconfig='nano ~/.zshrc'</span>
<span id="cb3-11">alias ls='eza -la --group-directories-first --icons'</span></code></pre></div>
</section>
<section id="minor-packages" class="level2">
<h2 class="anchored" data-anchor-id="minor-packages">Minor packages</h2>
<section id="fzf" class="level3">
<h3 class="anchored" data-anchor-id="fzf">fzf</h3>
<p>Fuzzy finder for command line, useful for searching files, history, etc.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">brew install fzf</span>
<span id="cb4-2"># Set up fzf key bindings and fuzzy completion</span>
<span id="cb4-3">echo 'source &lt;(fzf --zsh)' &gt;&gt; .zshrc</span></code></pre></div>
</section>
<section id="eza" class="level3">
<h3 class="anchored" data-anchor-id="eza">eza</h3>
<p>Better alternative to <code>ls</code> with icons and better defaults.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">brew install eza</span>
<span id="cb5-2">echo 'alias ls='eza -la --group-directories-first --icons'' &gt;&gt; .zshrc</span></code></pre></div>
</section>
<section id="thefuck" class="level3">
<h3 class="anchored" data-anchor-id="thefuck">thefuck</h3>
<p>A tool to correct mistyped commands in the terminal.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">brew install thefuck</span>
<span id="cb6-2">echo 'eval $(thefuck --alias)' &gt;&gt; .zshrc</span></code></pre></div>
</section>
<section id="tmux" class="level3">
<h3 class="anchored" data-anchor-id="tmux">tmux</h3>
<p>A terminal multiplexer that allows you to manage multiple terminal sessions from a single window.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">brew install tmux</span>
<span id="cb7-2">echo 'alias tmux="tmux -2"' &gt;&gt; .zshrc</span></code></pre></div>
</section>
<section id="fastfetch" class="level3">
<h3 class="anchored" data-anchor-id="fastfetch">fastfetch</h3>
<p>A tool to display system information in the terminal, similar to neofetch but faster.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb8-1">brew install fastfetch</span>
<span id="cb8-2">echo 'alias ff="fastfetch"' &gt;&gt; .zshrc</span>
<span id="cb8-3">echo 'ff' &gt;&gt; .zshrc</span></code></pre></div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Dev Env</category>
  <guid>https://bwrob.github.io/posts/linux_shell_setup/</guid>
  <pubDate>Sat, 17 Aug 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/linux_shell_setup/terminal.png" medium="image" type="image/png" height="127" width="144"/>
</item>
<item>
  <title>Linux in Windows via WSL</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/linux-in-windows/</link>
  <description><![CDATA[ 






<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bwrob.github.io/posts/linux-in-windows/image.jpg" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:95.0%"></p>
</figure>
</div>
<section id="windows-linux-and-you-ménage-à-trois" class="level2">
<h2 class="anchored" data-anchor-id="windows-linux-and-you-ménage-à-trois">Windows, Linux, and You: Ménage à trois</h2>
<p>Tired of the same old Windows vs.&nbsp;Linux beef among PC superusers? Well, get ready to become a mediator in this feud. I’ll show you how to get the best of both worlds.</p>
<section id="pros-and-cons" class="level3">
<h3 class="anchored" data-anchor-id="pros-and-cons">Pros and cons</h3>
<p>Windows OS has long been the dominant platform for mainstream consumers and businesses. It offers good hardware compatibility, de facto <em>the</em> PC gaming experience and is friendly to the casual user. However, Windows has significant limitations in terms of system control and software development tools.</p>
<p>Linux, on the other hand, is an operating system created by developers and for developers (and system administrators). It provides infinite flexibility and a deep pool of open-source tools. But the learning curve is steep, the open-source projects often get abandoned and with great power (<code>sudo</code>) comes great responsibility (and sometimes system reinstall).</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Actually, to publish this post in the most convenient and elegant <a href="https://quarto.org/docs/publishing/github-pages.html#publish-command">way</a>, I needed to switch to Linux. The Windows <code>quarto</code> CLI fails with some certification errors, coming from <code>deno</code>, that I can’t be bothered to clean up. Discovered this while writing these words as <a href="https://quarto.org/docs/publishing/github-pages.html#render-to-docs">my previous approach</a> was much messier. Irony is the ambrosia of life (for me at least).</p>
</div>
</div>
</section>
<section id="bridging-the-gap" class="level3">
<h3 class="anchored" data-anchor-id="bridging-the-gap">Bridging the gap</h3>
<p>At this point even Microsoft — a strong contrarian to Linux in the past — embraced the usefulness of Linux shell at your fingertips. Imagine having the familiar interface of Windows for your everyday tasks. Combine it with a the raw power and controllability of Linux for when you need to dive deep into development or system administration. And limited stakes once you (inevitably) remove half of your file system with a bash script. Enter Windows Subsystem for Linux (WSL): a ticket to 10x-ing your software development on Windows.</p>
</section>
<section id="wsl-vs.-virtual-machines-whats-the-difference" class="level3">
<h3 class="anchored" data-anchor-id="wsl-vs.-virtual-machines-whats-the-difference">WSL vs.&nbsp;Virtual Machines: What’s the Difference?</h3>
<p>You might be wondering how WSL differs from a traditional virtual machine (VM). While both provide a way to run Linux on Windows, they operate in different ways. A VM emulates a virtual computer within your computer, complete with its own operating system and make-belive hardware resources. This makes VMs resource-intensive and can impact overall system performance. They are also hard to set up and maintain.</p>
<p>WSL, on the other hand, is a more lightweight approach. It integrates Linux directly into the Windows kernel, allowing for faster boot times, better performance, and seamless file sharing between Windows and Linux environments.</p>
</section>
</section>
<section id="installing-and-setting-up-wsl" class="level2">
<h2 class="anchored" data-anchor-id="installing-and-setting-up-wsl">Installing and setting up WSL</h2>
<p>First, we need to set up the WSL and install a chosen Linux distribution. Fortunately, this is “super easy, barely an inconvenience”. You can choose from a list of distros pre-packaged by Microsoft or download and build an image from scratch. You can even build Arch and be legally allowed to say <code>BTW, I use Arch (on Windows)</code>. For this guide, we’ll take a more conventional approach and opt for the long-term support (LTS) version of Ubuntu. Now, open the Powershell with administrative privileges and run:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource {shell} number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">wsl --update</span>
<span id="cb1-2">wsl --version</span></code></pre></div>
<p>These commands ensure that WSL is up-to-date and displays the installed WSL version.</p>
<p><img src="https://bwrob.github.io/posts/linux-in-windows/1.png" class="img-fluid"></p>
<p>Our next command will be:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource {shell} number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">wsl -l -o</span></code></pre></div>
<p>This yields a curated list of pre-packaged Linux distributions that Microsoft provides, making the process almost effortless.</p>
<p><img src="https://bwrob.github.io/posts/linux-in-windows/2.png" class="img-fluid"></p>
<p>For the installation itself:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource {shell} number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">wsl --install -d 'Ubuntu-24.04'</span></code></pre></div>
<p><img src="https://bwrob.github.io/posts/linux-in-windows/3.png" class="img-fluid"></p>
<p>Reboot the Windows system and you’ll see `Ubuntu’ among your applications. <img src="https://bwrob.github.io/posts/linux-in-windows/4.png" class="img-fluid"> <img src="https://bwrob.github.io/posts/linux-in-windows/5.png" class="img-fluid"></p>
</section>
<section id="base-setup-new-shell-and-package-manager" class="level2">
<h2 class="anchored" data-anchor-id="base-setup-new-shell-and-package-manager">Base setup — new shell and package manager</h2>
<p>There is an additional benefit we can reap with just a bit of more work — a fully system-agnostic setup. By having Linux kernel run on Windows, we unified 2 out of 3 giants. The only pillar that is missing is the Mac OS. But wait, it’s based on Unix as well! It just uses different default shell and lacks a package manager, as Apple doesn’t trust its clients. <code>zsh</code> offers a more interactive and customizable shell experience compared to the default bash. Homebrew, often referred to as the “missing package manager for macOS”, provides a convenient way to install additional software on Linux systems. Let’s change the terminal shell to <code>zsh</code> in our Ubuntu installation and compile a secondary (to <code>apt-get</code>) package manager – <code>brew</code>.</p>
<section id="brewing-starts" class="level3">
<h3 class="anchored" data-anchor-id="brewing-starts">Brewing starts</h3>
<p>Before we dive into installing Homebrew, we need to equip our system with the essential tools. The build-essential package provides a collection of compilers and libraries necessary for building software from the source code. Git is a version control system used for managing code projects.</p>
<p>Let’s install these prerequisites using the following command:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">sudo apt-get upgrade -y</span>
<span id="cb4-2">sudo apt-get install build-essential git -y</span></code></pre></div>
<p>Execute the installation script for Homebrew:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">INSTALL_PATH="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"</span>
<span id="cb5-2">/bin/bash -c "$(curl -fsSL $INSTALL_PATH)"</span></code></pre></div>
<p><img src="https://bwrob.github.io/posts/linux-in-windows/6.png" class="img-fluid"></p>
<p>To make Homebrew accessible from your shell, you need to load its environment variables. The following command achieves this and subsequently runs a diagnostic check:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"</span>
<span id="cb6-2">brew doctor</span></code></pre></div>
<p><img src="https://bwrob.github.io/posts/linux-in-windows/7.png" class="img-fluid"></p>
<p>Doctor’s orders to append brew to some set of paths! Let’s do this then:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1">echo 'export XDG_DATA_DIRS="/home/linuxbrew/.linuxbrew/share:$XDG_DATA_DIRS"' &gt;&gt; ~/.profile</span></code></pre></div>
</section>
</section>
<section id="z-shell-sea-shell" class="level2">
<h2 class="anchored" data-anchor-id="z-shell-sea-shell">Z-shell — sea-shell</h2>
<p>Homebrew makes package management a breeze. Let’s install <code>zsh</code>, a powerful and customizable shell.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb8-1">brew install zsh</span>
<span id="cb8-2">zsh --version</span>
<span id="cb8-3">zsh</span></code></pre></div>
<p>This will take you to interactive <code>.zshrc</code> file setup. The file contains commands that are run each time a shell is spawned. You can either generate empty file with <code>0</code> or go through the interactive setup with <code>1</code>. <img src="https://bwrob.github.io/posts/linux-in-windows/8.png" class="img-fluid"></p>
<p>Add the brew initialization to <code>.zshrc</code> file as well. This way <code>brew</code> will always be by your side!</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb9-1">(echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"') &gt;&gt; /home/bwrob/.zshrc</span></code></pre></div>
<p>Check the default shell and set it to <code>zsh</code>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb10-1">echo $SHELL</span>
<span id="cb10-2">sudo chsh -s $(which zsh)</span>
<span id="cb10-3">echo $SHELL</span></code></pre></div>
</section>
<section id="github-command-line-tool" class="level2">
<h2 class="anchored" data-anchor-id="github-command-line-tool">GitHub command line tool</h2>
<p>Remember <code>git != GitHub</code>, we need a way to authenticate and use Github from CLI. There’s a tool for that!</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb11-1">brew install gh</span>
<span id="cb11-2">gh auth login</span></code></pre></div>
<p><img src="https://bwrob.github.io/posts/linux-in-windows/9.png" class="img-fluid"></p>
<p>Now create a convenient directory and copy your favourite <code>GitHub</code> repo:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb12-1">mkdir repos &amp;&amp; cd repos</span>
<span id="cb12-2">gh repo clone python_playground</span></code></pre></div>
</section>
<section id="connect-to-visual-studio-code" class="level2">
<h2 class="anchored" data-anchor-id="connect-to-visual-studio-code">Connect to Visual Studio Code</h2>
<p>While WSL grants us the power of Linux, let’s not forget the user-friendly interface of Windows. When it comes to software development, we can achieve the perfect blend by integrating Visual Studio Code (VSC) with our WSL environment.</p>
<p>Here’s how:</p>
<ul>
<li><p><strong>Install the WSL Extension in VSC</strong>: Fire up VSC on your Windows machine and head over to the Extensions tab. Search for “WSL” and install the official extension by Microsoft: <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">WSL extension</a>.</p></li>
<li><p><strong>Launching VSC from WSL</strong>: Within your WSL terminal, you can directly invoke VSC as if it were running natively on Windows. Use the following command:</p></li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb13-1">code ~\repos\python_playground</span></code></pre></div>
<p><img src="https://bwrob.github.io/posts/linux-in-windows/10.png" class="img-fluid"></p>
<p>In the <a href="">next post</a> I will show you how to set up Python environment in Linux. Stay tuned :) .</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the Ubuntu shell script <a href="../../scripts/wsl_setup.sh">here</a>.</p>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Dev Env</category>
  <guid>https://bwrob.github.io/posts/linux-in-windows/</guid>
  <pubDate>Sat, 10 Aug 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/linux-in-windows/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Linux Python Dev Env</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/linux-python-dev-env/</link>
  <description><![CDATA[ 






<p>Installing Python dev tools on Linux is a bit of a pain, but it doesn’t have to be. This post will show you how to set up a great Python dev environment on Linux using <code>brew</code>, <code>pipx</code>, and <code>poetry</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb1-1">brew install python@3.12 python@3.13</span></code></pre></div>
<p>Dev tools should be accessable globally, but should’t be in the defualt global python env. Solution - <code>pipx</code></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">brew install pipx</span>
<span id="cb2-2">pipx ensurepath</span>
<span id="cb2-3">pipx install argcomplete --force</span></code></pre></div>
<p>Add pipix completions to config</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">nano  .zshrc</span>
<span id="cb3-2"></span>
<span id="cb3-3">autoload -U compinit &amp;&amp; compinit</span>
<span id="cb3-4">eval "$(register-python-argcomplete pipx)"</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bwrob.github.io/posts/linux-python-dev-env/1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%"></p>
</figure>
</div>
<p>Install dev tools</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb4-1">pipx install --force ruff hapless poethepoet poetry pre-commit uv pytest basedpyright</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bwrob.github.io/posts/linux-python-dev-env/2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%"></p>
</figure>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb5-1">nano $(which poetry)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bwrob.github.io/posts/linux-python-dev-env/3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%"></p>
</figure>
</div>
<p>Shebang Line (#!): #!/home/bwrob/.local/share/pipx/venvs/poetry/bin/python: This line specifies the interpreter used to run the script. In this case, it’s a Python interpreter located in a specific virtual environment (poetry).</p>
<p>This script acts as a launcher for the poetry command. It sets up the environment and handles potential script extensions before delegating the actual command execution to the poetry library.</p>
<p>We can see that each of the toolos install with pipx is installed in its own venv, but is available globally</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb6-1">ls /home/bwrob/.local/share/pipx/venvs/ -la</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bwrob.github.io/posts/linux-python-dev-env/4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:90.0%"></p>
</figure>
</div>
<p>Copy your</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode numberSource {bash} number-lines code-with-copy"><code class="sourceCode"><span id="cb7-1"># Instal dependencies</span>
<span id="cb7-2">poetry install</span>
<span id="cb7-3"># Install pre-commit</span>
<span id="cb7-4">pre-commit install --install-hooks --overwrite --allow-missing-config</span>
<span id="cb7-5"># Update pre-commit</span>
<span id="cb7-6">pre-commit autoupdate</span>
<span id="cb7-7"># Run pre-commit to test setup</span>
<span id="cb7-8">pre-commit run --all-files</span></code></pre></div>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Dev Env</category>
  <guid>https://bwrob.github.io/posts/linux-python-dev-env/</guid>
  <pubDate>Sat, 10 Aug 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/linux-python-dev-env/1.png" medium="image" type="image/png" height="87" width="144"/>
</item>
<item>
  <title>Python Startup Script</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/startup-script/</link>
  <description><![CDATA[ 






<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bwrob.github.io/posts/startup-script/win_98.png" class="img-fluid quarto-figure quarto-figure-center figure-img" style="width:65.0%"></p>
</figure>
</div>
<section id="why-a-startup-script" class="level2">
<h2 class="anchored" data-anchor-id="why-a-startup-script">Why a startup script?</h2>
<p>Confession time. Pre-COVID I worked for a Swiss bank — it was the whole corporate package. Working from a crowded office, open space, dedicated desks, dedicated desktop PCs, hundreds of people. And we never turned the PCs off, some of them were running constantly for months. Not very eco-friendly behaviour, either from the company side or from the employees. But there were legit reasons for this and the company had much <a href="https://www.wikiwand.com/en/Credit_Suisse#Controversies">bigger sins</a> on their books.</p>
<p>As for the reasons for constantly turned on machines — the proprietary frameworks and tooling we used were awfully heavy and slow. If you were occasionally forced to kill all the processes — due to an update or system crash — getting them all up again took an hour or more. Developer tools, pricing systems, connections to Monte Carlo farms, downloading trade data, analysis definitions — you name it, we used it.</p>
<p>One tidbit to get this point across — in 2019 we still used 32-bit Win7, which had a cap on single-process memory consumption to 4GB. We had a universally used hack to extend this to 8GB for Excel, since the default wasn’t enough for many of our pricing sheets.</p>
<p>When I parted ways with the company post-COVID, I got a corporate laptop from the new employer. The office was much sparser, quieter and with ‘hot seats’ approach. I worked mostly remotely either way. This meant switching off the company machine each day, as the VPN connections and certificates wouldn’t last overnight. I was extremely annoyed with opening all of the daily tools again and again, after getting used to having it all waiting for me to jump right in.</p>
<p>Hence the need for a startup script to open all of the apps, tools and files programatically. It won’t cover everything, like authorizations or connections but still a little helper to start the day.</p>
<p>To spice things up, we will overengineer the hell out of it and use generic typing, generators and decorators :D.</p>
</section>
<section id="the-startup-script" class="level2">
<h2 class="anchored" data-anchor-id="the-startup-script">The startup script</h2>
<section id="public-interface" class="level3">
<h3 class="anchored" data-anchor-id="public-interface">Public interface</h3>
<p>Let’s first think about the design and what we want to achieve. Imagine the code being split into two parts:</p>
<ul>
<li>the hidden logic layer, <strong>the worker</strong> that does stuff and</li>
<li>the public interface that integrates with the rest of the codebase or is called at the top level, <strong>the manager</strong>.</li>
</ul>
<p>We can start by creating the public interface, see what we want to achieve and later deal with filling in a working implementation. You can either define the logic functions as mocks, or just live with linting issues. This is what my desired usage is:</p>
<div id="80df3d09" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_startup_script() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Run the startup script."""</span></span>
<span id="cb1-3">    logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" Welcome </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>os<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>getlogin()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">! "</span>.center(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>))</span>
<span id="cb1-4">    start_programs(</span>
<span id="cb1-5">        [</span>
<span id="cb1-6">            Program.POWERSHELL,</span>
<span id="cb1-7">            Program.NOTEPAD,</span>
<span id="cb1-8">            (Program.FIREFOX, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb1-9">        ],</span>
<span id="cb1-10">    )</span>
<span id="cb1-11">    start_work_files([Path.home() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".temp"</span>])</span>
<span id="cb1-12">    run_commands([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Write-Output "test"'</span>])</span></code></pre></div>
</div>
<p>We specify programs to be launched, open all files in a chosen temp folder and run a list of shell commands. After each step there should be some delay to avoid spamming system with process calls. Certain steps might be more time consuming, like cloud services authorization. Those need longer delay. On the other hand, specifying delay for each task would be cumbersome, most cases would be fine with some default value. We end up with a design that our soon-to-be workers <code>start_programs</code>, <code>start_work_files</code>, and <code>run_commands</code> expect lists of either <code>task</code> or <code>(task, delay_seconds)</code>. We can now start the implementation by figuring out how the delay time should be defaulted if not specified.</p>
</section>
<section id="decorator-defaulting-the-time-delays" class="level3">
<h3 class="anchored" data-anchor-id="decorator-defaulting-the-time-delays">Decorator defaulting the time delays</h3>
<p>Now we can start the implementation. We want the workers to be called with a list of tasks, but a task can be either a command or a tuple including the delay. Let’s not include some complicated conditionals in each of the workers — that would be annoying and potentially get out of sync at some point.</p>
<p>Other way to do this is to add a default delay to all non-tuple items. We can implement that as a separate defaulting function, which we would call in each worker. But — being more clever! — we could also use a decorator that changes the workers’s signature.</p>
<div id="9955543d" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wraps</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections.abc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TypeVar</span>
<span id="cb2-4"></span>
<span id="cb2-5">T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeVar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>)</span>
<span id="cb2-6">Task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[T, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]</span>
<span id="cb2-7">TaskList <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Task[T]]</span>
<span id="cb2-8">TaskListOptionalDelay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Task[T] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> T]</span>
<span id="cb2-9"></span>
<span id="cb2-10"></span>
<span id="cb2-11">DEFAULT_DELAY_SECONDS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> with_optional_delay(</span>
<span id="cb2-14">    task_worker: Callable[[TaskList[T]], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>],</span>
<span id="cb2-15">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Callable[[TaskListOptionalDelay[T]], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb2-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Add default delay to all non-tuple items.</span></span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_worker: A function that takes a list of tasks.</span></span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-23"></span>
<span id="cb2-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@wraps</span>(task_worker)</span>
<span id="cb2-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> task_defaulted_worker(task_list: TaskListOptionalDelay[T]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Add a default delay to tasks in a task list if no delay is specified.</span></span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ----</span></span>
<span id="cb2-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            task_list: A list of tasks with optional delays.</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-33">        tasks_with_defaulted_delays: TaskList[T] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-34">            item <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(item, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> (item, DEFAULT_DELAY_SECONDS)</span>
<span id="cb2-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> task_list</span>
<span id="cb2-36">        ]</span>
<span id="cb2-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> task_worker(tasks_with_defaulted_delays)</span>
<span id="cb2-38"></span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> task_defaulted_worker</span></code></pre></div>
</div>
<p>First, for convenience, let’s define a template type annotation:</p>
<ul>
<li>The generic variable type is conventionally denoted by <code>T</code>.</li>
<li>A <code>Task</code> is a tuple of a generic task <code>T</code> and an <code>int</code> delay.</li>
<li>A <code>TaskList</code> is a list of <code>Task</code>s. Simple.</li>
<li>A <code>TaskListOptionalDelay</code> is a list of <code>Task</code>s or <code>T</code>s. Those are the guys we are going to turn into <code>TaskLists</code>.</li>
</ul>
<p>The decorator <code>with_optional_delay</code> adds a default delay of 4 seconds to all non-tuple items. Its input is a worker function that already expects a <code>TaskList</code>. It fills in the missing delay with the default value and passes it to the decorated function.</p>
</section>
<section id="main-workers" class="level3">
<h3 class="anchored" data-anchor-id="main-workers">Main workers</h3>
<p>With the preparation done, we can start with the workers. For the programs we will be launching, we need to look up the exact paths of the executables. Let’s define a <code>Program</code> enum that would wrap those up in readable nice names. For working with system paths we will use <code>pathlib.Path</code> that provides high-level interface.</p>
<div id="c87cac89" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Enum</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Program(Enum):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Types of programs."""</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">    POWERSHELL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"C:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\w</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">indows</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\s</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">ystem32</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\w</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">indowspowershell</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\v</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">powershell</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">exe"</span>)</span>
<span id="cb3-9">    NOTEPAD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"C:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">Program Files</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">Notepad</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">otepad</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">exe"</span>)</span>
<span id="cb3-10">    FIREFOX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"C:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">ProgramData</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\M</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">icrosoft</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\W</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">indows</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">\S</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">tart Menu</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">Programs</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">Firefox</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">lnk"</span>)</span></code></pre></div>
</div>
<p>Other than that, the main workers <code>start_programs</code>, <code>start_work_files</code>, and <code>run_commands</code> are simple. They just iterate over the provided <code>TaskList</code> and do the respective action for a given <code>Task</code>.</p>
<div id="88709035" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@with_optional_delay</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> start_programs(</span>
<span id="cb4-3">    programs: TaskList[Program],</span>
<span id="cb4-4">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Start listed programs.</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        programs: List of programs to start.</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Can be a string or a tuple. If a tuple is given, the first</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            element is the name, the second is the delay.</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> program, delay <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> programs:</span>
<span id="cb4-15">        start_process(</span>
<span id="cb4-16">            name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>program.name,</span>
<span id="cb4-17">            path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>program.value,</span>
<span id="cb4-18">            delay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delay,</span>
<span id="cb4-19">        )</span>
<span id="cb4-20"></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@with_optional_delay</span></span>
<span id="cb4-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> start_work_files(</span>
<span id="cb4-24">    directory_tasks: TaskList[Path],</span>
<span id="cb4-25">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Start all  files in the work folders.</span></span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        directory_tasks: List of tasks with paths to work folders.</span></span>
<span id="cb4-31"></span>
<span id="cb4-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> path, delay <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> path_files(directory_tasks):</span>
<span id="cb4-34">        start_process(</span>
<span id="cb4-35">            name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path.name,</span>
<span id="cb4-36">            path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path,</span>
<span id="cb4-37">            delay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>delay,</span>
<span id="cb4-38">        )</span>
<span id="cb4-39"></span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@with_optional_delay</span></span>
<span id="cb4-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_commands(</span>
<span id="cb4-43">    commands: TaskList[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>],</span>
<span id="cb4-44">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Run all commands in the command list.</span></span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb4-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        commands: List of commands to run.</span></span>
<span id="cb4-50"></span>
<span id="cb4-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> command, delay <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> commands:</span>
<span id="cb4-53">        run_command(command, delay)</span></code></pre></div>
</div>
</section>
<section id="list-all-files-in-list-of-directories" class="level3">
<h3 class="anchored" data-anchor-id="list-all-files-in-list-of-directories">List all files in list of directories</h3>
<p>Notice the use of <code>path_files</code> generator above. When working with complex iterations, it’s a good practice to create a generator that wraps the iteration details. It is beneficial for readability and maintainability, especially in cases where you need to:</p>
<ul>
<li>yield multiple values at once (ex. <em>yield path, delay for path in directory</em>),</li>
<li>have nested iterators (ex. <em>for directory in list for path in directory</em>),</li>
<li>filter the iteration (ex. <em>for path in directory if filter(path)</em>).</li>
</ul>
<p>Here we’ll have all three of them combined!</p>
<div id="eb1fbe23" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">NAME_EXCLUDES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tmp"</span>)</span>
<span id="cb5-2">EXT_EXCLUDES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"exe"</span>,)</span>
<span id="cb5-3"></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> filter_excluded(</span>
<span id="cb5-6">    path: Path,</span>
<span id="cb5-7">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Filter path based on name and extension exclude lists.</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        path: Path to filter.</span></span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (path.stem <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> NAME_EXCLUDES) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (path.suffix <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> EXT_EXCLUDES)</span>
<span id="cb5-16"></span>
<span id="cb5-17"></span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> path_files(</span>
<span id="cb5-20">    directory_tasks: TaskList[Path],</span>
<span id="cb5-21">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[Path, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb5-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate all files in the work folder that are not excluded.</span></span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Yields the folder path at beginning of the generator.</span></span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        directory_tasks: List of tasks with paths to work folders.</span></span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> folder, delay <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> directory_tasks:</span>
<span id="cb5-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> folder, delay</span>
<span id="cb5-33"></span>
<span id="cb5-34">        all_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> folder.glob(FILES_IN_TREE_PATTERN)</span>
<span id="cb5-35">        filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(filter_excluded, all_files)</span>
<span id="cb5-36"></span>
<span id="cb5-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> filtered:</span>
<span id="cb5-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, delay</span></code></pre></div>
</div>
<p>The <code>filter_excluded</code> function filters out files based on exclusions in name and extension lists. <code>Path.stem</code> and <code>Path.suffix</code> are used to check if the file name or extension is in the lists respectively.</p>
</section>
<section id="interacting-with-the-os" class="level3">
<h3 class="anchored" data-anchor-id="interacting-with-the-os">Interacting with the OS</h3>
<p>With all of the framework prepared, the next step is to interact with the OS. To open a file, folder or run an app, we can use the <code>os.startfile</code> function. All the rest of the <code>start_process</code> function is just utility logging. For running a shell command we can use the <code>subprocess</code> module, calling powershell with the <code>powershell.exe</code> and adding the command to run.</p>
<div id="08525f35" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb6-4"></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> start_process(</span>
<span id="cb6-7">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb6-8">    name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb6-9">    path: Path,</span>
<span id="cb6-10">    delay: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DEFAULT_DELAY_SECONDS,</span>
<span id="cb6-11">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Given a path, starts the target.</span></span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Behavior:</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        * Minimizes all windows.</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        * Depending on the path target:</span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            * executable files are run,</span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            * content files are opened with system default program,</span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            * folders are opened with system explorer.</span></span>
<span id="cb6-20"></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        name: Name of the process to start.</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        path: Path to the target.</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        delay: Time to wait after starting the process.</span></span>
<span id="cb6-26"></span>
<span id="cb6-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> path.is_dir():</span>
<span id="cb6-29">        logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Opening folder </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, name)</span>
<span id="cb6-30"></span>
<span id="cb6-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> path.suffix <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".exe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".lnk"</span>):</span>
<span id="cb6-32">        logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running app </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, name)</span>
<span id="cb6-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb6-34">        logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Opening file </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, name)</span>
<span id="cb6-35"></span>
<span id="cb6-36">    os.startfile(path)</span>
<span id="cb6-37">    time.sleep(delay)</span>
<span id="cb6-38"></span>
<span id="cb6-39"></span>
<span id="cb6-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_command(</span>
<span id="cb6-41">    command: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb6-42">    delay: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="cb6-43">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Run a powershell command.</span></span>
<span id="cb6-45"></span>
<span id="cb6-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb6-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----</span></span>
<span id="cb6-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        command: Command to run.</span></span>
<span id="cb6-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        delay: Time to wait after starting the process.</span></span>
<span id="cb6-50"></span>
<span id="cb6-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-52">    _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subprocess.call(</span>
<span id="cb6-53">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"powershell.exe </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>command<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-54">        shell<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb6-55">    )</span>
<span id="cb6-56">    time.sleep(delay)</span></code></pre></div>
</div>
</section>
</section>
<section id="the-last-bit-of-convenience" class="level2">
<h2 class="anchored" data-anchor-id="the-last-bit-of-convenience">The last bit of convenience</h2>
<p>We got it, friends, the script works and the job is done. But… do you recall the last time you googled a shortcut for a semi-frequently used functionality? Do you still remember the shortcut, or use it each time you need the functionality? Convenience needs to be convenient (obviously). So let’s make the usage of our script as seamless as possible.</p>
<p>In Windows OS the best way for me would be to have a shortcut that would run it with one click. We could pin it to the taskbar and start menu. To create one:</p>
<ul>
<li>Go to any folder, right-click and select <code>New &gt; Shortcut</code>.</li>
<li>In the guide that pops up paste in <code>%systemroot%\System32\cmd.exe /c "python.exe $1"</code> where <code>$1</code> should be replaced by the path to your script. You can also replace <code>python.exe</code> with interpreter path of any venv you wish.</li>
<li>Optionally, you can later change the icon for the shortcut (needs to be <code>.ico</code> file). I like to roll with Win-98 style ‘My Computer’ icon.</li>
<li>Copy the shortcut to start menu directory. For Win11 it’s <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs</code>. You should be able to see it in start menu already. Now you can pin it to the taskbar.</li>
</ul>
<p><img src="https://bwrob.github.io/posts/startup-script/startup_shortcut.png" class="img-fluid" style="width:100.0%"></p>
<p>That’s a good enough reminder and convenience tool for me. You might need some different setup, especially for another OS. For Linux, you might try to leverage <code>activate</code> or <code>bashrc</code> scripts in your working setup.</p>
</section>
<section id="further-extensions" class="level2">
<h2 class="anchored" data-anchor-id="further-extensions">Further extensions</h2>
<p>There are a couple more things I wish this guy could do for me still:</p>
<ul>
<li><strong>Changing Teams status to green</strong> - there’s a MS Graph API that could do this but we would need to manage Azure authorizations through the script. I am not up to that, especially on a work account. Might experiment on personal one in the future.</li>
<li><strong>Display placement of opened processes</strong> — I have 2 displays (which you could count as 4, due to the size format) and I am very particular about where each app should go. I would love the apps to open where they should. This is however OS specific, for Win it require to mingle with win32api. Yet another project for the future.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the startup <a href="../../scripts/startup_script.py">script</a> and example Windows <a href="Startup!.lnk">shortcut</a>.</p>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Pythonic Distractions</category>
  <guid>https://bwrob.github.io/posts/startup-script/</guid>
  <pubDate>Mon, 20 May 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/startup-script/win_98.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Exit stack to the rescue</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/exit-stack/</link>
  <description><![CDATA[ 






<section id="working-with-risk-managment-systems" class="level2">
<h2 class="anchored" data-anchor-id="working-with-risk-managment-systems">Working with risk managment systems</h2>
<p>As a quantitative finance professional you’ll often find yourself with risk management systems (RMS). RMS’s are extensive frameworks that let you properly define a book (portfolio) of your financial transactions and run varia of pricing and risk analysis on it. For big financial players, like investment banks, the RMS will be internal proprietary codbase that is run in-house. For smaller enterprises or second-line reporting it’s not feasable to tackle creating such vast infrastructure. Hence, where there’s a need, someone will try to make money on it. This leads us to third-party (or vendor) RMS, of which there are plenty (ex. Murex, Acadia).</p>
<p>Working with vendor RMS, especially one that covers computations for you, entails juggling multiple resources to obtain your risk metrics. Defining OTC products, benchmarks, portfolios, and running risk analysis can involve numerous API calls, each requiring proper setup and cleanup. This can lead to messy code and potential errors or performance bottlenecks if resources aren’t handled correctly.</p>
<p>Thankfully, Python provides a powerful concept called context managers (<strong>CM</strong>) that streamline resource managment. True to the language’s ‘batteries included’ philosophy, there’s also a <code>contextlib</code> library that contains variety of tools for easing up your work with CMs. Today we’ll look at a (mock-up) usage of <code>ExitStack</code> class in real-life scenario of running risk analysis on RMS. If you need a refresher on CMs, check out this <a href="https://realpython.com/python-with-statement/">tutorial</a> by RealPython.</p>
</section>
<section id="setting-the-stage" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-stage">Setting the stage</h2>
<p>To run an analysis, the RMS first needs to know what our positions are. In case of tradable assets it’s simple — we provide a market identifier and how much of the instrument we are holding. What do we do if we have some bespoke agreement with specific counterparty (an over-the-counter transaction)? We will need to define it from scratch in the RMS using data from the term sheet (assuming this kind of agreement is covered).</p>
<p>Next, we need to specify the risk metrics we want to calculate — define the analysis scope. Let’s say we hold some equity options and we are intertested in their deltas and beta exposures. The betas are defined with respect to some benchmark — ex. portfolio holding 1 stock in US500 ETF. So we define the benchmark and link it to our analysis.</p>
<p>Finally — once portfolio and analysis are defined in RMS — we call the API to start the calculation and respond with results. This is the control flow we execute to get to this point:</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
  A[OTC Products] --&gt; B[Portfolio]
  B --&gt; C{Analysis Run}
  D[Benchmarks] --&gt; E[Analysis Definition]
  E --&gt; C
  C --&gt; F(Results)
</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>If we know we’re never going to use all of the resources, we should clean up the server artifacts after receving the results. So for each resource we should have a CM.</p>
<section id="mock-functions" class="level3">
<h3 class="anchored" data-anchor-id="mock-functions">Mock functions</h3>
<p>The setup described above comes from a real-life situation I worked through. I can’t show you the actual API usage or data (or even the name of RMS itself), so we need to define some mocker functions. Mocks like this are actually not an uncommon thing — such approach is prevalent in testing API client code. In our case it would look like this:</p>
<div id="9bd74952" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StrEnum</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> uuid <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uuid4</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MockObject(StrEnum):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Types of mock objects."""</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">    ANALYSIS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analysis"</span></span>
<span id="cb1-9">    BENCHMARK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"benchmark"</span></span>
<span id="cb1-10">    OTC_PRODUCTS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"otc_products"</span></span>
<span id="cb1-11">    PORTFOLIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio"</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mock_object(object_type: MockObject) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock a UUID for a given object type.</span></span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        object_type: Type of object.</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>object_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>uuid4()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mock_preparation(object_type: MockObject, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock preparation of an object.</span></span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        object_type: Type of object.</span></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Preparing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>object_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kwargs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> kwargs <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>))</span>
<span id="cb1-30"></span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mock_clean_up(object_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock clean up of an object.</span></span>
<span id="cb1-34"></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        object_uuid: Uuid of the object.</span></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cleaning up after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>object_uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
</div>
<p>For each of the four types of resources we mock the preparation, object (ex. API response, some id of definition on server) and the clean up process.</p>
</section>
<section id="context-managers" class="level3">
<h3 class="anchored" data-anchor-id="context-managers">Context managers</h3>
<p>Easiest way to define a CM is through <code>contextlib.contextmanager</code> decorator. To use it, you need a function that returns a generator. Code executed on enter should come before <code>yield</code> statement and the one for the exit afterwards. The generator yields the result of the CM (ex. handle to an opened file), the <code>y</code> in <code>with x(*args) as y:</code>.</p>
<div id="d83ed76c" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextmanager</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Generator</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> analysis(</span>
<span id="cb2-6">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb2-7">    benchmark_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb2-8">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of an analysis.</span></span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example: equity delta and correlation with benchmark.</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        benchmark_uuid: Uuid of the benchmark.</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-16">    mock_preparation(</span>
<span id="cb2-17">        MockObject.ANALYSIS,</span>
<span id="cb2-18">        benchmark_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb2-19">    )</span>
<span id="cb2-20">    analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.ANALYSIS)</span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> analysis_uuid</span>
<span id="cb2-22">    mock_clean_up(analysis_uuid)</span></code></pre></div>
</div>
<p>Modern approach to Python development leans heavily towards type annotations. Dynamical typing is powerful but can lead to unwieldy code. To properly annotate the <code>analysis</code> function we need to import <code>Generator</code> from <code>typing</code> module. Remember, the <code>@contextmanager</code> decorator takes the function and turns it into CM — a class with <code>__enter__</code> and <code>__exit__</code> methods. The <code>Generator</code> needs three inputs but in our case only the first one is important — <code>YieldType</code>, here <code>str</code> (<a href="https://docs.python.org/3/library/typing.html#typing.Generator">see</a> for more).</p>
<p>With this done implementing the 3 remaining CMs is easy, just remember our flow chart.</p>
<div id="2672ae99" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> benchmark() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of a benchmark.</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        otc_products_uuid: Uuid of the otc products.</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-8">    mock_preparation(</span>
<span id="cb3-9">        MockObject.BENCHMARK,</span>
<span id="cb3-10">    )</span>
<span id="cb3-11">    benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.BENCHMARK)</span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> benchmark_uuid</span>
<span id="cb3-13">    mock_clean_up(benchmark_uuid)</span>
<span id="cb3-14"></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb3-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> otc_products() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of an otc products.</span></span>
<span id="cb3-19"></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        otc_products_uuid: Uuid of the otc products.</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-23">    mock_preparation(MockObject.OTC_PRODUCTS)</span>
<span id="cb3-24">    otcs_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.OTC_PRODUCTS)</span>
<span id="cb3-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> otcs_uuid</span>
<span id="cb3-26">    mock_clean_up(otcs_uuid)</span>
<span id="cb3-27"></span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb3-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> portfolio(</span>
<span id="cb3-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb3-32">    portfolio_name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb3-33">    otc_products_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb3-34">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb3-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock definition of a portfolio.</span></span>
<span id="cb3-36"></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        otc_products_uuid: Uuid of the otc products.</span></span>
<span id="cb3-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-40">    mock_preparation(</span>
<span id="cb3-41">        MockObject.PORTFOLIO,</span>
<span id="cb3-42">        portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_name,</span>
<span id="cb3-43">        otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_products_uuid,</span>
<span id="cb3-44">    )</span>
<span id="cb3-45">    portfolio_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mock_object(MockObject.PORTFOLIO)</span>
<span id="cb3-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> portfolio_uuid</span>
<span id="cb3-47">    mock_clean_up(portfolio_uuid)</span></code></pre></div>
</div>
</section>
<section id="analysis-results" class="level3">
<h3 class="anchored" data-anchor-id="analysis-results">Analysis results</h3>
<p>No stress or complexity here, to run the analysis we need to specify which analysis to run on which portfolio.</p>
<div id="c222dd3d" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> analysis_results(</span>
<span id="cb4-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb4-5">    analysis_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb4-6">    portfolio_uuid: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb4-7">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis on a given portfolio.</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns empty dataframe.</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        analysis_uuid: Uuid of the analysis.</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        portfolio_uuid: Uuid of the portfolio.</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Running analysis </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>analysis_uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> on portfolio </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>portfolio_uuid<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.DataFrame()</span></code></pre></div>
</div>
</section>
</section>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
<p>Finally, we can run some (mock) risk analysis!</p>
<section id="using-contexts-directly" class="level3">
<h3 class="anchored" data-anchor-id="using-contexts-directly">Using contexts directly</h3>
<p>First, we use the managers directly through <code>with</code> clause, remembering the dependencies from our flow chart.</p>
<div id="bdb7ec05" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">PORTFOLIO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_1"</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_analysis() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis using with clauses."""</span></span>
<span id="cb5-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> otc_products() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> otc_uuid:</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> benchmark() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> benchmark_uuid:</span>
<span id="cb5-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> portfolio(</span>
<span id="cb5-8">                portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PORTFOLIO,</span>
<span id="cb5-9">                otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb5-10">            ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> portfolio_uuid:</span>
<span id="cb5-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> analysis(</span>
<span id="cb5-12">                    benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb5-13">                ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> analysis_uuid:</span>
<span id="cb5-14">                    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analysis_results(</span>
<span id="cb5-15">                        analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb5-16">                        portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb5-17">                    )</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span></code></pre></div>
</div>
<p>This is terrible! I am already getting lost, needed few tries to get it right. We ended up with <strong>6</strong> levels of indentation, the code is confusing, the flow is obtuse. Let’s run it either way, to see if at least works.</p>
<div id="9c75ede4" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_title(title: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Print a title padded, surrounded by dashes and empty lines."""</span></span>
<span id="cb6-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> title.center(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis."</span>)</span>
<span id="cb6-6">run_analysis()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
---------------------Running analysis.----------------------

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_d92080bf-a618-45ca-b745-5f210c271e01'}
Preparing analysis using {'benchmark_name': 'benchmark_b84b80ba-f955-484e-baa0-245dd2e37971'}
Running analysis analysis_08cea7f1-86fc-4c06-9497-0206ee22a48f on portfolio portfolio_28c398e6-0bed-400b-8058-ec1084897178.
Cleaning up after analysis_08cea7f1-86fc-4c06-9497-0206ee22a48f.
Cleaning up after portfolio_28c398e6-0bed-400b-8058-ec1084897178.
Cleaning up after benchmark_b84b80ba-f955-484e-baa0-245dd2e37971.
Cleaning up after otc_products_d92080bf-a618-45ca-b745-5f210c271e01.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
<p>Great, the behaviour is as expected, everything is cleaned after nicely. We achieved the goal but the code is unmaintainable. Looks like a subject of the joke <em>“good code makes your job safe for a day, but terrible code in production makes it safe for a lifetime”</em>. Being reckless and with no regard to job security as we are, we’ll fix it.</p>
<p><em>I can clearly recall the most unamanagable and unreadable code I’ve seen in my career and the culprit was fired in the end. Different reasons, long time later, but still. So the joke is just a joke, don’t rely on a bad code as your job insurance.</em></p>
</section>
</section>
<section id="the-exitstack" class="level2">
<h2 class="anchored" data-anchor-id="the-exitstack">The ExitStack</h2>
<p>Here comes in the MVP — <code>ExitStack</code> from <code>contextlib</code>, made for streamlining complex context managment situationships. Conceptually it’s just a First-In-Last-Out (FILO) stack. You put CMs on top, one by one. When CM is pushed to stack, its <code>__enter__</code> method is called and you can intercept the result. ExitStack is a CM itself, it’s <code>__exit__</code> method is just calling the exits of CMs in reverse order.</p>
<div class="cell" data-layout-align="default">
<div class="cell-output-display">
<div>
<p></p><figure class="figure"><p></p>
<div>
<pre class="mermaid mermaid-js">flowchart LR
    A(Enter CM A) ---&gt; B(Enter CM B)
    B ---&gt; C(Enter CM C)
    C ---&gt; D[Do stuff]
    D ---&gt; E(Exit CM C)
    E ---&gt; F(Exit CM B)
    F ---&gt; G(Exit CM A)
    A -.- G
    B -.- F
    C -.- E

</pre>
</div>
<p></p></figure><p></p>
</div>
</div>
</div>
<p>So the flow is exactly the same as in our first attempt. Let’s try it!</p>
<div id="59eaeb0c" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ExitStack</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_analysis_with_exit_stack() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis using exit stack."""</span></span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> ExitStack() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stack:</span>
<span id="cb8-6">        otc_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(otc_products())</span>
<span id="cb8-7">        benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(benchmark())</span>
<span id="cb8-8">        portfolio_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb8-9">            portfolio(</span>
<span id="cb8-10">                portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PORTFOLIO,</span>
<span id="cb8-11">                otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb8-12">            )</span>
<span id="cb8-13">        )</span>
<span id="cb8-14">        analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb8-15">            analysis(</span>
<span id="cb8-16">                benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb8-17">            )</span>
<span id="cb8-18">        )</span>
<span id="cb8-19">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analysis_results(</span>
<span id="cb8-20">            analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb8-21">            portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb8-22">        )</span></code></pre></div>
</div>
<p>That’s amazing (if the approach works)! In our code we end up with only single <code>with</code> clause and the outputs of CMs are defined just like the regular variables. We just need to wrap the CM calls in <code>stack.enter_context</code> method that pushes each CM to the stack.</p>
<div id="bf9dd9a0" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb9-1">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis with exit stack."</span>)</span>
<span id="cb9-2">run_analysis_with_exit_stack()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
-------------Running analysis with exit stack.--------------

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_5335b37e-da8b-4e0f-93b8-d22182c20f84'}
Preparing analysis using {'benchmark_name': 'benchmark_a5f91a53-e401-4e49-9a3a-d2e494f6a79d'}
Running analysis analysis_3492a174-58a4-40fd-b45d-6dc429f4578c on portfolio portfolio_534cfbff-0ab6-404d-9c9b-dca42b04e1c0.
Cleaning up after analysis_3492a174-58a4-40fd-b45d-6dc429f4578c.
Cleaning up after portfolio_534cfbff-0ab6-404d-9c9b-dca42b04e1c0.
Cleaning up after benchmark_a5f91a53-e401-4e49-9a3a-d2e494f6a79d.
Cleaning up after otc_products_5335b37e-da8b-4e0f-93b8-d22182c20f84.</code></pre>
</div>
</div>
<p>It works as well! We also get a package of benefits for free.</p>
<section id="disabling-the-clean-up" class="level3">
<h3 class="anchored" data-anchor-id="disabling-the-clean-up">Disabling the clean up</h3>
<p>Working with API is tricky and debugging could be a painful experience. If we notice something iffy with the results we are reciving, it could be due to a bug at any of the stages. In such case disabling the artifact clean up and examining them is a good way to investigate. How do we do that? Comment out the exit code in our resource CMs? Nope, now we know better. With exit stack approach we just need to clean up the stack before exiting its context.</p>
<div id="ffe271a9" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_analysis_with_exit_stack(</span>
<span id="cb11-2">    clean_up: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-3">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis using exit stack.</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clean_up: Whether to clean up after the objects.</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-9"></span>
<span id="cb11-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> ExitStack() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stack:</span>
<span id="cb11-11">        otc_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(otc_products())</span>
<span id="cb11-12">        benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(benchmark())</span>
<span id="cb11-13">        portfolio_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb11-14">            portfolio(</span>
<span id="cb11-15">                portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PORTFOLIO,</span>
<span id="cb11-16">                otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb11-17">            )</span>
<span id="cb11-18">        )</span>
<span id="cb11-19">        analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb11-20">            analysis(</span>
<span id="cb11-21">                benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb11-22">            )</span>
<span id="cb11-23">        )</span>
<span id="cb11-24">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> analysis_results(</span>
<span id="cb11-25">            analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb11-26">            portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb11-27">        )</span>
<span id="cb11-28"></span>
<span id="cb11-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> clean_up:</span>
<span id="cb11-30">            _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.pop_all()</span>
<span id="cb11-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span></code></pre></div>
</div>
<p>The <code>_ = some_function()</code> is a Pythonic way of disregarding outputs of <code>some_function</code>. Method <code>pop_all</code> actually moves the stack contents to a new stack, but we don’t care about that. We just want to get rid of them from our current one.</p>
<div id="6847ce3d" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb12-1">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis with exit stack and no clean up."</span>)</span>
<span id="cb12-2">run_analysis_with_exit_stack(clean_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
-----Running analysis with exit stack and no clean up.------

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_0b8ce854-0956-46cd-9477-f2db6c075630'}
Preparing analysis using {'benchmark_name': 'benchmark_117998ba-9372-41df-8390-5f475e87ef15'}
Running analysis analysis_bdee8015-85f9-49ea-842a-6d19e2264c8e on portfolio portfolio_eff325dd-e5e2-48e9-a754-8fc061babe3d.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="multiple-portfolios" class="level3">
<h3 class="anchored" data-anchor-id="multiple-portfolios">Multiple portfolios</h3>
<p>Benefit #2 — what do we do if we have multiple managers and many portfolios to re-run for? Or — outside of the example scope — we want to held multiple files open at the same time? Easy, we just push to the stack in a loop or a list comprehension.</p>
<div id="a4d157e7" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb14-1">PORTFOLIOS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"portfolio_3"</span>]</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_analysis_with_exit_stack(clean_up: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb14-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Mock running the analysis for multiple portfolios using exit stack.</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        clean_up: Whether to clean up after the objects.</span></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> ExitStack() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> stack:</span>
<span id="cb14-10">        otc_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(otc_products())</span>
<span id="cb14-11">        benchmark_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(benchmark())</span>
<span id="cb14-12">        portfolio_uuids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-13">            stack.enter_context(</span>
<span id="cb14-14">                portfolio(</span>
<span id="cb14-15">                    portfolio_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_name,</span>
<span id="cb14-16">                    otc_products_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>otc_uuid,</span>
<span id="cb14-17">                )</span>
<span id="cb14-18">            )</span>
<span id="cb14-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> portfolio_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> PORTFOLIOS</span>
<span id="cb14-20">        ]</span>
<span id="cb14-21">        analysis_uuid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.enter_context(</span>
<span id="cb14-22">            analysis(</span>
<span id="cb14-23">                benchmark_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>benchmark_uuid,</span>
<span id="cb14-24">            )</span>
<span id="cb14-25">        )</span>
<span id="cb14-26">        result_parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-27">            analysis_results(</span>
<span id="cb14-28">                analysis_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>analysis_uuid,</span>
<span id="cb14-29">                portfolio_uuid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>portfolio_uuid,</span>
<span id="cb14-30">            )</span>
<span id="cb14-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> portfolio_uuid <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> portfolio_uuids</span>
<span id="cb14-32">        ]</span>
<span id="cb14-33">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(result_parts)</span>
<span id="cb14-34"></span>
<span id="cb14-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> clean_up:</span>
<span id="cb14-36">            _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stack.pop_all()</span>
<span id="cb14-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span>
<span id="cb14-38"></span>
<span id="cb14-39">print_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running analysis with exit stack on multiple portfolios."</span>)</span>
<span id="cb14-40">run_analysis_with_exit_stack(clean_up<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
--Running analysis with exit stack on multiple portfolios.--

Preparing otc_products.
Preparing benchmark.
Preparing portfolio using {'portfolio_name': 'portfolio_1', 'otc_products_uuid': 'otc_products_56f2a75e-89cf-4239-9d8d-7fb6a13c6ba9'}
Preparing portfolio using {'portfolio_name': 'portfolio_2', 'otc_products_uuid': 'otc_products_56f2a75e-89cf-4239-9d8d-7fb6a13c6ba9'}
Preparing portfolio using {'portfolio_name': 'portfolio_3', 'otc_products_uuid': 'otc_products_56f2a75e-89cf-4239-9d8d-7fb6a13c6ba9'}
Preparing analysis using {'benchmark_name': 'benchmark_cd693212-f28d-4321-83ad-7ea03f379a70'}
Running analysis analysis_cf52685a-a719-4208-b997-4229473d1981 on portfolio portfolio_47d63955-2d58-4919-ad10-f10eab83e790.
Running analysis analysis_cf52685a-a719-4208-b997-4229473d1981 on portfolio portfolio_2c28da60-7756-4741-95e1-e834e5f7994f.
Running analysis analysis_cf52685a-a719-4208-b997-4229473d1981 on portfolio portfolio_fdba5faf-5b18-4e9e-9ad7-a090e0f68606.
Cleaning up after analysis_cf52685a-a719-4208-b997-4229473d1981.
Cleaning up after portfolio_fdba5faf-5b18-4e9e-9ad7-a090e0f68606.
Cleaning up after portfolio_2c28da60-7756-4741-95e1-e834e5f7994f.
Cleaning up after portfolio_47d63955-2d58-4919-ad10-f10eab83e790.
Cleaning up after benchmark_cd693212-f28d-4321-83ad-7ea03f379a70.
Cleaning up after otc_products_56f2a75e-89cf-4239-9d8d-7fb6a13c6ba9.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Today we’ve learnt a new Python tool and seen an example of how quantitative developer might set up risk reporting job on vendor RMS. Sound like a very niche and unlikely situation for you? Maybe. But the moral here is to go and explore the Python standard library. Without using any additional packages we improved readability and flexibility of our initial attempt. Python really has <em>‘batteries included’</em>, <a href="https://docs.python.org/3/library/index.html">see</a> for yourself!</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the whole code <a href="../../scripts/exit_stack.py">here</a>.</p>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Pythonic Distractions</category>
  <guid>https://bwrob.github.io/posts/exit-stack/</guid>
  <pubDate>Sat, 11 May 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/posts/exit-stack/flowchart.png" medium="image" type="image/png" height="41" width="144"/>
</item>
<item>
  <title>Strategies for Numerical Integration</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/strategy-pattern-integration/</link>
  <description><![CDATA[ 






<section id="numerical-integration" class="level2">
<h2 class="anchored" data-anchor-id="numerical-integration">Numerical integration</h2>
<p>Calculation of many financial methods or metrics relies on a mathematical tool called numerical integration. In simple terms, numerical integration takes a function that represents a continuous process (like the changing value of an investment over time) and approximates the area under its curve. This area can then be used to calculate important quantities, like the total return of the investment or price of a derivative instrument.</p>
<p>So we are tasked with a problem, and one that has many different ways of solving, or rather approximating the solution. You most likely (taking into account you’re still reading this) encountered rectangle rule, or Riemann summation in your Calculus 101 course/self-learning. But there are many other techniques, which we call schemes.</p>
<p>For quantitative analysts, the choice of the integration method matters. Different integration schemes offer varying levels of accuracy and efficiency. Unfortunately there’s no <em>best technique</em>. Same algorithm can be a perfect fit for problems with certain characteristics, but unusable for others. And then there is the old as time performance vs.&nbsp;accuracy trade-off.</p>
<p>As programmers working in finance, we need to be adaptable and leverage solutions that allow us to switch between these methods seamlessly.</p>
</section>
<section id="design-patterns" class="level2">
<h2 class="anchored" data-anchor-id="design-patterns">Design patterns</h2>
<p>This is where design patterns come in. Design patterns are reusable solutions to common programming problems. Their widespread adoption in software development is largely attributed to the publication of <a href="https://www.oreilly.com/library/view/design-patterns-elements/0201633612/">Design Patterns: Elements of Reusable Object-Oriented Software</a> in 1994. Authored by E. Gamma, R. Helm, R. Johnson, and J. Vlissides (often referred to as the “Gang of Four” or GoF), this book cataloged 23 essential software design patterns. These patterns provided solutions to common design problems in object-oriented programming, promoting code reusability, maintainability, and flexibility.</p>
<p>Some design patterns can feel clunky or inelegant when implemented in Python. The language itself often has built-in features or idioms that achieve the same result in a more Pythonic way (meaning it follows Python’s style and conventions). Sometimes, design patterns can be seen as overcomplicating simple problems. On the other hand, usage of well-known and understood patterns may enhance your engineering skills and improve code readability.</p>
<p>Ultimately, the decision of whether or not to use design patterns in Python depends on the specific context of your project and your coding style. There’s no right or wrong answer. But first, you need to know the classics to diss the classics. We’ll hold on with the dissing for now, cause in the example below chosen design pattern makes for a very clean implementation. You’ll see for yourself.</p>
</section>
<section id="strategy-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strategy-pattern">Strategy pattern</h2>
<p>We know the stage now — one problem statement, multiple strategies to tackle. Important observation here is that we don’t actually care which one is used. When you substitute the integral value to client code — a formula or further algorithm — it’s irrelevant how it was computed, as long its correct to required level of accuracy. This means that the problem should be decoupled from algorithms to solve it. We should target a implementation where you can state a problem <em>Calculate the integral of</em> <img src="https://latex.codecogs.com/png.latex?%5Csin(x)"> <em>from</em> <img src="https://latex.codecogs.com/png.latex?0"> <em>to</em> <img src="https://latex.codecogs.com/png.latex?%5Cpi"> and then just throw different algorithms at it to obtain a solution. So let’s get coding!</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I will show you this pattern through an example. If you prefer more generic setup see Refactoring Guru’s <a href="https://refactoring.guru/design-patterns/strategy/python/example">implementation</a>. The customary ‘software engineering’ example used to present the SDP is sorting a list of integers using different sorting algorithms.</p>
</div>
</div>
</section>
<section id="abstract-schema" class="level2">
<h2 class="anchored" data-anchor-id="abstract-schema">Abstract schema</h2>
<p>Each scheme that we’d come up with, even the most complex ones, would have the same main purpose — ‘integrate’. To make the implementation for it, we create a template class that all concrete schemes will inherit from.</p>
<div id="77dd73c3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> abc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ABC, abstractmethod</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> IntegrationScheme(ABC):</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Abstract base class for integration schemas."""</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@abstractmethod</span></span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> integrate(</span>
<span id="cb1-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb1-10">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb1-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb1-12">        start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb1-13">        end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb1-14">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb1-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Abstract method for integrating a function."""</span></span></code></pre></div>
</div>
<p>Unpacking this, we already used some nifty Pythonic tricks in those few lines:</p>
<ul>
<li><code>ABC</code> is a way of defining abstract classes. If you try to create an object of a class inheriting from <code>ABC</code> you’d get an error. It is used as a base class for concrete subclasses and serves as a template. Think of an example of <em>animal</em> and <em>cat</em> from the real world. You’ve never seen an abstract animal being in your life (that would be a truly transcendental experience). But you’ve hopefully seen many cats.</li>
<li>Decorator <code>@abstractmethod</code> signifies that the method is just a mock-up. It needs to be present and overridden in all concrete classes that inherit from <code>IntegrationScheme</code></li>
<li>Type annotations like <code>start: float</code> don’t affect the script behavior in any way. Those are only for us to not get lost in Python’s dynamic typing magic. They can also be leveraged by static type checkers like <a href="https://mypy.readthedocs.io/en/stable/#">mypy</a> to flag problems with your code before you run it — just like in compiled languages.</li>
<li><code>Callable</code> annotation signifies a function-like object something you can <em>call</em> through <code>()</code>, like <code>some_func(one, second=two)</code>’ — here <code>some_func</code> is a callable. Calls to an object can be implemented by writing the <code>__call__</code> method for the class.</li>
</ul>
</section>
<section id="concrete-schema-implementations" class="level2">
<h2 class="anchored" data-anchor-id="concrete-schema-implementations">Concrete schema implementations</h2>
<section id="rectangle-rule" class="level3">
<h3 class="anchored" data-anchor-id="rectangle-rule">Rectangle Rule</h3>
<p>It’s the simplest way of estimating the area under a curve you can think of — cover it with smaller and smaller rectangles with the value of a function at the leftmost point as height constant width.</p>
<p><a href="https://en.wikipedia.org/wiki/File:Rectangle_rule.gif"><img src="https://bwrob.github.io/posts/strategy-pattern-integration/Rectangle_rule.gif" class="img-fluid" style="width:100.0%"></a></p>
<p>Implementing this idea is trivial when using <a href="https://numpy.org/">numpy</a>, but let’s add some syntactic sugar so the class is sweeter to work with.</p>
<div id="2beadd54" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> RectangleScheme(IntegrationScheme):</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Schema for rectangle integration."""</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb2-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-8">        steps: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="cb2-9">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initializes the rectangle integration config."""</span></span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Steps must be greater than 0."</span>)</span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> steps</span>
<span id="cb2-14"></span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb2-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the string representation of the schema."""</span></span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Rectangle schema with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_steps<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> steps"</span></span>
<span id="cb2-18"></span>
<span id="cb2-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> integrate(</span>
<span id="cb2-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-21">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb2-22">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb2-23">        start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb2-24">        end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb2-25">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb2-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Integrates a function using rectangle integration."""</span></span>
<span id="cb2-27">        x_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(start, end, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._steps)</span>
<span id="cb2-28">        values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> integrand(x_points)</span>
<span id="cb2-29">        dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.float64(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._steps)</span>
<span id="cb2-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dx</span></code></pre></div>
</div>
<ul>
<li><code>RectangleScheme</code> subclasses <code>IntegrationScheme</code> so we need to implement the <code>integrate</code> method.</li>
<li><code>__init__</code> method is run each time object of this class is requested. It sets the stage — in this case all we need is the number of rectangles we are to use. To be cautious, we check if the <code>steps</code> number is positive.</li>
<li><code>__str__</code> is called when we try to represent the object as string — ex. in f-strings or directly calling <code>str()</code>. We just taught our class objects to introduce themselves nicely.</li>
<li><code>integrate</code> is as simple as the idea behind it:
<ul>
<li>get the equaly spaced x values,</li>
<li>calculate <code>integrand</code> values at the points,</li>
<li>sum it up,</li>
<li>multiply the sum by the distance between two consecutive points.</li>
</ul></li>
</ul>
</section>
<section id="simple-monte-carlo" class="level3">
<h3 class="anchored" data-anchor-id="simple-monte-carlo">Simple Monte Carlo</h3>
<p>This guy sounds fancy with its luxurious Monaco vibes, but it’s just a peasant in a nice suit. Instead of looking at equaly-spaced points, we shuffle them from uniform distribution on the interval of integration. We calculate the integrand function values at those points and sum them up. Then multiply the sum by the average distance between points and through the magic of probability theory (and not opening actual probability textbook in 10 years) you get a good probabilistic estimator of the integral value. The implementation is analogous to the <code>RectangleScheme</code>.</p>
<div id="63218c15" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Optional</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> MonteCarloScheme(IntegrationScheme):</span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Schema for Monte Carlo integration."""</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb3-8">        random_points: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="cb3-9">        random_seed: Optional[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb3-10">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb3-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initializes the rectangle integration config."""</span></span>
<span id="cb3-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> random_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb3-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Points must be greater than 0."</span>)</span>
<span id="cb3-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_points</span>
<span id="cb3-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_seed</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb3-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the string representation of the schema."""</span></span>
<span id="cb3-19">        points_msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Monte Carlo schema with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__random_points<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> random points"</span></span>
<span id="cb3-20">        seed_msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f" and seed </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>__random_seed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_seed <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb3-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>points_msg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>seed_msg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> integrate(</span>
<span id="cb3-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb3-25">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb3-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb3-27">        start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb3-28">        end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb3-29">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb3-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Integrates a function using Monte Carlo integration."""</span></span>
<span id="cb3-31">        np.random.seed(seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_seed)</span>
<span id="cb3-32">        x_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(start, end, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_points)</span>
<span id="cb3-33">        values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> integrand(x_points)</span>
<span id="cb3-34">        average_dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.float64(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__random_points)</span>
<span id="cb3-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> average_dx</span></code></pre></div>
</div>
<ul>
<li><code>Optional[int]</code> annotation means that the value of <code>random_seed</code> can be a <code>float</code> or <code>None</code>. With a set seed we get a reproducable results — good for testing but not for actual usage. Hence the default value here is <code>None</code>.</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>Optional</code> stands for <em>could be <code>None</code> as well</em>, it doesn’t affect if the input is mandatory or not. In our case it’s not, but thats stated by the <code>= None</code> part. In Python 3.11 onwards it’s recommended to use <code>int | None</code> instead.</p>
</div>
</div>
</section>
</section>
<section id="integrator" class="level2">
<h2 class="anchored" data-anchor-id="integrator">Integrator</h2>
<p>What’s left is to have a way of defining the problem to solve and define how our schemes (strategies) interact with it.</p>
<div id="dc101b51" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""An integrator class that allows to perform integration using different schemas."""</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Callable</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Integrator:</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""An integrator class that allows to perform integration using different</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    schemas as strategies."""</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb4-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb4-10">        integrand: Callable[[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>],</span>
<span id="cb4-11">        interval_start: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb4-12">        interval_end: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>,</span>
<span id="cb4-13">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initializes the integrator class."""</span></span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> interval_end:</span>
<span id="cb4-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start value must be less than end value."</span>)</span>
<span id="cb4-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__integrand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> integrand</span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_start</span>
<span id="cb4-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> interval_end</span>
<span id="cb4-20"></span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(</span>
<span id="cb4-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb4-23">        schema: IntegrationScheme,</span>
<span id="cb4-24">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb4-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Calculates the definite integral value of a function.</span></span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb4-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            schema: integration schema</span></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-31">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Using </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>schema<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb4-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> schema.integrate(</span>
<span id="cb4-33">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__integrand,</span>
<span id="cb4-34">            start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_start,</span>
<span id="cb4-35">            end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__interval_end,</span>
<span id="cb4-36">        )</span></code></pre></div>
</div>
<ul>
<li>The <code>__init__</code> takes in the obvious parameters — function to integrate, start and end of the interval. It also checks if it’s a proper integral.</li>
<li>We get to implement our own <code>__call__</code> method now. It’s clear what <code>Integrator</code> class does. No need to have a method with a descriptive name like <code>Integrator.integrate</code>. To use it you pass through the integration scheme into the integrator — notice annotation of the abstract <code>IntegrationScheme</code>. It prints the info on strategy used (using the <code>__str__</code> methods) and calls <code>integrate</code> method of the scheme. No care in the world on how the value is actually calculated.</li>
</ul>
</section>
<section id="lets-integrate" class="level2">
<h2 class="anchored" data-anchor-id="lets-integrate">Let’s integrate!</h2>
<p>Ok, now to the integrating! Let’s set up the stage:</p>
<div id="15b9624e" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb5-1">start, end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>:</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.sin(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.cos(x)</span></code></pre></div>
</div>
<p>Excited? Don’t be… yet.</p>
<p>We should get some benchmark value first. As none of us would bother to integrate this by hand, we’ll use SciPy. Unexpectedly (SciPy uses C and Fortran underneath), we get the result in a breeze and it is very close to <a href="https://www.wolframalpha.com/input?i=integrate+sin%28x%29+%2B+cos%28x%29+over+0+to+pi%2F2">actual value of 2.0</a>.</p>
<div id="cc53bba6" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.integrate <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> quad</span>
<span id="cb6-2"></span>
<span id="cb6-3">scipy_quad, err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quad(f, start, end)</span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(scipy_quad)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.9999999999999998</code></pre>
</div>
</div>
<p>Now let’s use our <code>Integrator</code> class and see.</p>
<div id="6df3de84" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode numberSource python number-lines code-with-copy"><code class="sourceCode python"><span id="cb8-1">integrator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Integrator(</span>
<span id="cb8-2">    f,</span>
<span id="cb8-3">    interval_start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>start,</span>
<span id="cb8-4">    interval_end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>end,</span>
<span id="cb8-5">)</span>
<span id="cb8-6"></span>
<span id="cb8-7">iterations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)]</span>
<span id="cb8-8">rectangle_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [integrator(RectangleScheme(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> iterations]</span>
<span id="cb8-9">mc_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [integrator(MonteCarloScheme(random_points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> iterations]</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Rectangle schema results:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rectangle_results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span>
<span id="cb8-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Monte Carlo schema results:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mc_results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Using Rectangle schema with 1 steps.
Using Rectangle schema with 32 steps.
Using Rectangle schema with 1024 steps.
Using Rectangle schema with 32768 steps.
Using Rectangle schema with 1048576 steps.
Using Monte Carlo schema with 1 random points.
Using Monte Carlo schema with 32 random points.
Using Monte Carlo schema with 1024 random points.
Using Monte Carlo schema with 32768 random points.
Using Monte Carlo schema with 1048576 random points.
Rectangle schema results:
[np.float64(1.5707963267948966), np.float64(1.986172817555692), np.float64(1.9995804632216618), np.float64(1.9999869013603688), np.float64(1.9999995906791057)].
Monte Carlo schema results:
[np.float64(1.6744749528914122), np.float64(1.9909974700320354), np.float64(2.000216564426225), np.float64(1.9996264538512554), np.float64(2.0002108183415483)].</code></pre>
</div>
</div>
<p>The performance and convergence of those schemes is terrible. Like anything in Python, if you want robust and performing code, you need to implement it with C or use any/all of the enhancement frameworks that Python provides (see Numba). Additionally, the simple methods we implemented are very naive. The standard numerical packages use sophisticated algorithms honed for many decades.</p>
<p>But I was wrong! You <em>should</em> be excited! We just learned new approach for setting up extensible and readable code! Look how cleanly the problem statement is separated form different strategies to solve it.</p>
<p>If you are now wondering how much we could improve by using more advanced techniques (like <a href="http://proceedings.mlr.press/v28/carpentier13.pdf">stratified Monte Carlo</a> or <a href="https://www.wikiwand.com/en/Adaptive_quadrature">adaptive quadrature</a>) you just need to implement new subclass of `IntegrationSchema’ and you’re done. No changes to the existing code are needed, just simple extension. And that’s the idea behind strategy pattern.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Download the whole code <a href="../../scripts/integration.py">here</a>.</p>
</div>
</div>


</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <category>Pythonic Distractions</category>
  <guid>https://bwrob.github.io/posts/strategy-pattern-integration/</guid>
  <pubDate>Sat, 27 Apr 2024 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>bwrob </dc:creator>
  <link>https://bwrob.github.io/posts/welcome/</link>
  <description><![CDATA[ 






<p>This is the first post in the bwrob blog. Welcome!</p>
<p>This blog is a battleground of sorts, but instead of swords and shields, we wield the weapons of Python and C++. I’m a mathematician turned quantitative analyst turned software engineer. You can expect high standard deviation of topics here.</p>
<p>Here, I’ll document my coding conquests, from building practical and impractical tools, exploring financial concepts, to playing around with physics simulations.</p>
<p>Expect a healthy dose of humor alongside the technical discussions. Let’s be honest, even the most complex problems are more enjoyable with a sprinkle of laughter. So, grab a cup of coffee and join me on this exploration – even if it’s just for one interested reader!</p>



<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a> ]]></description>
  <guid>https://bwrob.github.io/posts/welcome/</guid>
  <pubDate>Mon, 22 Apr 2024 22:00:00 GMT</pubDate>
  <media:content url="https://bwrob.github.io/logo/python_mug.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
