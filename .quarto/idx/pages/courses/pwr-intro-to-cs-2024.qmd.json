{"title":"Wstęp do programowania (PWr Zima 2024)","markdown":{"yaml":{"title":"Wstęp do programowania (PWr Zima 2024)","about":{"template":"marquee"}},"headingText":"Zasady zaliczenia","containsRefs":false,"markdown":"\n\n\nLaboratoria komputerowe do wykładu Andrzeja Giniewicza.\n\n\n\nOgólne zasady zaliczenia kursu można znaleźć na [stronie kursu u wykładowcy](https://alfa.im.pwr.edu.pl/~giniew/doku.php?id=rok2425:zimowy:wdp).\n\nDoprecyzowania obowiazujace w moich grupach:\n\n:::{.panel-tabset}\n### Listy zadań\n\nConajmniej pierwsze 4 listy będziemy robić na zajęciach, w systemie deklaracyjnym. Po zajęciach proszę o przesłanie rozwiązań. Kolejne listy zadań będą w formie zadań domowych, do zrobienia i przesłania przed zajęciami. Rozwiązania będą omiawiane i wyrywkowo sprawdzane w trakcie zajęć.\n\n### Zadanie domowe\n\nWyobraź sobie, że pomagasz młodszemu koledze lub koleżance, którzy dalej są w liceum. Chcesz przygotować interaktywny notebook tłumaczący jakieś zagadnienie z zakresu matematyki, fizyki, informatyki lub chemii. Wybrany temat może, ale nie musi pochodzić z zakresu nauczania w szkole średniej. Ma być zrozumiały i dostępny dla ucznia liceum. *Kod Python nie musi być zrozumiały dla licealisty*. Polecam wybrać temat, który Ciebie też interesuje.\n\nW Twoim dokumencie powinny znaleźć się prawidłowo sformatowane komórki tekstowe, z nagłówkami oraz wzorami. Umieść również obliczenia wykonane w języku Python, jako ilustrację do niektórych przykładów, rozwiązanie zadań, lub wizualizację. Można, ale nie trzeba używać modułów Python nie przedstawionych na kursie.\n\nZa zadanie domowe można dostać maksymalnie 10 punktów. Po 3 za użycie Pythona, skład i formatowanie komórek Markdown oraz treść\ntłumaczaca zagadnienie. Dodatkowy punkt za ogólna schludność i estetykę zeszytu.\n\nGdybyś chciał wydrukować notatnik, powinien zająć przynajmniej dwie strony A4 przy standardowym rozmiarze kroju pisma (podpowiedź - możesz sprawdzić podgląd wydruku w menu File w narzędziu Jupyter Lab, jeśli trudno ocenić Ci ile już napisałeś).\n\nTermin oddania do 19 listopada (grupa wtorkowa) / 21 listopada (grupa czwartkowa). Zadanie domowe proszę przesyłać mailowo. Proszę załaczyć informację czy zgadzasz się na pokazanie Twojej pracy innym studentom i opublikowanie jej tutaj jako przyklad.\n\n### Odpowiedź ustna\n\nOd 7-mych zajęć można zgłaszać się na ochotnika, co najmniej 3 ochotników jest wymaganych na jednych zajęciach.\n\n### Projekt grupowy\n\nMożna się łączyć w grupy w obrębie moich 2 zajęć (wtorek 7:30 i czwartek 7:30), ale nie poza. Zakładam w sumie 5-8 grup projektowych.\n\n### Aktywność\n\nPunkty zostaną przydzielone na zasadzie normalizacji rozkładu aktywności na zajęciach. Gwarantuję, że jedna *duża* aktywność (np. przedstawienie pełnego rozwiązania z listy) będzie dawała co najmniej jeden punkt.\n:::\n\n\n## Python\n\n:::{.panel-tabset}\n\n### Przykłady zeszytów Jupyter\n\nPrzykłady ilustrujące wachlarz możliwości zeszytów Jupyter i Markdown w zastosowaniach matematycznych.\nWymagają one osobnych ustawień środowiska programistycznego i zewnętrznych narzędzi.\nPolecam zapoznanie się z nimi czysto ilustracyjnie jako motywacja do nauki.\n\n- Wizualizacja [zbioru Mandelbrota](https://www.wikiwand.com/pl/articles/Zbi%C3%B3r_Mandelbrota) obliczana na karcie graficznej - [link](https://github.com/bwrob/bwrob.github.io/tree/main/pages/notebooks/mandebrot.ipynb)\n- Pobieranie i analiza danych o cenie akcji spółki giełdowej - [link](https://github.com/bwrob/bwrob.github.io/tree/main/pages/notebooks/cd_projekt_red.ipynb)\n- Numeryczne rozwiązanie [równań różniczkowych cząstkowych](https://www.wikiwand.com/pl/articles/R%C3%B3wnanie_r%C3%B3%C5%BCniczkowe_cz%C4%85stkowe) - [link](https://github.com/jorgensd/dolfinx-tutorial/blob/main/chapter1/fundamentals_code.ipynb)\n- Rozwiązania zadań z podstaw [algebry liniowej](https://www.wikiwand.com/pl/articles/Algebra_liniowa) - [link](https://github.com/weijie-chen/Linear-Algebra-With-Python/blob/master/notebooks/Chapter%201%20-%20Linear%20Equation%20System.ipynb)\n- Cała obecna strona została utworzona z wykorzystaniem Markdownu i Pythona korzystając z technologii [Quarto]](https://quarto.org/) - [link](https://github.com/bwrob/bwrob.github.io/blob/main/pages/courses/pwr-intro-to-cs-2024.qmd)\n\n### Komentarze do list zadań\n\n:::{.panel-tabset}\n\n\n### Lista 1\n\nPython lista 1 - wyrażenia matematyczne\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_1.ipynb)\n\n- Zamiast\n  ```{python}\n  import math\n  pole = math.pi * 10**2\n  ```\n  warto użyć\n  ```{python}\n  from math import pi\n  pole = pi * 10**2\n  ```\n  Zmniejszamy ilość pisania przy wielokrotnym użyciu, a sam import jest wydajniejszy co może mieć znaczenie przy bardziej zaawansowanych zadaniach.\n\n- Funkcje pierwiastka kwadratowego i podnoszenia do potęgi $1/2$ są oczywiście równoważne, natomiast polecana jest `math.sqrt`. Mniej ogólne algorytmy są zazwyczaj lepiej zoptymalizowane (przy naszych zastosowaniach nie ma to jednak znaczenia).\n  ```{python}\n  from math import sqrt\n  x = 2\n  y = sqrt(x)\n  z = x**0.5\n  print(y, z, y == z)\n  ```\n\n- W *zadaniu 4* występuje funkcja podłoga $ \\lfloor x \\rfloor $.  Jest to największa liczba całkowita mniejsza niż $x$. W Pythonie można używać funkcji `math.floor`.\n  ```{python}\n  from math import floor\n  x = 2.5\n  y = 2.9\n  z = -3.1\n  print(floor(x), floor(y), floor(z))\n  ```\n\n- *Zadanie 5* pokazuje, jak ważne jest umiejetne korzystanie ze zmiennych pomocniczych.\n  ```{python}\n  from math import sqrt, pi\n\n  suma_w_nawiasie = 5 ** 4 + 53 * sqrt(89)\n\n  mianownik = 80 * sqrt(15) * suma_w_nawiasie ** (3/2)\n  licznik = 3308 * suma_w_nawiasie - 3 * sqrt(89)\n  pi_przyblizenie = mianownik / licznik\n\n  print(round(pi_przyblizenie, 10))\n  print(round(pi_przyblizenie, 10) == round(pi, 10))\n  ```\n  W powyższym kodzie dużo łatwiej wyłapac bład niż w jednolinijkowym gigancie.\n\n- Do *zadania 6* wrócimy jeszcze raz po funkcjach i pętlach aby zaimplemetować dużo czytelniejsze rozwiązanie.\n\n### Lista 2\n\nPython lista 2 - napisy\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_2.ipynb)\n\n- W razie gdy chcemy sprawdzić, gdzie w systemie zapisany jest dany plik Python albo zeszyt Jupyter poniższe drukuje obecna ścieżkę robocza (Current Working Directory).\n  ```{python}\n  import os\n  print(os.getcwd())\n  ```\n\n\n### Lista 3\n\nPython lista 3 - listy i słowniki\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_3.ipynb)\n\n\nKomentarze dla zaawansowanych:\n\n**Zadanie 2**\n\nKluczem do pisania szybkiego kodu w Pythonie jest jak najczestsze kożystanie z wbudowanych funkcji, które wykonywane sa bezposrednio w języku niskopoziomowym.\n\nPrzykładowo, to zadanie można elegancko rozwiazac za pomoca wbudowaniej biblioteki `itertools`. Składaja się na nia pomocnicze funkcje rozwiazujace często potrzebne funkcjonalności dookoła iteratorów:\n\n```{python}\nfrom itertools import accumulate\nL = list(accumulate((-1) ** i / (i) for i in range(1, 101)))\nprint(L)\n```\nStosujemy tu potrójne złożenie generatorów. Generatory to obiekty, po których możemy iterować, a zwaracaja wartości pojedynczo. Często wykonywane jest to leniwie, dopiero kiedy sa o to zapytane.\n\n* `range(1, 101)` tworzy generator liczb od 1 do 100, nie trzyma tych liczb od razu w pamięci, tylko wie która jest następna.\n*  `(func(n) for n in range(1, 101))` tworzy generator liczb od 1 do 100, a potem wykona operacje na nich.\n*  `accumulate` bierze coś po czym moźna iterować i operator binarny (domyślnie `+`) i zwraca generator częściowych wartości używania tego operatora na wszystkich elementach generatora.\n*  `list` tworzy listę zawierajaca elementy złożonego generatora, zmusza do materializacji wynikow. Wszystko powyżej było tworzone leniwie.\n\n**Zadanie 5**\n\nIterowanie się po wszystkich elementach zbioru często da się zastapić za pomoca matematycznych operacji na zbiorach, które sa dobrze zoptymalizowane.\n\n```{python}\nS = {\"dolnośląskie\", \"lubuskie\", \"wielkopolskie\"}\nM = {\"Wrocław\", \"Opole\", \"Zielona Góra\", \"Gorzów Wielkopolski\"}\nD = {\n    \"dolnośląskie\": {\"Wrocław\"},\n    \"kujawsko-pomorskie\": {\"Bydgoszcz\", \"Toruń\"},\n    \"lubelskie\": {\"Lublin\"},\n    \"lubuskie\": {\"Gorzów Wielkopolski\", \"Zielona Góra\"},\n    \"łódzkie\": {\"Łódź\"},\n    \"małopolskie\": {\"Kraków\"},\n    \"mazowieckie\": {\"Warszawa\"},\n    \"opolskie\": {\"Opole\"},\n    \"podkarpackie\": {\"Rzeszów\"},\n    \"podlaskie\": {\"Białystok\"},\n    \"pomorskie\": {\"Gdańsk\"},\n    \"śląskie\": {\"Katowice\"},\n    \"świętokrzyskie\": {\"Kielce\"},\n    \"warmińsko-mazurskie\": {\"Olsztyn\"},\n    \"wielkopolskie\": {\"Poznań\"},\n    \"zachodniopomorskie\": {\"Szczecin\"},\n}\n\nprint(set.union(*D.values()))\nprint({key for key, value in D.items() if value.intersection(M)})\n```\n\n**Zadanie 6**\n\nW Pythonie 3.8+ jest to możliwe za pomoca operatora `:=` (walrus operator). Pozwala na tworzenie zmiennych pomocniczych wewnatrz wyrażeń języka.\n\n```{python}\nfrom math import sin, cos, radians\n\nn = 101\npunkty = {\n    (angle:=i * 360 / n): (cos(radians(angle)), sin(radians(angle)))\n    for i in range(n)\n}\nprint(punkty)\n```\n    Inna metoda jest użycie generatora wewnatrz listy składanej.\n\n```{python}\npunkty = {\n    angle: (cos(radians(angle)), sin(radians(angle)))\n    for angle in (i * 360 / n for i in range(n))\n}\nprint(punkty)\n```\n\nPlusem użycia generatora, a nie osobnej listy jest to, że jest on leniwie ewaluowany - jeden element na raz. Nie trzymamy katów w pamieci dwa razy.\n\n### Lista 4\n\nPython lista 4 - funkcje.\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_4.ipynb)\n\n* Na zajęciach zobaczyliśy jak zapisać zadanie Fizz Buzz bez porównania modulo 15:\n\n  ```{python}\n  def fizz_buzz(\n      liczba: int,\n  ) -> str:\n      \"\"\"Wyznacz FizzBuzz dla liczby.\"\"\"\n      msg = \"\"\n      if liczba % 3 == 0:\n          msg += \"Fizz\"\n      if liczba % 5 == 0:\n          msg += \"Buzz\"\n      return msg or str(liczba)\n\n\n  print([fizz_buzz(i) for i in range(1, 16)])\n  ```\n\n  Jest to szczególnie istotne, jeżeli dodamy dodatkowo `Mizz` dla liczb podzielnych przez 7 i `Duzz` dla liczb podzielnych przez 8. Funkcję można wtedy jeszcze bardziej uprościć za pomoca słownika i listy składanej:\n\n  ```{python}\n  def fizz_buzz(\n      liczba: int,\n  ) -> str:\n      \"\"\"Wyznacz FizzBuzz dla liczby.\"\"\"\n      msg = \"\"\n      mapa = {\n          3: \"Fizz\",\n          5: \"Buzz\",\n          7: \"Mizz\",\n          8: \"Duzz\",\n      }\n      lista_slow = [mapa[i] for i in mapa if liczba % i == 0]\n      msg = \"\".join(lista_slow)\n      return msg or str(liczba)\n\n  print([fizz_buzz(i) for i in range(1, 16)])\n  ```\n\n  Sprawdzanie wszystkich podzielności miesznych było by bardzo niekomfortowe.\n\n### Lista 5\n\nPython lista 5 - numpy, matplotlib.\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_5.ipynb)\n\n### Lista 6\n\nPython lista 6 - testowanie, wyjatki\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_6.ipynb)\n\n:::\n\n:::\n\n\n## Bash i git\n\n:::{.panel-tabset}\n\n### Nawigacja systemu plików\n\nPrzyklady komend uzytych na zajeciach (rozszyfrowanie ich jako zadanie dla czytelnika):\n\n```{bash}\nhistory -c\npwd\ncd ~\nmkdir test\ncd test\ntouch test.txt\ncode test.txt\ncp test.txt test2.txt\nmv test2.txt test3.txt\nrm test2.txt\necho \"Hello World\" >> test3.txt\ncat test3.txt\nwc < test3.txt\ncat test.txt test3.txt > test4.txt\ncd ..\nrm -ri test\nls -la\nhistory 1 > notatki.txt\n```\n\n### Skryptowanie\n\nPrzykladowy skrypt zapisany jako plik `hello.sh`:\n\n```{bash}\n#! bash\n\necho \"Hello $1 !\"\n\nif [ \"$1\"==\"Flip\" ] ; then\n\techo ”Long time no see ! ”\nelif [ \"$1\"==\"Flap\" ] ; then\n\techo \"What do you want?\"\nelse\n\techo \"Who are you again ?\"\nfi\n\nif ! [ -f log.txt ] ; then\n\ttouch log.txt\nfi\necho \"$(date) User $1 visited.\" >> log.txt\n\nfor i in $(seq 5 -1 1)\ndo\n\techo \"Konczymy za $i\"\ndone\n\n```\n\nJego wykonanie:\n\n```{bash}\nchmod +x hello.sh\n./hello.sh Flap\n```\n\nSkrypt w pythonie:\n\n```{python}\n#! python3\n\nimport sys\n\nprint(f\"Hello !\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        for x in sys.argv[1:]:\n            print(f\"Nice to meet you {x}\")\n\n```\n\nJego wykonanie:\n\n```{bash}\nchmod +x hello.py\n./hello.py Flip Flap Flop\n```\n\n### Git i GitLab\n\nUstawienie klucza SSH:\n\n```{bash}\nssh-keygen -t ed25519 -C \"imie nazwisk, indeks\"\n```\n\nKlucz publiczny powinien byc w pliku `~/.ssh/id_ed25519.pub`. Na koncie GitLab powinien byc dodany klucz publiczny SSH. Ustawienie klucza SSH w systemie lokalnym:\n\n```{bash}\neval $(ssh-agent)\nssh-add <sciezka klucza>\nssh git@gitlab.com\n```\n\nTworzymy repozytorium `lekcja-1`na stronie GitLab. Klikamy na niebieskie przycisk `Code` i kopiujemy to co pod SSH.\nSkopiowanie repozytorium GitLab i komit podpisany kluczem SSH:\n```{bash}\ngit clone <sciezka ssh>\ngit config --global user.name \"<imie nazwisko>\"\ngit config --global user.email \"<email pwr>\"\ngit config --local gpg.format ssh\ngit config --local user.signingkey /ścieżka/do/klucza/id_ec25519.pub\ngit switch --create main\n```\n\n:::\n","srcMarkdownNoYaml":"\n\n\nLaboratoria komputerowe do wykładu Andrzeja Giniewicza.\n\n\n## Zasady zaliczenia\n\nOgólne zasady zaliczenia kursu można znaleźć na [stronie kursu u wykładowcy](https://alfa.im.pwr.edu.pl/~giniew/doku.php?id=rok2425:zimowy:wdp).\n\nDoprecyzowania obowiazujace w moich grupach:\n\n:::{.panel-tabset}\n### Listy zadań\n\nConajmniej pierwsze 4 listy będziemy robić na zajęciach, w systemie deklaracyjnym. Po zajęciach proszę o przesłanie rozwiązań. Kolejne listy zadań będą w formie zadań domowych, do zrobienia i przesłania przed zajęciami. Rozwiązania będą omiawiane i wyrywkowo sprawdzane w trakcie zajęć.\n\n### Zadanie domowe\n\nWyobraź sobie, że pomagasz młodszemu koledze lub koleżance, którzy dalej są w liceum. Chcesz przygotować interaktywny notebook tłumaczący jakieś zagadnienie z zakresu matematyki, fizyki, informatyki lub chemii. Wybrany temat może, ale nie musi pochodzić z zakresu nauczania w szkole średniej. Ma być zrozumiały i dostępny dla ucznia liceum. *Kod Python nie musi być zrozumiały dla licealisty*. Polecam wybrać temat, który Ciebie też interesuje.\n\nW Twoim dokumencie powinny znaleźć się prawidłowo sformatowane komórki tekstowe, z nagłówkami oraz wzorami. Umieść również obliczenia wykonane w języku Python, jako ilustrację do niektórych przykładów, rozwiązanie zadań, lub wizualizację. Można, ale nie trzeba używać modułów Python nie przedstawionych na kursie.\n\nZa zadanie domowe można dostać maksymalnie 10 punktów. Po 3 za użycie Pythona, skład i formatowanie komórek Markdown oraz treść\ntłumaczaca zagadnienie. Dodatkowy punkt za ogólna schludność i estetykę zeszytu.\n\nGdybyś chciał wydrukować notatnik, powinien zająć przynajmniej dwie strony A4 przy standardowym rozmiarze kroju pisma (podpowiedź - możesz sprawdzić podgląd wydruku w menu File w narzędziu Jupyter Lab, jeśli trudno ocenić Ci ile już napisałeś).\n\nTermin oddania do 19 listopada (grupa wtorkowa) / 21 listopada (grupa czwartkowa). Zadanie domowe proszę przesyłać mailowo. Proszę załaczyć informację czy zgadzasz się na pokazanie Twojej pracy innym studentom i opublikowanie jej tutaj jako przyklad.\n\n### Odpowiedź ustna\n\nOd 7-mych zajęć można zgłaszać się na ochotnika, co najmniej 3 ochotników jest wymaganych na jednych zajęciach.\n\n### Projekt grupowy\n\nMożna się łączyć w grupy w obrębie moich 2 zajęć (wtorek 7:30 i czwartek 7:30), ale nie poza. Zakładam w sumie 5-8 grup projektowych.\n\n### Aktywność\n\nPunkty zostaną przydzielone na zasadzie normalizacji rozkładu aktywności na zajęciach. Gwarantuję, że jedna *duża* aktywność (np. przedstawienie pełnego rozwiązania z listy) będzie dawała co najmniej jeden punkt.\n:::\n\n\n## Python\n\n:::{.panel-tabset}\n\n### Przykłady zeszytów Jupyter\n\nPrzykłady ilustrujące wachlarz możliwości zeszytów Jupyter i Markdown w zastosowaniach matematycznych.\nWymagają one osobnych ustawień środowiska programistycznego i zewnętrznych narzędzi.\nPolecam zapoznanie się z nimi czysto ilustracyjnie jako motywacja do nauki.\n\n- Wizualizacja [zbioru Mandelbrota](https://www.wikiwand.com/pl/articles/Zbi%C3%B3r_Mandelbrota) obliczana na karcie graficznej - [link](https://github.com/bwrob/bwrob.github.io/tree/main/pages/notebooks/mandebrot.ipynb)\n- Pobieranie i analiza danych o cenie akcji spółki giełdowej - [link](https://github.com/bwrob/bwrob.github.io/tree/main/pages/notebooks/cd_projekt_red.ipynb)\n- Numeryczne rozwiązanie [równań różniczkowych cząstkowych](https://www.wikiwand.com/pl/articles/R%C3%B3wnanie_r%C3%B3%C5%BCniczkowe_cz%C4%85stkowe) - [link](https://github.com/jorgensd/dolfinx-tutorial/blob/main/chapter1/fundamentals_code.ipynb)\n- Rozwiązania zadań z podstaw [algebry liniowej](https://www.wikiwand.com/pl/articles/Algebra_liniowa) - [link](https://github.com/weijie-chen/Linear-Algebra-With-Python/blob/master/notebooks/Chapter%201%20-%20Linear%20Equation%20System.ipynb)\n- Cała obecna strona została utworzona z wykorzystaniem Markdownu i Pythona korzystając z technologii [Quarto]](https://quarto.org/) - [link](https://github.com/bwrob/bwrob.github.io/blob/main/pages/courses/pwr-intro-to-cs-2024.qmd)\n\n### Komentarze do list zadań\n\n:::{.panel-tabset}\n\n\n### Lista 1\n\nPython lista 1 - wyrażenia matematyczne\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_1.ipynb)\n\n- Zamiast\n  ```{python}\n  import math\n  pole = math.pi * 10**2\n  ```\n  warto użyć\n  ```{python}\n  from math import pi\n  pole = pi * 10**2\n  ```\n  Zmniejszamy ilość pisania przy wielokrotnym użyciu, a sam import jest wydajniejszy co może mieć znaczenie przy bardziej zaawansowanych zadaniach.\n\n- Funkcje pierwiastka kwadratowego i podnoszenia do potęgi $1/2$ są oczywiście równoważne, natomiast polecana jest `math.sqrt`. Mniej ogólne algorytmy są zazwyczaj lepiej zoptymalizowane (przy naszych zastosowaniach nie ma to jednak znaczenia).\n  ```{python}\n  from math import sqrt\n  x = 2\n  y = sqrt(x)\n  z = x**0.5\n  print(y, z, y == z)\n  ```\n\n- W *zadaniu 4* występuje funkcja podłoga $ \\lfloor x \\rfloor $.  Jest to największa liczba całkowita mniejsza niż $x$. W Pythonie można używać funkcji `math.floor`.\n  ```{python}\n  from math import floor\n  x = 2.5\n  y = 2.9\n  z = -3.1\n  print(floor(x), floor(y), floor(z))\n  ```\n\n- *Zadanie 5* pokazuje, jak ważne jest umiejetne korzystanie ze zmiennych pomocniczych.\n  ```{python}\n  from math import sqrt, pi\n\n  suma_w_nawiasie = 5 ** 4 + 53 * sqrt(89)\n\n  mianownik = 80 * sqrt(15) * suma_w_nawiasie ** (3/2)\n  licznik = 3308 * suma_w_nawiasie - 3 * sqrt(89)\n  pi_przyblizenie = mianownik / licznik\n\n  print(round(pi_przyblizenie, 10))\n  print(round(pi_przyblizenie, 10) == round(pi, 10))\n  ```\n  W powyższym kodzie dużo łatwiej wyłapac bład niż w jednolinijkowym gigancie.\n\n- Do *zadania 6* wrócimy jeszcze raz po funkcjach i pętlach aby zaimplemetować dużo czytelniejsze rozwiązanie.\n\n### Lista 2\n\nPython lista 2 - napisy\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_2.ipynb)\n\n- W razie gdy chcemy sprawdzić, gdzie w systemie zapisany jest dany plik Python albo zeszyt Jupyter poniższe drukuje obecna ścieżkę robocza (Current Working Directory).\n  ```{python}\n  import os\n  print(os.getcwd())\n  ```\n\n\n### Lista 3\n\nPython lista 3 - listy i słowniki\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_3.ipynb)\n\n\nKomentarze dla zaawansowanych:\n\n**Zadanie 2**\n\nKluczem do pisania szybkiego kodu w Pythonie jest jak najczestsze kożystanie z wbudowanych funkcji, które wykonywane sa bezposrednio w języku niskopoziomowym.\n\nPrzykładowo, to zadanie można elegancko rozwiazac za pomoca wbudowaniej biblioteki `itertools`. Składaja się na nia pomocnicze funkcje rozwiazujace często potrzebne funkcjonalności dookoła iteratorów:\n\n```{python}\nfrom itertools import accumulate\nL = list(accumulate((-1) ** i / (i) for i in range(1, 101)))\nprint(L)\n```\nStosujemy tu potrójne złożenie generatorów. Generatory to obiekty, po których możemy iterować, a zwaracaja wartości pojedynczo. Często wykonywane jest to leniwie, dopiero kiedy sa o to zapytane.\n\n* `range(1, 101)` tworzy generator liczb od 1 do 100, nie trzyma tych liczb od razu w pamięci, tylko wie która jest następna.\n*  `(func(n) for n in range(1, 101))` tworzy generator liczb od 1 do 100, a potem wykona operacje na nich.\n*  `accumulate` bierze coś po czym moźna iterować i operator binarny (domyślnie `+`) i zwraca generator częściowych wartości używania tego operatora na wszystkich elementach generatora.\n*  `list` tworzy listę zawierajaca elementy złożonego generatora, zmusza do materializacji wynikow. Wszystko powyżej było tworzone leniwie.\n\n**Zadanie 5**\n\nIterowanie się po wszystkich elementach zbioru często da się zastapić za pomoca matematycznych operacji na zbiorach, które sa dobrze zoptymalizowane.\n\n```{python}\nS = {\"dolnośląskie\", \"lubuskie\", \"wielkopolskie\"}\nM = {\"Wrocław\", \"Opole\", \"Zielona Góra\", \"Gorzów Wielkopolski\"}\nD = {\n    \"dolnośląskie\": {\"Wrocław\"},\n    \"kujawsko-pomorskie\": {\"Bydgoszcz\", \"Toruń\"},\n    \"lubelskie\": {\"Lublin\"},\n    \"lubuskie\": {\"Gorzów Wielkopolski\", \"Zielona Góra\"},\n    \"łódzkie\": {\"Łódź\"},\n    \"małopolskie\": {\"Kraków\"},\n    \"mazowieckie\": {\"Warszawa\"},\n    \"opolskie\": {\"Opole\"},\n    \"podkarpackie\": {\"Rzeszów\"},\n    \"podlaskie\": {\"Białystok\"},\n    \"pomorskie\": {\"Gdańsk\"},\n    \"śląskie\": {\"Katowice\"},\n    \"świętokrzyskie\": {\"Kielce\"},\n    \"warmińsko-mazurskie\": {\"Olsztyn\"},\n    \"wielkopolskie\": {\"Poznań\"},\n    \"zachodniopomorskie\": {\"Szczecin\"},\n}\n\nprint(set.union(*D.values()))\nprint({key for key, value in D.items() if value.intersection(M)})\n```\n\n**Zadanie 6**\n\nW Pythonie 3.8+ jest to możliwe za pomoca operatora `:=` (walrus operator). Pozwala na tworzenie zmiennych pomocniczych wewnatrz wyrażeń języka.\n\n```{python}\nfrom math import sin, cos, radians\n\nn = 101\npunkty = {\n    (angle:=i * 360 / n): (cos(radians(angle)), sin(radians(angle)))\n    for i in range(n)\n}\nprint(punkty)\n```\n    Inna metoda jest użycie generatora wewnatrz listy składanej.\n\n```{python}\npunkty = {\n    angle: (cos(radians(angle)), sin(radians(angle)))\n    for angle in (i * 360 / n for i in range(n))\n}\nprint(punkty)\n```\n\nPlusem użycia generatora, a nie osobnej listy jest to, że jest on leniwie ewaluowany - jeden element na raz. Nie trzymamy katów w pamieci dwa razy.\n\n### Lista 4\n\nPython lista 4 - funkcje.\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_4.ipynb)\n\n* Na zajęciach zobaczyliśy jak zapisać zadanie Fizz Buzz bez porównania modulo 15:\n\n  ```{python}\n  def fizz_buzz(\n      liczba: int,\n  ) -> str:\n      \"\"\"Wyznacz FizzBuzz dla liczby.\"\"\"\n      msg = \"\"\n      if liczba % 3 == 0:\n          msg += \"Fizz\"\n      if liczba % 5 == 0:\n          msg += \"Buzz\"\n      return msg or str(liczba)\n\n\n  print([fizz_buzz(i) for i in range(1, 16)])\n  ```\n\n  Jest to szczególnie istotne, jeżeli dodamy dodatkowo `Mizz` dla liczb podzielnych przez 7 i `Duzz` dla liczb podzielnych przez 8. Funkcję można wtedy jeszcze bardziej uprościć za pomoca słownika i listy składanej:\n\n  ```{python}\n  def fizz_buzz(\n      liczba: int,\n  ) -> str:\n      \"\"\"Wyznacz FizzBuzz dla liczby.\"\"\"\n      msg = \"\"\n      mapa = {\n          3: \"Fizz\",\n          5: \"Buzz\",\n          7: \"Mizz\",\n          8: \"Duzz\",\n      }\n      lista_slow = [mapa[i] for i in mapa if liczba % i == 0]\n      msg = \"\".join(lista_slow)\n      return msg or str(liczba)\n\n  print([fizz_buzz(i) for i in range(1, 16)])\n  ```\n\n  Sprawdzanie wszystkich podzielności miesznych było by bardzo niekomfortowe.\n\n### Lista 5\n\nPython lista 5 - numpy, matplotlib.\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_5.ipynb)\n\n### Lista 6\n\nPython lista 6 - testowanie, wyjatki\n\n[Lista zadań](https://alfa.im.pwr.edu.pl/~giniew/lib/exe/fetch.php?media=rok2425:zimowy:wstep_-_lista_6.ipynb)\n\n:::\n\n:::\n\n\n## Bash i git\n\n:::{.panel-tabset}\n\n### Nawigacja systemu plików\n\nPrzyklady komend uzytych na zajeciach (rozszyfrowanie ich jako zadanie dla czytelnika):\n\n```{bash}\nhistory -c\npwd\ncd ~\nmkdir test\ncd test\ntouch test.txt\ncode test.txt\ncp test.txt test2.txt\nmv test2.txt test3.txt\nrm test2.txt\necho \"Hello World\" >> test3.txt\ncat test3.txt\nwc < test3.txt\ncat test.txt test3.txt > test4.txt\ncd ..\nrm -ri test\nls -la\nhistory 1 > notatki.txt\n```\n\n### Skryptowanie\n\nPrzykladowy skrypt zapisany jako plik `hello.sh`:\n\n```{bash}\n#! bash\n\necho \"Hello $1 !\"\n\nif [ \"$1\"==\"Flip\" ] ; then\n\techo ”Long time no see ! ”\nelif [ \"$1\"==\"Flap\" ] ; then\n\techo \"What do you want?\"\nelse\n\techo \"Who are you again ?\"\nfi\n\nif ! [ -f log.txt ] ; then\n\ttouch log.txt\nfi\necho \"$(date) User $1 visited.\" >> log.txt\n\nfor i in $(seq 5 -1 1)\ndo\n\techo \"Konczymy za $i\"\ndone\n\n```\n\nJego wykonanie:\n\n```{bash}\nchmod +x hello.sh\n./hello.sh Flap\n```\n\nSkrypt w pythonie:\n\n```{python}\n#! python3\n\nimport sys\n\nprint(f\"Hello !\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        for x in sys.argv[1:]:\n            print(f\"Nice to meet you {x}\")\n\n```\n\nJego wykonanie:\n\n```{bash}\nchmod +x hello.py\n./hello.py Flip Flap Flop\n```\n\n### Git i GitLab\n\nUstawienie klucza SSH:\n\n```{bash}\nssh-keygen -t ed25519 -C \"imie nazwisk, indeks\"\n```\n\nKlucz publiczny powinien byc w pliku `~/.ssh/id_ed25519.pub`. Na koncie GitLab powinien byc dodany klucz publiczny SSH. Ustawienie klucza SSH w systemie lokalnym:\n\n```{bash}\neval $(ssh-agent)\nssh-add <sciezka klucza>\nssh git@gitlab.com\n```\n\nTworzymy repozytorium `lekcja-1`na stronie GitLab. Klikamy na niebieskie przycisk `Code` i kopiujemy to co pod SSH.\nSkopiowanie repozytorium GitLab i komit podpisany kluczem SSH:\n```{bash}\ngit clone <sciezka ssh>\ngit config --global user.name \"<imie nazwisko>\"\ngit config --global user.email \"<email pwr>\"\ngit config --local gpg.format ssh\ngit config --local user.signingkey /ścieżka/do/klucza/id_ec25519.pub\ngit switch --create main\n```\n\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"highlight-style":"github","output-file":"pwr-intro-to-cs-2024.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":{"dark":["darkly","../../theme-dark.scss"],"light":"flatly"},"title-block-banner":true,"code-copy":true,"code-block-border-left":true,"title":"Wstęp do programowania (PWr Zima 2024)","about":{"template":"marquee"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}